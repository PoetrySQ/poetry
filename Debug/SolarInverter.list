
SolarInverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009664  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  080097ec  080097ec  0000a7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bec  08009bec  0000b0bc  2**0
                  CONTENTS
  4 .ARM          00000000  08009bec  08009bec  0000b0bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009bec  08009bec  0000b0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bec  08009bec  0000abec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bf0  08009bf0  0000abf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08009bf4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b0bc  2**0
                  CONTENTS
 10 .bss          00000688  200000bc  200000bc  0000b0bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000744  20000744  0000b0bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b0bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000178ec  00000000  00000000  0000b0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c46  00000000  00000000  000229d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  00026620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd2  00000000  00000000  00027ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024161  00000000  00000000  00028aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c986  00000000  00000000  0004cc0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc55f  00000000  00000000  00069591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  00145af0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005900  00000000  00000000  00145ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0014b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000001d3  00000000  00000000  0014b509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000010  00000000  00000000  0014b6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000bc 	.word	0x200000bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080097d4 	.word	0x080097d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c0 	.word	0x200000c0
 80001c4:	080097d4 	.word	0x080097d4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <stopPWM>:
	HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TB1 + HRTIM_OUTPUT_TB2);
}

//反激封波函数，关闭PWM
static inline void stopPWM()
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	control.PWM_ENABLE = 0;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <stopPWM+0x3c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	735a      	strb	r2, [r3, #13]
	HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA1 + HRTIM_OUTPUT_TA2);
 8000b1e:	2103      	movs	r1, #3
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <stopPWM+0x40>)
 8000b22:	f005 f8cf 	bl	8005cc4 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCountStop(&hhrtim1, HRTIM_TIMERID_TIMER_A);
 8000b26:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8000b2a:	480a      	ldr	r0, [pc, #40]	@ (8000b54 <stopPWM+0x40>)
 8000b2c:	f005 f922 	bl	8005d74 <HAL_HRTIM_WaveformCountStop>
	HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TB1 + HRTIM_OUTPUT_TB2);
 8000b30:	210c      	movs	r1, #12
 8000b32:	4808      	ldr	r0, [pc, #32]	@ (8000b54 <stopPWM+0x40>)
 8000b34:	f005 f8c6 	bl	8005cc4 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCountStop(&hhrtim1, HRTIM_TIMERID_TIMER_B);
 8000b38:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <stopPWM+0x40>)
 8000b3e:	f005 f919 	bl	8005d74 <HAL_HRTIM_WaveformCountStop>
	HAL_HRTIM_WaveformCountStop(&hhrtim1, HRTIM_TIMERID_MASTER);
 8000b42:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000b46:	4803      	ldr	r0, [pc, #12]	@ (8000b54 <stopPWM+0x40>)
 8000b48:	f005 f914 	bl	8005d74 <HAL_HRTIM_WaveformCountStop>
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000288 	.word	0x20000288
 8000b54:	200002b4 	.word	0x200002b4

08000b58 <startAllInterrupt>:
	HAL_GPIO_WritePin(GPIOB, SD2_Pin, GPIO_PIN_RESET);
}
#endif
//开启中断
static inline void startAllInterrupt()
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000b5c:	b662      	cpsie	i
}
 8000b5e:	bf00      	nop
	 __enable_irq();
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <stopAllInterrupt>:
//关闭中断
static inline void stopAllInterrupt()
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6e:	b672      	cpsid	i
}
 8000b70:	bf00      	nop
	 __disable_irq();
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <updatePWM>:
//更新PWM函数
static inline void updatePWM()
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
	//更新比较值
	//A相
	__HAL_HRTIM_SETCOMPARE(&hhrtim1,0x0,HRTIM_COMPAREUNIT_1,mainDCL.COMP1A);
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <updatePWM+0x58>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a14      	ldr	r2, [pc, #80]	@ (8000bd8 <updatePWM+0x5c>)
 8000b86:	6952      	ldr	r2, [r2, #20]
 8000b88:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	__HAL_HRTIM_SETCOMPARE(&hhrtim1,0x0,HRTIM_COMPAREUNIT_2,mainDCL.COMP2A);
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <updatePWM+0x58>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a11      	ldr	r2, [pc, #68]	@ (8000bd8 <updatePWM+0x5c>)
 8000b92:	6992      	ldr	r2, [r2, #24]
 8000b94:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	__HAL_HRTIM_SETCOMPARE(&hhrtim1,0x0,HRTIM_COMPAREUNIT_3,mainDCL.COMP3A);
 8000b98:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <updatePWM+0x58>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd8 <updatePWM+0x5c>)
 8000b9e:	69d2      	ldr	r2, [r2, #28]
 8000ba0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	//B相
	__HAL_HRTIM_SETCOMPARE(&hhrtim1,0x1,HRTIM_COMPAREUNIT_1,mainDCL.COMP1B);
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <updatePWM+0x58>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd8 <updatePWM+0x5c>)
 8000baa:	6a12      	ldr	r2, [r2, #32]
 8000bac:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
	__HAL_HRTIM_SETCOMPARE(&hhrtim1,0x1,HRTIM_COMPAREUNIT_2,mainDCL.COMP2B);
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <updatePWM+0x58>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a08      	ldr	r2, [pc, #32]	@ (8000bd8 <updatePWM+0x5c>)
 8000bb6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000bb8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
	__HAL_HRTIM_SETCOMPARE(&hhrtim1,0x1,HRTIM_COMPAREUNIT_3,mainDCL.COMP3B);
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <updatePWM+0x58>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <updatePWM+0x5c>)
 8000bc2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000bc4:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	200002b4 	.word	0x200002b4
 8000bd8:	200000d8 	.word	0x200000d8

08000bdc <upDownLimitFloat>:
//浮点数限幅函数
static inline float upDownLimitFloat(float arg, float max, float min)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	ed87 0a03 	vstr	s0, [r7, #12]
 8000be6:	edc7 0a02 	vstr	s1, [r7, #8]
 8000bea:	ed87 1a01 	vstr	s2, [r7, #4]
	if(arg > max)
 8000bee:	ed97 7a03 	vldr	s14, [r7, #12]
 8000bf2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bfe:	dd01      	ble.n	8000c04 <upDownLimitFloat+0x28>
	{
		arg = max;
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60fb      	str	r3, [r7, #12]
	}
	if(arg <= min)
 8000c04:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c08:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c14:	d801      	bhi.n	8000c1a <upDownLimitFloat+0x3e>
	{
		arg = min;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]
	}
	return arg;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	ee07 3a90 	vmov	s15, r3
}
 8000c20:	eeb0 0a67 	vmov.f32	s0, s15
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <upDownLimitUint>:
//无符号整数限幅函数
static inline uint32_t upDownLimitUint(uint32_t arg, uint32_t max, uint32_t min)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b085      	sub	sp, #20
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
	if(arg > max)
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d901      	bls.n	8000c46 <upDownLimitUint+0x18>
	{
		arg = max;
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	60fb      	str	r3, [r7, #12]
	}
	if(arg <= min)
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d801      	bhi.n	8000c52 <upDownLimitUint+0x24>
	{
		arg = min;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60fb      	str	r3, [r7, #12]
	}
	return arg;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <calcDuty>:
//浮点数占空比转换为MCU的HRTIM的相应值
static inline uint32_t calcDuty(float d)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	ed87 0a01 	vstr	s0, [r7, #4]
	return (uint32_t)(d * 46080);
 8000c6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c6e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000c8c <calcDuty+0x2c>
 8000c72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c7a:	ee17 3a90 	vmov	r3, s15
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	47340000 	.word	0x47340000

08000c90 <stopTim1Interrupt>:
//关闭TIM1
static inline void stopTim1Interrupt()
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim1);
 8000c94:	4803      	ldr	r0, [pc, #12]	@ (8000ca4 <stopTim1Interrupt+0x14>)
 8000c96:	f007 f80f 	bl	8007cb8 <HAL_TIM_Base_Stop>
	control.TIMER1 = 0;
 8000c9a:	4b03      	ldr	r3, [pc, #12]	@ (8000ca8 <stopTim1Interrupt+0x18>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	72da      	strb	r2, [r3, #11]
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000524 	.word	0x20000524
 8000ca8:	20000288 	.word	0x20000288

08000cac <stopTim2Interrupt>:
//关闭TIM2
static inline void stopTim2Interrupt()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim2);
 8000cb0:	4803      	ldr	r0, [pc, #12]	@ (8000cc0 <stopTim2Interrupt+0x14>)
 8000cb2:	f007 f801 	bl	8007cb8 <HAL_TIM_Base_Stop>
	control.TIMER2 = 0;
 8000cb6:	4b03      	ldr	r3, [pc, #12]	@ (8000cc4 <stopTim2Interrupt+0x18>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	731a      	strb	r2, [r3, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000570 	.word	0x20000570
 8000cc4:	20000288 	.word	0x20000288

08000cc8 <DCL_init>:
		float kp,
		float kr,
		float f0,
		float fc,
		float Ts)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6178      	str	r0, [r7, #20]
 8000cd0:	ed87 0a04 	vstr	s0, [r7, #16]
 8000cd4:	edc7 0a03 	vstr	s1, [r7, #12]
 8000cd8:	ed87 1a02 	vstr	s2, [r7, #8]
 8000cdc:	edc7 1a01 	vstr	s3, [r7, #4]
 8000ce0:	ed87 2a00 	vstr	s4, [r7]

	formalDCL->absVgrid = 0;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	f04f 0200 	mov.w	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
	formalDCL->kpv = 0;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
	formalDCL->error = 0;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	f04f 0200 	mov.w	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
	formalDCL->d = 0;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	731a      	strb	r2, [r3, #12]
	formalDCL->COMP1A = 0;
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
	formalDCL->COMP2A = 0;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
	formalDCL->COMP3A = 0;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]

	formalDCL->COMP1B = 0;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
	formalDCL->COMP2B = 0;
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	625a      	str	r2, [r3, #36]	@ 0x24
	formalDCL->COMP3B = 0;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	2200      	movs	r2, #0
 8000d24:	629a      	str	r2, [r3, #40]	@ 0x28


	PR_init(&firstPr, kp, kr, f0, fc, Ts);
 8000d26:	ed97 2a00 	vldr	s4, [r7]
 8000d2a:	edd7 1a01 	vldr	s3, [r7, #4]
 8000d2e:	ed97 1a02 	vldr	s2, [r7, #8]
 8000d32:	edd7 0a03 	vldr	s1, [r7, #12]
 8000d36:	ed97 0a04 	vldr	s0, [r7, #16]
 8000d3a:	480c      	ldr	r0, [pc, #48]	@ (8000d6c <DCL_init+0xa4>)
 8000d3c:	f000 fa9a 	bl	8001274 <PR_init>

	//初始化死区值
	calcDeadTime(L_LEAK_A, C_CLAMP_A, CA_A + CSW_A, mainDCL.tdCountA);
 8000d40:	480b      	ldr	r0, [pc, #44]	@ (8000d70 <DCL_init+0xa8>)
 8000d42:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8000d74 <DCL_init+0xac>
 8000d46:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000d4a:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000d78 <DCL_init+0xb0>
 8000d4e:	f000 f91d 	bl	8000f8c <calcDeadTime>
	calcDeadTime(L_LEAK_B, C_CLAMP_B, CA_B + CSW_B, mainDCL.tdCountB);
 8000d52:	480a      	ldr	r0, [pc, #40]	@ (8000d7c <DCL_init+0xb4>)
 8000d54:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 8000d74 <DCL_init+0xac>
 8000d58:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8000d5c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8000d80 <DCL_init+0xb8>
 8000d60:	f000 f914 	bl	8000f8c <calcDeadTime>
}
 8000d64:	bf00      	nop
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000130 	.word	0x20000130
 8000d70:	20000104 	.word	0x20000104
 8000d74:	3f4d4fdf 	.word	0x3f4d4fdf
 8000d78:	460ca000 	.word	0x460ca000
 8000d7c:	2000010c 	.word	0x2000010c
 8000d80:	42c80000 	.word	0x42c80000

08000d84 <currentLoopCalc>:
//@param [in] Vg: 电网采样电压
//@param [in] flyback_i1: 第一路反激原边电流
//@param [in] flyback_i2: 第二路反激原边电流

void currentLoopCalc(dclCofficient *formalDCL, float iL, float Vpv, float Vg, float flyback_i1, float flyback_i2)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	61f8      	str	r0, [r7, #28]
 8000d8c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000d90:	edc7 0a05 	vstr	s1, [r7, #20]
 8000d94:	ed87 1a04 	vstr	s2, [r7, #16]
 8000d98:	edc7 1a03 	vstr	s3, [r7, #12]
 8000d9c:	ed87 2a02 	vstr	s4, [r7, #8]

#endif

	//参考电流和电感电流取绝对值
//	arm_abs_f32(&Vpll, &Vpll,1);
	arm_abs_f32(&iL, &iL, 1);
 8000da0:	f107 0118 	add.w	r1, r7, #24
 8000da4:	f107 0318 	add.w	r3, r7, #24
 8000da8:	2201      	movs	r2, #1
 8000daa:	4618      	mov	r0, r3
 8000dac:	f007 fefc 	bl	8008ba8 <arm_abs_f32>
	arm_abs_f32(&gridPll.sine, &formalDCL->absVgrid, 1);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	2201      	movs	r2, #1
 8000db4:	4619      	mov	r1, r3
 8000db6:	4845      	ldr	r0, [pc, #276]	@ (8000ecc <currentLoopCalc+0x148>)
 8000db8:	f007 fef6 	bl	8008ba8 <arm_abs_f32>

	//锁相环输出的Sine幅值为1，需要根据kg设置不同的增益，控制参考电流
	//计算误差
	formalDCL->error = formalDCL->absVgrid * mpptPid.out  - iL;
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	ed93 7a00 	vldr	s14, [r3]
 8000dc2:	4b43      	ldr	r3, [pc, #268]	@ (8000ed0 <currentLoopCalc+0x14c>)
 8000dc4:	edd3 7a06 	vldr	s15, [r3, #24]
 8000dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	edc3 7a02 	vstr	s15, [r3, #8]
	firstPr.xn = formalDCL->error;
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	4a3d      	ldr	r2, [pc, #244]	@ (8000ed4 <currentLoopCalc+0x150>)
 8000de0:	6393      	str	r3, [r2, #56]	@ 0x38

	//运行PR控制器
	PR_calc(&firstPr);
 8000de2:	483c      	ldr	r0, [pc, #240]	@ (8000ed4 <currentLoopCalc+0x150>)
 8000de4:	f000 fb6a 	bl	80014bc <PR_calc>

	//加入前馈控制
	formalDCL->d = (uint32_t)(firstPr.yn + Vg / (Vpv * formalDCL->kpv + Vg));
 8000de8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed4 <currentLoopCalc+0x150>)
 8000dea:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	edd3 6a01 	vldr	s13, [r3, #4]
 8000df4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000df8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000dfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e00:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e04:	ed97 6a04 	vldr	s12, [r7, #16]
 8000e08:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e14:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e18:	793a      	ldrb	r2, [r7, #4]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	731a      	strb	r2, [r3, #12]


	//进均流环
	//d += (uint32_t)CSL_calc(flyback_i1, flyback_i2);

	formalDCL->d = upDownLimitUint(formalDCL->d, 98, 10);
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	7b1b      	ldrb	r3, [r3, #12]
 8000e22:	220a      	movs	r2, #10
 8000e24:	2162      	movs	r1, #98	@ 0x62
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff01 	bl	8000c2e <upDownLimitUint>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	731a      	strb	r2, [r3, #12]

	formalDCL->dutyComp = calcDuty(formalDCL->d / 100.0);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	7b1b      	ldrb	r3, [r3, #12]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fb17 	bl	800046c <__aeabi_i2d>
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	4b25      	ldr	r3, [pc, #148]	@ (8000ed8 <currentLoopCalc+0x154>)
 8000e44:	f7ff fca6 	bl	8000794 <__aeabi_ddiv>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f7ff fe10 	bl	8000a74 <__aeabi_d2f>
 8000e54:	4603      	mov	r3, r0
 8000e56:	ee00 3a10 	vmov	s0, r3
 8000e5a:	f7ff ff01 	bl	8000c60 <calcDuty>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	611a      	str	r2, [r3, #16]
	//限制最大占空比为0.7
	//限制最小占空比为0.01
	formalDCL->dutyComp = upDownLimitUint(formalDCL->dutyComp, 32256, 460);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8000e6c:	f44f 41fc 	mov.w	r1, #32256	@ 0x7e00
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fedc 	bl	8000c2e <upDownLimitUint>
 8000e76:	4602      	mov	r2, r0
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	611a      	str	r2, [r3, #16]

	formalDCL->COMP1A = formalDCL->dutyComp;
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	691a      	ldr	r2, [r3, #16]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	615a      	str	r2, [r3, #20]
	formalDCL->COMP2A = formalDCL->COMP1A + mainDCL.tdCountA[0];
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <currentLoopCalc+0x158>)
 8000e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e8c:	441a      	add	r2, r3
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	619a      	str	r2, [r3, #24]
	formalDCL->COMP3A = 46080 - mainDCL.tdCountA[1];
 8000e92:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <currentLoopCalc+0x158>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f5c3 4234 	rsb	r2, r3, #46080	@ 0xb400
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	61da      	str	r2, [r3, #28]

	formalDCL->COMP1B = formalDCL->dutyComp;
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	691a      	ldr	r2, [r3, #16]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	621a      	str	r2, [r3, #32]
	formalDCL->COMP2B = formalDCL->COMP1B + mainDCL.tdCountB[0];
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	6a1a      	ldr	r2, [r3, #32]
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <currentLoopCalc+0x158>)
 8000eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eae:	441a      	add	r2, r3
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	625a      	str	r2, [r3, #36]	@ 0x24
	formalDCL->COMP3B = 46080 - mainDCL.tdCountB[1];
 8000eb4:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <currentLoopCalc+0x158>)
 8000eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eb8:	f5c3 4234 	rsb	r2, r3, #46080	@ 0xb400
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	629a      	str	r2, [r3, #40]	@ 0x28

	updatePWM();
 8000ec0:	f7ff fe5c 	bl	8000b7c <updatePWM>
}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200004dc 	.word	0x200004dc
 8000ed0:	20000114 	.word	0x20000114
 8000ed4:	20000130 	.word	0x20000130
 8000ed8:	40590000 	.word	0x40590000
 8000edc:	200000d8 	.word	0x200000d8

08000ee0 <protectCheck>:
}



void protectCheck()
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
#endif
//外国标准，暂定
#if 0
#endif
	//检测逆变是否过压
	if(adcSampleValue.vInv.data > systemValue.maxVoltageGrid)
 8000ee4:	4b24      	ldr	r3, [pc, #144]	@ (8000f78 <protectCheck+0x98>)
 8000ee6:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8000eea:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <protectCheck+0x9c>)
 8000eec:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	dd05      	ble.n	8000f06 <protectCheck+0x26>
	{
		fault.INV_OVER_VOLTAGE = 1;
 8000efa:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <protectCheck+0xa0>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	719a      	strb	r2, [r3, #6]
		control.ERROR_FLAG = 1;
 8000f00:	4b20      	ldr	r3, [pc, #128]	@ (8000f84 <protectCheck+0xa4>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	721a      	strb	r2, [r3, #8]
		//printf("逆变过压");
	}
	//检测逆变是否过流
	if(adcSampleValue.iGrid.data > systemValue.maxGridConnnectedCurrent)
 8000f06:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <protectCheck+0x98>)
 8000f08:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <protectCheck+0x9c>)
 8000f0e:	edd3 7a08 	vldr	s15, [r3, #32]
 8000f12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1a:	dd05      	ble.n	8000f28 <protectCheck+0x48>
	{
		fault.INV_OVER_CURRENT = 1;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <protectCheck+0xa0>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	71da      	strb	r2, [r3, #7]
		control.ERROR_FLAG = 1;
 8000f22:	4b18      	ldr	r3, [pc, #96]	@ (8000f84 <protectCheck+0xa4>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	721a      	strb	r2, [r3, #8]
		//printf("逆变过流");
	}

	//检查故障字
	if(control.ERROR_FLAG)
 8000f28:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <protectCheck+0xa4>)
 8000f2a:	7a1b      	ldrb	r3, [r3, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <protectCheck+0x5e>
	{
		//有故障，停止发波，停止中断
		stopAllInterrupt();
 8000f30:	f7ff fe1b 	bl	8000b6a <stopAllInterrupt>
		stopPWM();
 8000f34:	f7ff fdee 	bl	8000b14 <stopPWM>
		//返回故障状态
		stFsm.stNextState = errorState;
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <protectCheck+0xa8>)
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	705a      	strb	r2, [r3, #1]
	}
	//检测停机指令
	if(control.STOP_MACHINE == 1)
 8000f3e:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <protectCheck+0xa4>)
 8000f40:	789b      	ldrb	r3, [r3, #2]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d115      	bne.n	8000f72 <protectCheck+0x92>
	{
		//停机
		stopAllInterrupt();
 8000f46:	f7ff fe10 	bl	8000b6a <stopAllInterrupt>
		stopPWM();
 8000f4a:	f7ff fde3 	bl	8000b14 <stopPWM>
		//返回初始化状态
		controlStateInit(&control);
 8000f4e:	480d      	ldr	r0, [pc, #52]	@ (8000f84 <protectCheck+0xa4>)
 8000f50:	f000 fd22 	bl	8001998 <controlStateInit>
		faultStateInit(&fault);
 8000f54:	480a      	ldr	r0, [pc, #40]	@ (8000f80 <protectCheck+0xa0>)
 8000f56:	f000 fd53 	bl	8001a00 <faultStateInit>
		control.INIT_FLAG = 1;
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <protectCheck+0xa4>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	729a      	strb	r2, [r3, #10]
		stopTim1Interrupt();
 8000f60:	f7ff fe96 	bl	8000c90 <stopTim1Interrupt>
		stopTim2Interrupt();
 8000f64:	f7ff fea2 	bl	8000cac <stopTim2Interrupt>
		stFsm.stNextState = initState;
 8000f68:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <protectCheck+0xa8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	705a      	strb	r2, [r3, #1]
		startAllInterrupt();
 8000f6e:	f7ff fdf3 	bl	8000b58 <startAllInterrupt>
	}
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200003fc 	.word	0x200003fc
 8000f7c:	2000025c 	.word	0x2000025c
 8000f80:	20000298 	.word	0x20000298
 8000f84:	20000288 	.word	0x20000288
 8000f88:	20000518 	.word	0x20000518

08000f8c <calcDeadTime>:
//Input[2]: MOS结电容，单位nF
//DeadCount[0]: 辅助开关管开通前死区时间，单位ns
//DeadCount[1]: 主开关管开通前死区时间，通过设计辅助开关管关断时间，来实现下一周期触发主开关管开通时间前的死区。即提前关断时间

void calcDeadTime(float Lleak, float Cclamp, float Cw, uint32_t* DeadCount)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f96:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f9a:	ed87 1a01 	vstr	s2, [r7, #4]
 8000f9e:	6038      	str	r0, [r7, #0]
	float DeadTime[2];
	//计算时间
	DeadTime[0] = 1;
 8000fa0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000fa4:	613b      	str	r3, [r7, #16]
	//pi*sqrt(Lleak*(Cclamp+Cw)/2)
	DeadTime[1] = PI*sqrtf(Lleak*(Cclamp+Cw))/2;
 8000fa6:	ed97 7a02 	vldr	s14, [r7, #8]
 8000faa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fba:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbe:	f007 fe69 	bl	8008c94 <sqrtf>
 8000fc2:	eef0 7a40 	vmov.f32	s15, s0
 8000fc6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001024 <calcDeadTime+0x98>
 8000fca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fce:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd6:	edc7 7a05 	vstr	s15, [r7, #20]
	//转化为计数量
	DeadCount[0] = (DeadTime[0] / 10000) * 46080;
 8000fda:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fde:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001028 <calcDeadTime+0x9c>
 8000fe2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800102c <calcDeadTime+0xa0>
 8000fea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ff2:	ee17 2a90 	vmov	r2, s15
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	601a      	str	r2, [r3, #0]
	DeadCount[1] = (DeadTime[1] / 10000) * 46080;
 8000ffa:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ffe:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001028 <calcDeadTime+0x9c>
 8001002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001006:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800102c <calcDeadTime+0xa0>
 800100a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	3304      	adds	r3, #4
 8001012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001016:	ee17 2a90 	vmov	r2, s15
 800101a:	601a      	str	r2, [r3, #0]
}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40490fdb 	.word	0x40490fdb
 8001028:	461c4000 	.word	0x461c4000
 800102c:	47340000 	.word	0x47340000

08001030 <runCurrentLoop>:

//电流环以及电压环放在ADC转换完成中断中运行
//电流环
void runCurrentLoop()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	//mppt Calculate
	mpptPno(&mpptMain, adcSampleValue.vPV.data, adcSampleValue.iPV.data);
 8001034:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <runCurrentLoop+0x94>)
 8001036:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800103a:	4b22      	ldr	r3, [pc, #136]	@ (80010c4 <runCurrentLoop+0x94>)
 800103c:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 8001040:	eef0 0a47 	vmov.f32	s1, s14
 8001044:	eeb0 0a67 	vmov.f32	s0, s15
 8001048:	481f      	ldr	r0, [pc, #124]	@ (80010c8 <runCurrentLoop+0x98>)
 800104a:	f001 f8c1 	bl	80021d0 <mpptPno>
	PI_transfer(mpptMain.Vref - adcSampleValue.vPV.data, &mpptPid);
 800104e:	4b1e      	ldr	r3, [pc, #120]	@ (80010c8 <runCurrentLoop+0x98>)
 8001050:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001054:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <runCurrentLoop+0x94>)
 8001056:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800105a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800105e:	481b      	ldr	r0, [pc, #108]	@ (80010cc <runCurrentLoop+0x9c>)
 8001060:	eeb0 0a67 	vmov.f32	s0, s15
 8001064:	f000 f8c1 	bl	80011ea <PI_transfer>
	//Limiting Output amplitude of PI
	mpptPid.out = upDownLimitFloat(mpptPid.out, 0.6, 0);
 8001068:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <runCurrentLoop+0x9c>)
 800106a:	edd3 7a06 	vldr	s15, [r3, #24]
 800106e:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 80010d0 <runCurrentLoop+0xa0>
 8001072:	eddf 0a18 	vldr	s1, [pc, #96]	@ 80010d4 <runCurrentLoop+0xa4>
 8001076:	eeb0 0a67 	vmov.f32	s0, s15
 800107a:	f7ff fdaf 	bl	8000bdc <upDownLimitFloat>
 800107e:	eef0 7a40 	vmov.f32	s15, s0
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <runCurrentLoop+0x9c>)
 8001084:	edc3 7a06 	vstr	s15, [r3, #24]
	//计算电流环
	currentLoopCalc(&mainDCL,
 8001088:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <runCurrentLoop+0x94>)
 800108a:	edd3 7a08 	vldr	s15, [r3, #32]
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <runCurrentLoop+0x94>)
 8001090:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <runCurrentLoop+0x94>)
 8001096:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <runCurrentLoop+0x94>)
 800109c:	ed93 6a14 	vldr	s12, [r3, #80]	@ 0x50
 80010a0:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <runCurrentLoop+0x94>)
 80010a2:	edd3 5a17 	vldr	s11, [r3, #92]	@ 0x5c
 80010a6:	eeb0 2a65 	vmov.f32	s4, s11
 80010aa:	eef0 1a46 	vmov.f32	s3, s12
 80010ae:	eeb0 1a66 	vmov.f32	s2, s13
 80010b2:	eef0 0a47 	vmov.f32	s1, s14
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	4807      	ldr	r0, [pc, #28]	@ (80010d8 <runCurrentLoop+0xa8>)
 80010bc:	f7ff fe62 	bl	8000d84 <currentLoopCalc>
			adcSampleValue.iGrid.data,
			adcSampleValue.vPV.data,
			adcSampleValue.vGrid.data,
			adcSampleValue.flybackI1.data,
			adcSampleValue.flybackI2.data);
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200003fc 	.word	0x200003fc
 80010c8:	200003d0 	.word	0x200003d0
 80010cc:	20000114 	.word	0x20000114
 80010d0:	00000000 	.word	0x00000000
 80010d4:	3f19999a 	.word	0x3f19999a
 80010d8:	200000d8 	.word	0x200000d8

080010dc <runVoltageLoop>:
//电压环
void runVoltageLoop()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	mainDCL.d = upDownLimitUint(mainDCL.d, 98, 10);
 80010e0:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <runVoltageLoop+0xb0>)
 80010e2:	7b1b      	ldrb	r3, [r3, #12]
 80010e4:	220a      	movs	r2, #10
 80010e6:	2162      	movs	r1, #98	@ 0x62
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fda0 	bl	8000c2e <upDownLimitUint>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b26      	ldr	r3, [pc, #152]	@ (800118c <runVoltageLoop+0xb0>)
 80010f4:	731a      	strb	r2, [r3, #12]

	mainDCL.dutyComp = calcDuty(mainDCL.d/100.0);
 80010f6:	4b25      	ldr	r3, [pc, #148]	@ (800118c <runVoltageLoop+0xb0>)
 80010f8:	7b1b      	ldrb	r3, [r3, #12]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f9b6 	bl	800046c <__aeabi_i2d>
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <runVoltageLoop+0xb4>)
 8001106:	f7ff fb45 	bl	8000794 <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fcaf 	bl	8000a74 <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	ee00 3a10 	vmov	s0, r3
 800111c:	f7ff fda0 	bl	8000c60 <calcDuty>
 8001120:	4603      	mov	r3, r0
 8001122:	4a1a      	ldr	r2, [pc, #104]	@ (800118c <runVoltageLoop+0xb0>)
 8001124:	6113      	str	r3, [r2, #16]
	//限制最大占空比为0.7
	//限制最小占空比为0.01
	mainDCL.dutyComp = upDownLimitUint(mainDCL.dutyComp, 32256, 460);
 8001126:	4b19      	ldr	r3, [pc, #100]	@ (800118c <runVoltageLoop+0xb0>)
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800112e:	f44f 41fc 	mov.w	r1, #32256	@ 0x7e00
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fd7b 	bl	8000c2e <upDownLimitUint>
 8001138:	4603      	mov	r3, r0
 800113a:	4a14      	ldr	r2, [pc, #80]	@ (800118c <runVoltageLoop+0xb0>)
 800113c:	6113      	str	r3, [r2, #16]

	mainDCL.COMP1A = mainDCL.dutyComp;
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <runVoltageLoop+0xb0>)
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <runVoltageLoop+0xb0>)
 8001144:	6153      	str	r3, [r2, #20]
	mainDCL.COMP2A = mainDCL.dutyComp + mainDCL.tdCountA[0];
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <runVoltageLoop+0xb0>)
 8001148:	691a      	ldr	r2, [r3, #16]
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <runVoltageLoop+0xb0>)
 800114c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800114e:	4413      	add	r3, r2
 8001150:	4a0e      	ldr	r2, [pc, #56]	@ (800118c <runVoltageLoop+0xb0>)
 8001152:	6193      	str	r3, [r2, #24]
	mainDCL.COMP3A = 46080 - mainDCL.tdCountA[1];
 8001154:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <runVoltageLoop+0xb0>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001158:	f5c3 4334 	rsb	r3, r3, #46080	@ 0xb400
 800115c:	4a0b      	ldr	r2, [pc, #44]	@ (800118c <runVoltageLoop+0xb0>)
 800115e:	61d3      	str	r3, [r2, #28]

	mainDCL.COMP1B = mainDCL.dutyComp;
 8001160:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <runVoltageLoop+0xb0>)
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	4a09      	ldr	r2, [pc, #36]	@ (800118c <runVoltageLoop+0xb0>)
 8001166:	6213      	str	r3, [r2, #32]
	mainDCL.COMP2B = mainDCL.dutyComp + mainDCL.tdCountB[0];
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <runVoltageLoop+0xb0>)
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	4b07      	ldr	r3, [pc, #28]	@ (800118c <runVoltageLoop+0xb0>)
 800116e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001170:	4413      	add	r3, r2
 8001172:	4a06      	ldr	r2, [pc, #24]	@ (800118c <runVoltageLoop+0xb0>)
 8001174:	6253      	str	r3, [r2, #36]	@ 0x24
	mainDCL.COMP3B = 46080 - mainDCL.tdCountB[1];
 8001176:	4b05      	ldr	r3, [pc, #20]	@ (800118c <runVoltageLoop+0xb0>)
 8001178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800117a:	f5c3 4334 	rsb	r3, r3, #46080	@ 0xb400
 800117e:	4a03      	ldr	r2, [pc, #12]	@ (800118c <runVoltageLoop+0xb0>)
 8001180:	6293      	str	r3, [r2, #40]	@ 0x28

	updatePWM();
 8001182:	f7ff fcfb 	bl	8000b7c <updatePWM>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200000d8 	.word	0x200000d8
 8001190:	40590000 	.word	0x40590000

08001194 <PID_init>:

PID cslPid;
PID mpptPid;

void PID_init(float kp, float ki, float kd, float i_max, float i_min,PID* pid)
{
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	ed87 0a05 	vstr	s0, [r7, #20]
 800119e:	edc7 0a04 	vstr	s1, [r7, #16]
 80011a2:	ed87 1a03 	vstr	s2, [r7, #12]
 80011a6:	edc7 1a02 	vstr	s3, [r7, #8]
 80011aa:	ed87 2a01 	vstr	s4, [r7, #4]
 80011ae:	6038      	str	r0, [r7, #0]
	//初始化PID参数
	pid->kp = kp;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	609a      	str	r2, [r3, #8]
	pid->i_max = i_max;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	60da      	str	r2, [r3, #12]
	pid->i_min = i_min;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	611a      	str	r2, [r3, #16]
	//初始化积分器
	pid->i_sum = 0;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
	pid->out = 0;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
}
 80011de:	bf00      	nop
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <PI_transfer>:

}

//Proportion And Integral Control Machine
void PI_transfer(float error,PID* pid)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	ed87 0a01 	vstr	s0, [r7, #4]
 80011f4:	6038      	str	r0, [r7, #0]
	pid->out = pid->kp * error + pid->i_sum;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	ed93 7a00 	vldr	s14, [r3]
 80011fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	edd3 7a05 	vldr	s15, [r3, #20]
 800120a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	edc3 7a06 	vstr	s15, [r3, #24]
	//积分器累加值
	pid->i_sum = pid->ki * error;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	ed93 7a01 	vldr	s14, [r3, #4]
 800121a:	edd7 7a01 	vldr	s15, [r7, #4]
 800121e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	edc3 7a05 	vstr	s15, [r3, #20]
	//积分器限幅
	if(pid->i_sum > pid->i_max)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	ed93 7a05 	vldr	s14, [r3, #20]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	edd3 7a03 	vldr	s15, [r3, #12]
 8001234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123c:	dd04      	ble.n	8001248 <PI_transfer+0x5e>
		pid->i_sum = pid->i_max;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	615a      	str	r2, [r3, #20]
	else if(pid->i_sum < pid->i_min)
		pid->i_sum = pid->i_min;
}
 8001246:	e00f      	b.n	8001268 <PI_transfer+0x7e>
	else if(pid->i_sum < pid->i_min)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	ed93 7a05 	vldr	s14, [r3, #20]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	edd3 7a04 	vldr	s15, [r3, #16]
 8001254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125c:	d400      	bmi.n	8001260 <PI_transfer+0x76>
}
 800125e:	e003      	b.n	8001268 <PI_transfer+0x7e>
		pid->i_sum = pid->i_min;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	615a      	str	r2, [r3, #20]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <PR_init>:
#include <PR.h>

PR firstPr;
//Initialization
void PR_init(PR * pr,float kp, float kr, float f0, float fc, float Ts)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	@ 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6178      	str	r0, [r7, #20]
 800127c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001280:	edc7 0a03 	vstr	s1, [r7, #12]
 8001284:	ed87 1a02 	vstr	s2, [r7, #8]
 8001288:	edc7 1a01 	vstr	s3, [r7, #4]
 800128c:	ed87 2a00 	vstr	s4, [r7]
	pr->kp = kp;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	601a      	str	r2, [r3, #0]
	pr->kr = kr;
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	605a      	str	r2, [r3, #4]
	pr->f0 = f0;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	609a      	str	r2, [r3, #8]
	pr->fc = fc;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	60da      	str	r2, [r3, #12]
	pr->Ts = Ts;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	611a      	str	r2, [r3, #16]

	float wc = 2 * PI * fc;
 80012ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b2:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80014b8 <PR_init+0x244>
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ba:	edc7 7a07 	vstr	s15, [r7, #28]
	float w0 = 2 * PI * f0;
 80012be:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c2:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 80014b8 <PR_init+0x244>
 80012c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ca:	edc7 7a06 	vstr	s15, [r7, #24]
	//Calculate The Coefficient Of Difference Equation

	pr->A0 = 4/Ts/Ts+4*wc/Ts+w0*w0;
 80012ce:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80012d2:	edd7 7a00 	vldr	s15, [r7]
 80012d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012da:	edd7 7a00 	vldr	s15, [r7]
 80012de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80012e6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80012ea:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80012ee:	edd7 6a00 	vldr	s13, [r7]
 80012f2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80012f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80012fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	edc3 7a05 	vstr	s15, [r3, #20]
	pr->A1 = 2*w0*w0-8/Ts/Ts;
 800130c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001310:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001314:	edd7 7a06 	vldr	s15, [r7, #24]
 8001318:	ee27 7a27 	vmul.f32	s14, s14, s15
 800131c:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001320:	edd7 7a00 	vldr	s15, [r7]
 8001324:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8001328:	edd7 6a00 	vldr	s13, [r7]
 800132c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	edc3 7a06 	vstr	s15, [r3, #24]
	pr->A2 = 4/Ts/Ts-4*wc/Ts+w0*w0;
 800133a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800133e:	edd7 7a00 	vldr	s15, [r7]
 8001342:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001346:	edd7 7a00 	vldr	s15, [r7]
 800134a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800134e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001352:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001356:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800135a:	edd7 6a00 	vldr	s13, [r7]
 800135e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001362:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001366:	edd7 7a06 	vldr	s15, [r7, #24]
 800136a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	edc3 7a07 	vstr	s15, [r3, #28]

	pr->B0 = 4*kp/Ts/Ts+4*wc*(kp+kr)/Ts+kp*w0*w0;
 8001378:	edd7 7a04 	vldr	s15, [r7, #16]
 800137c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001380:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001384:	edd7 7a00 	vldr	s15, [r7]
 8001388:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800138c:	edd7 7a00 	vldr	s15, [r7]
 8001390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001394:	edd7 7a07 	vldr	s15, [r7, #28]
 8001398:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800139c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80013a0:	ed97 6a04 	vldr	s12, [r7, #16]
 80013a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80013ac:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80013b0:	edd7 6a00 	vldr	s13, [r7]
 80013b4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80013b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013bc:	edd7 6a04 	vldr	s13, [r7, #16]
 80013c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80013c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80013cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	edc3 7a08 	vstr	s15, [r3, #32]
	pr->B1 = 2*kp*w0*w0-8*kp/Ts/Ts;
 80013da:	edd7 7a04 	vldr	s15, [r7, #16]
 80013de:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80013e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80013ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013f6:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80013fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80013fe:	edd7 7a00 	vldr	s15, [r7]
 8001402:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8001406:	edd7 6a00 	vldr	s13, [r7]
 800140a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800140e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pr->B2 = 4*kp/Ts/Ts-4*wc*(kp+kr)/Ts+kp*w0*w0;
 8001418:	edd7 7a04 	vldr	s15, [r7, #16]
 800141c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001420:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001424:	edd7 7a00 	vldr	s15, [r7]
 8001428:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800142c:	edd7 7a00 	vldr	s15, [r7]
 8001430:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001434:	edd7 7a07 	vldr	s15, [r7, #28]
 8001438:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800143c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001440:	ed97 6a04 	vldr	s12, [r7, #16]
 8001444:	edd7 7a03 	vldr	s15, [r7, #12]
 8001448:	ee76 7a27 	vadd.f32	s15, s12, s15
 800144c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001450:	edd7 6a00 	vldr	s13, [r7]
 8001454:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001458:	ee37 7a67 	vsub.f32	s14, s14, s15
 800145c:	edd7 6a04 	vldr	s13, [r7, #16]
 8001460:	edd7 7a06 	vldr	s15, [r7, #24]
 8001464:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001468:	edd7 7a06 	vldr	s15, [r7, #24]
 800146c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	//Initialize The Coefficient Of Input And Output
	pr->xn = 0.0;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	639a      	str	r2, [r3, #56]	@ 0x38
	pr->xn_1 = 0.0;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	63da      	str	r2, [r3, #60]	@ 0x3c
	pr->xn_2 = 0.0;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	641a      	str	r2, [r3, #64]	@ 0x40

	pr->yn = 0.0;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	62da      	str	r2, [r3, #44]	@ 0x2c
	pr->yn_1 = 0.0;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	631a      	str	r2, [r3, #48]	@ 0x30
	pr->yn_2 = 0.0;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80014aa:	bf00      	nop
 80014ac:	3724      	adds	r7, #36	@ 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40c90fdb 	.word	0x40c90fdb

080014bc <PR_calc>:

//Calculate The PR Controller
void PR_calc(PR *pr)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	pr->yn = (pr->xn * pr->B0 + pr->xn_1 * pr->B1 + pr->xn_2 * pr->B2 - pr->yn_1 * pr->A1 - pr->yn_2 * pr->A2)/pr->A0;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edd3 7a08 	vldr	s15, [r3, #32]
 80014d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80014e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80014f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	edd3 7a06 	vldr	s15, [r3, #24]
 8001508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800150c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	edd3 7a07 	vldr	s15, [r3, #28]
 800151c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001520:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	ed93 7a05 	vldr	s14, [r3, #20]
 800152a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	//Update
	pr->yn_2 = pr->yn_1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	635a      	str	r2, [r3, #52]	@ 0x34
	pr->yn_1 = pr->yn;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	631a      	str	r2, [r3, #48]	@ 0x30

	pr->xn_2 = pr->xn_1;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	641a      	str	r2, [r3, #64]	@ 0x40
	pr->xn_1 = pr->xn;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
 8001580:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001582:	4b46      	ldr	r3, [pc, #280]	@ (800169c <MX_ADC1_Init+0x13c>)
 8001584:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001588:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800158a:	4b44      	ldr	r3, [pc, #272]	@ (800169c <MX_ADC1_Init+0x13c>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001590:	4b42      	ldr	r3, [pc, #264]	@ (800169c <MX_ADC1_Init+0x13c>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001596:	4b41      	ldr	r3, [pc, #260]	@ (800169c <MX_ADC1_Init+0x13c>)
 8001598:	2201      	movs	r2, #1
 800159a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800159c:	4b3f      	ldr	r3, [pc, #252]	@ (800169c <MX_ADC1_Init+0x13c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015a2:	4b3e      	ldr	r3, [pc, #248]	@ (800169c <MX_ADC1_Init+0x13c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80015aa:	4b3c      	ldr	r3, [pc, #240]	@ (800169c <MX_ADC1_Init+0x13c>)
 80015ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80015b2:	4b3a      	ldr	r3, [pc, #232]	@ (800169c <MX_ADC1_Init+0x13c>)
 80015b4:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80015b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ba:	4b38      	ldr	r3, [pc, #224]	@ (800169c <MX_ADC1_Init+0x13c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80015c0:	4b36      	ldr	r3, [pc, #216]	@ (800169c <MX_ADC1_Init+0x13c>)
 80015c2:	2204      	movs	r2, #4
 80015c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015c6:	4b35      	ldr	r3, [pc, #212]	@ (800169c <MX_ADC1_Init+0x13c>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015ce:	4b33      	ldr	r3, [pc, #204]	@ (800169c <MX_ADC1_Init+0x13c>)
 80015d0:	2204      	movs	r2, #4
 80015d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015d4:	4b31      	ldr	r3, [pc, #196]	@ (800169c <MX_ADC1_Init+0x13c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015da:	4b30      	ldr	r3, [pc, #192]	@ (800169c <MX_ADC1_Init+0x13c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015e0:	482e      	ldr	r0, [pc, #184]	@ (800169c <MX_ADC1_Init+0x13c>)
 80015e2:	f002 fb45 	bl	8003c70 <HAL_ADC_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015ec:	f000 fda2 	bl	8002134 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80015f0:	2306      	movs	r3, #6
 80015f2:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 80015f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015f8:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	4619      	mov	r1, r3
 8001604:	4825      	ldr	r0, [pc, #148]	@ (800169c <MX_ADC1_Init+0x13c>)
 8001606:	f003 f95d 	bl	80048c4 <HAL_ADCEx_MultiModeConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001610:	f000 fd90 	bl	8002134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001614:	2301      	movs	r3, #1
 8001616:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001618:	2301      	movs	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4619      	mov	r1, r3
 8001630:	481a      	ldr	r0, [pc, #104]	@ (800169c <MX_ADC1_Init+0x13c>)
 8001632:	f002 fe89 	bl	8004348 <HAL_ADC_ConfigChannel>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800163c:	f000 fd7a 	bl	8002134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001640:	2302      	movs	r3, #2
 8001642:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001644:	2302      	movs	r3, #2
 8001646:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	4619      	mov	r1, r3
 800164c:	4813      	ldr	r0, [pc, #76]	@ (800169c <MX_ADC1_Init+0x13c>)
 800164e:	f002 fe7b 	bl	8004348 <HAL_ADC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001658:	f000 fd6c 	bl	8002134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800165c:	2303      	movs	r3, #3
 800165e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001660:	2303      	movs	r3, #3
 8001662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4619      	mov	r1, r3
 8001668:	480c      	ldr	r0, [pc, #48]	@ (800169c <MX_ADC1_Init+0x13c>)
 800166a:	f002 fe6d 	bl	8004348 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001674:	f000 fd5e 	bl	8002134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001678:	2304      	movs	r3, #4
 800167a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800167c:	2304      	movs	r3, #4
 800167e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	@ (800169c <MX_ADC1_Init+0x13c>)
 8001686:	f002 fe5f 	bl	8004348 <HAL_ADC_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001690:	f000 fd50 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	@ 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000174 	.word	0x20000174

080016a0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016a6:	463b      	mov	r3, r7
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
 80016b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80016b6:	4b39      	ldr	r3, [pc, #228]	@ (800179c <MX_ADC2_Init+0xfc>)
 80016b8:	4a39      	ldr	r2, [pc, #228]	@ (80017a0 <MX_ADC2_Init+0x100>)
 80016ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016bc:	4b37      	ldr	r3, [pc, #220]	@ (800179c <MX_ADC2_Init+0xfc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016c2:	4b36      	ldr	r3, [pc, #216]	@ (800179c <MX_ADC2_Init+0xfc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016c8:	4b34      	ldr	r3, [pc, #208]	@ (800179c <MX_ADC2_Init+0xfc>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80016ce:	4b33      	ldr	r3, [pc, #204]	@ (800179c <MX_ADC2_Init+0xfc>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016d4:	4b31      	ldr	r3, [pc, #196]	@ (800179c <MX_ADC2_Init+0xfc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016dc:	4b2f      	ldr	r3, [pc, #188]	@ (800179c <MX_ADC2_Init+0xfc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80016e2:	4b2e      	ldr	r3, [pc, #184]	@ (800179c <MX_ADC2_Init+0xfc>)
 80016e4:	2204      	movs	r2, #4
 80016e6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80016e8:	4b2c      	ldr	r3, [pc, #176]	@ (800179c <MX_ADC2_Init+0xfc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80016f0:	4b2a      	ldr	r3, [pc, #168]	@ (800179c <MX_ADC2_Init+0xfc>)
 80016f2:	2208      	movs	r2, #8
 80016f4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80016f6:	4b29      	ldr	r3, [pc, #164]	@ (800179c <MX_ADC2_Init+0xfc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016fc:	4b27      	ldr	r3, [pc, #156]	@ (800179c <MX_ADC2_Init+0xfc>)
 80016fe:	2200      	movs	r2, #0
 8001700:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001702:	4826      	ldr	r0, [pc, #152]	@ (800179c <MX_ADC2_Init+0xfc>)
 8001704:	f002 fab4 	bl	8003c70 <HAL_ADC_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 800170e:	f000 fd11 	bl	8002134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001712:	2301      	movs	r3, #1
 8001714:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001716:	2301      	movs	r3, #1
 8001718:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800172a:	463b      	mov	r3, r7
 800172c:	4619      	mov	r1, r3
 800172e:	481b      	ldr	r0, [pc, #108]	@ (800179c <MX_ADC2_Init+0xfc>)
 8001730:	f002 fe0a 	bl	8004348 <HAL_ADC_ConfigChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 800173a:	f000 fcfb 	bl	8002134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800173e:	2302      	movs	r3, #2
 8001740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001742:	2302      	movs	r3, #2
 8001744:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001746:	463b      	mov	r3, r7
 8001748:	4619      	mov	r1, r3
 800174a:	4814      	ldr	r0, [pc, #80]	@ (800179c <MX_ADC2_Init+0xfc>)
 800174c:	f002 fdfc 	bl	8004348 <HAL_ADC_ConfigChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001756:	f000 fced 	bl	8002134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800175a:	2303      	movs	r3, #3
 800175c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800175e:	2303      	movs	r3, #3
 8001760:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001762:	463b      	mov	r3, r7
 8001764:	4619      	mov	r1, r3
 8001766:	480d      	ldr	r0, [pc, #52]	@ (800179c <MX_ADC2_Init+0xfc>)
 8001768:	f002 fdee 	bl	8004348 <HAL_ADC_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8001772:	f000 fcdf 	bl	8002134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001776:	2312      	movs	r3, #18
 8001778:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800177a:	2304      	movs	r3, #4
 800177c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800177e:	463b      	mov	r3, r7
 8001780:	4619      	mov	r1, r3
 8001782:	4806      	ldr	r0, [pc, #24]	@ (800179c <MX_ADC2_Init+0xfc>)
 8001784:	f002 fde0 	bl	8004348 <HAL_ADC_ConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 800178e:	f000 fcd1 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200001c4 	.word	0x200001c4
 80017a0:	50000100 	.word	0x50000100

080017a4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	@ 0x30
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017c4:	d157      	bne.n	8001876 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017c6:	4b47      	ldr	r3, [pc, #284]	@ (80018e4 <HAL_ADC_MspInit+0x140>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	3301      	adds	r3, #1
 80017cc:	4a45      	ldr	r2, [pc, #276]	@ (80018e4 <HAL_ADC_MspInit+0x140>)
 80017ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017d0:	4b44      	ldr	r3, [pc, #272]	@ (80018e4 <HAL_ADC_MspInit+0x140>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d10b      	bne.n	80017f0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80017d8:	4b43      	ldr	r3, [pc, #268]	@ (80018e8 <HAL_ADC_MspInit+0x144>)
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	4a42      	ldr	r2, [pc, #264]	@ (80018e8 <HAL_ADC_MspInit+0x144>)
 80017de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	6153      	str	r3, [r2, #20]
 80017e4:	4b40      	ldr	r3, [pc, #256]	@ (80018e8 <HAL_ADC_MspInit+0x144>)
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f0:	4b3d      	ldr	r3, [pc, #244]	@ (80018e8 <HAL_ADC_MspInit+0x144>)
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	4a3c      	ldr	r2, [pc, #240]	@ (80018e8 <HAL_ADC_MspInit+0x144>)
 80017f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017fa:	6153      	str	r3, [r2, #20]
 80017fc:	4b3a      	ldr	r3, [pc, #232]	@ (80018e8 <HAL_ADC_MspInit+0x144>)
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CT1_Pin|CT2_Pin|Vpv_Pin|Ipv_Pin;
 8001808:	230f      	movs	r3, #15
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180c:	2303      	movs	r3, #3
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800181e:	f003 fcef 	bl	8005200 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001822:	4b32      	ldr	r3, [pc, #200]	@ (80018ec <HAL_ADC_MspInit+0x148>)
 8001824:	4a32      	ldr	r2, [pc, #200]	@ (80018f0 <HAL_ADC_MspInit+0x14c>)
 8001826:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001828:	4b30      	ldr	r3, [pc, #192]	@ (80018ec <HAL_ADC_MspInit+0x148>)
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800182e:	4b2f      	ldr	r3, [pc, #188]	@ (80018ec <HAL_ADC_MspInit+0x148>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001834:	4b2d      	ldr	r3, [pc, #180]	@ (80018ec <HAL_ADC_MspInit+0x148>)
 8001836:	2280      	movs	r2, #128	@ 0x80
 8001838:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800183a:	4b2c      	ldr	r3, [pc, #176]	@ (80018ec <HAL_ADC_MspInit+0x148>)
 800183c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001840:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001842:	4b2a      	ldr	r3, [pc, #168]	@ (80018ec <HAL_ADC_MspInit+0x148>)
 8001844:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001848:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800184a:	4b28      	ldr	r3, [pc, #160]	@ (80018ec <HAL_ADC_MspInit+0x148>)
 800184c:	2220      	movs	r2, #32
 800184e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001850:	4b26      	ldr	r3, [pc, #152]	@ (80018ec <HAL_ADC_MspInit+0x148>)
 8001852:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001856:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001858:	4824      	ldr	r0, [pc, #144]	@ (80018ec <HAL_ADC_MspInit+0x148>)
 800185a:	f003 fb3a 	bl	8004ed2 <HAL_DMA_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001864:	f000 fc66 	bl	8002134 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a20      	ldr	r2, [pc, #128]	@ (80018ec <HAL_ADC_MspInit+0x148>)
 800186c:	639a      	str	r2, [r3, #56]	@ 0x38
 800186e:	4a1f      	ldr	r2, [pc, #124]	@ (80018ec <HAL_ADC_MspInit+0x148>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001874:	e032      	b.n	80018dc <HAL_ADC_MspInit+0x138>
  else if(adcHandle->Instance==ADC2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a1e      	ldr	r2, [pc, #120]	@ (80018f4 <HAL_ADC_MspInit+0x150>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d12d      	bne.n	80018dc <HAL_ADC_MspInit+0x138>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001880:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <HAL_ADC_MspInit+0x140>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	4a17      	ldr	r2, [pc, #92]	@ (80018e4 <HAL_ADC_MspInit+0x140>)
 8001888:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <HAL_ADC_MspInit+0x140>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d10b      	bne.n	80018aa <HAL_ADC_MspInit+0x106>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <HAL_ADC_MspInit+0x144>)
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <HAL_ADC_MspInit+0x144>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800189c:	6153      	str	r3, [r2, #20]
 800189e:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_ADC_MspInit+0x144>)
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	4b0f      	ldr	r3, [pc, #60]	@ (80018e8 <HAL_ADC_MspInit+0x144>)
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	4a0e      	ldr	r2, [pc, #56]	@ (80018e8 <HAL_ADC_MspInit+0x144>)
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b4:	6153      	str	r3, [r2, #20]
 80018b6:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <HAL_ADC_MspInit+0x144>)
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Vinv_Pin|Vg_Pin|Ig_Pin;
 80018c2:	2370      	movs	r3, #112	@ 0x70
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c6:	2303      	movs	r3, #3
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d8:	f003 fc92 	bl	8005200 <HAL_GPIO_Init>
}
 80018dc:	bf00      	nop
 80018de:	3730      	adds	r7, #48	@ 0x30
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000258 	.word	0x20000258
 80018e8:	40021000 	.word	0x40021000
 80018ec:	20000214 	.word	0x20000214
 80018f0:	40020008 	.word	0x40020008
 80018f4:	50000100 	.word	0x50000100

080018f8 <HAL_ADC_ConvHalfCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_ADC_ConvHalfCpltCallback+0x14>
	{
		runTask();
 8001908:	f001 fe7a 	bl	8003600 <runTask>
	}
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000174 	.word	0x20000174

08001918 <systemCoefficientInit>:

//ADC检测值
uint32_t adcValueBuffer[4];

void systemCoefficientInit(systemCofficient *system)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	//系统参数
	system->Ti = 0.0001f;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a13      	ldr	r2, [pc, #76]	@ (8001970 <systemCoefficientInit+0x58>)
 8001924:	629a      	str	r2, [r3, #40]	@ 0x28
	system->pi = 3.14159265f;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a12      	ldr	r2, [pc, #72]	@ (8001974 <systemCoefficientInit+0x5c>)
 800192a:	625a      	str	r2, [r3, #36]	@ 0x24
	system->maxFrequence = 52;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <systemCoefficientInit+0x60>)
 8001930:	619a      	str	r2, [r3, #24]
	system->minFrequence = 47;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a11      	ldr	r2, [pc, #68]	@ (800197c <systemCoefficientInit+0x64>)
 8001936:	61da      	str	r2, [r3, #28]
	system->maxVoltagePV = 36;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a11      	ldr	r2, [pc, #68]	@ (8001980 <systemCoefficientInit+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
	system->minVoltagePV = 15;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a10      	ldr	r2, [pc, #64]	@ (8001984 <systemCoefficientInit+0x6c>)
 8001942:	605a      	str	r2, [r3, #4]
	system->maxVinvVoltage = 240;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a10      	ldr	r2, [pc, #64]	@ (8001988 <systemCoefficientInit+0x70>)
 8001948:	609a      	str	r2, [r3, #8]
	system->minVinvVoltage = 220;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a0f      	ldr	r2, [pc, #60]	@ (800198c <systemCoefficientInit+0x74>)
 800194e:	60da      	str	r2, [r3, #12]
	system->maxVoltageGrid = 240;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <systemCoefficientInit+0x70>)
 8001954:	611a      	str	r2, [r3, #16]
	system->minVoltageGrid = 190;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a0d      	ldr	r2, [pc, #52]	@ (8001990 <systemCoefficientInit+0x78>)
 800195a:	615a      	str	r2, [r3, #20]
	system->maxGridConnnectedCurrent = 0.707; //有效值，软件只保护有效值
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <systemCoefficientInit+0x7c>)
 8001960:	621a      	str	r2, [r3, #32]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	38d1b717 	.word	0x38d1b717
 8001974:	40490fdb 	.word	0x40490fdb
 8001978:	42500000 	.word	0x42500000
 800197c:	423c0000 	.word	0x423c0000
 8001980:	42100000 	.word	0x42100000
 8001984:	41700000 	.word	0x41700000
 8001988:	43700000 	.word	0x43700000
 800198c:	435c0000 	.word	0x435c0000
 8001990:	433e0000 	.word	0x433e0000
 8001994:	3f34fdf4 	.word	0x3f34fdf4

08001998 <controlStateInit>:

void controlStateInit(controlState *arg)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	arg->FSM_STATE = 0;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
	arg->START_MACHINE = 0;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	705a      	strb	r2, [r3, #1]
	arg->STOP_MACHINE = 0;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	709a      	strb	r2, [r3, #2]
	arg->VOLTAGE_MODE = 0;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	711a      	strb	r2, [r3, #4]
	arg->CURRENT_MODE = 0;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	715a      	strb	r2, [r3, #5]
	arg->GRID_CONNECTED_FLAG = 0;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	719a      	strb	r2, [r3, #6]
	arg->PLL_FLAG = 0;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	71da      	strb	r2, [r3, #7]
	arg->ERROR_FLAG = 0;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	721a      	strb	r2, [r3, #8]
	arg->CLEAR_FAULT = 0;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	70da      	strb	r2, [r3, #3]
	arg->REALY_STATE = 0;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	725a      	strb	r2, [r3, #9]
	arg->INIT_FLAG = 0;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	729a      	strb	r2, [r3, #10]
	arg->TIMER1 = 0;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	72da      	strb	r2, [r3, #11]
	arg->TIMER2 = 0;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	731a      	strb	r2, [r3, #12]
	arg->PWM_ENABLE = 0;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	735a      	strb	r2, [r3, #13]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <faultStateInit>:

void faultStateInit(faultState *arg)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	arg->PV_UNDER_VOLTAGE = 0;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
	arg->PV_OVER_VOLTAGE = 0;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	705a      	strb	r2, [r3, #1]
	arg->GRID_UNDER_VOLTAGE = 0;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	709a      	strb	r2, [r3, #2]
	arg->GRID_OVER_VOLTAGE = 0;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	70da      	strb	r2, [r3, #3]
	arg->GRID_UNDER_FREQ = 0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	711a      	strb	r2, [r3, #4]
	arg->GRID_OVER_FREQ = 0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	715a      	strb	r2, [r3, #5]
	arg->INV_OVER_CURRENT = 0;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	71da      	strb	r2, [r3, #7]
	arg->INV_OVER_VOLTAGE = 0;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	719a      	strb	r2, [r3, #6]
	arg->SAMPLE_ERROR = 0;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	721a      	strb	r2, [r3, #8]
	arg->REALY_ERROR = 0;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	725a      	strb	r2, [r3, #9]
	arg->PLL_ERROR = 0;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	729a      	strb	r2, [r3, #10]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <MX_DMA_Init+0x38>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	4a0b      	ldr	r2, [pc, #44]	@ (8001a90 <MX_DMA_Init+0x38>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6153      	str	r3, [r2, #20]
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <MX_DMA_Init+0x38>)
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	200b      	movs	r0, #11
 8001a7c:	f003 f9f3 	bl	8004e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a80:	200b      	movs	r0, #11
 8001a82:	f003 fa0c 	bl	8004e9e <HAL_NVIC_EnableIRQ>

}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000

08001a94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aaa:	4b38      	ldr	r3, [pc, #224]	@ (8001b8c <MX_GPIO_Init+0xf8>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	4a37      	ldr	r2, [pc, #220]	@ (8001b8c <MX_GPIO_Init+0xf8>)
 8001ab0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ab4:	6153      	str	r3, [r2, #20]
 8001ab6:	4b35      	ldr	r3, [pc, #212]	@ (8001b8c <MX_GPIO_Init+0xf8>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b32      	ldr	r3, [pc, #200]	@ (8001b8c <MX_GPIO_Init+0xf8>)
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	4a31      	ldr	r2, [pc, #196]	@ (8001b8c <MX_GPIO_Init+0xf8>)
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001acc:	6153      	str	r3, [r2, #20]
 8001ace:	4b2f      	ldr	r3, [pc, #188]	@ (8001b8c <MX_GPIO_Init+0xf8>)
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	4b2c      	ldr	r3, [pc, #176]	@ (8001b8c <MX_GPIO_Init+0xf8>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	4a2b      	ldr	r2, [pc, #172]	@ (8001b8c <MX_GPIO_Init+0xf8>)
 8001ae0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ae4:	6153      	str	r3, [r2, #20]
 8001ae6:	4b29      	ldr	r3, [pc, #164]	@ (8001b8c <MX_GPIO_Init+0xf8>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin|LEDG_Pin, GPIO_PIN_SET);
 8001af2:	2201      	movs	r2, #1
 8001af4:	2103      	movs	r1, #3
 8001af6:	4826      	ldr	r0, [pc, #152]	@ (8001b90 <MX_GPIO_Init+0xfc>)
 8001af8:	f003 fcf4 	bl	80054e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AC_Relay_Pin|reverseBridge_Pin|forwardBridge_Pin|SD_Pin
 8001afc:	2200      	movs	r2, #0
 8001afe:	f24c 41b8 	movw	r1, #50360	@ 0xc4b8
 8001b02:	4823      	ldr	r0, [pc, #140]	@ (8001b90 <MX_GPIO_Init+0xfc>)
 8001b04:	f003 fcee 	bl	80054e4 <HAL_GPIO_WritePin>
                          |SD2_Pin|SD1_Pin|test_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDG_Pin;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	481c      	ldr	r0, [pc, #112]	@ (8001b90 <MX_GPIO_Init+0xfc>)
 8001b20:	f003 fb6e 	bl	8005200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = AC_Relay_Pin|SD_Pin|SD2_Pin|SD1_Pin;
 8001b24:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8001b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4814      	ldr	r0, [pc, #80]	@ (8001b90 <MX_GPIO_Init+0xfc>)
 8001b3e:	f003 fb5f 	bl	8005200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = reverseBridge_Pin|forwardBridge_Pin;
 8001b42:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001b46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <MX_GPIO_Init+0xfc>)
 8001b5c:	f003 fb50 	bl	8005200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = test_Pin;
 8001b60:	2380      	movs	r3, #128	@ 0x80
 8001b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b64:	2301      	movs	r3, #1
 8001b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	4619      	mov	r1, r3
 8001b76:	4806      	ldr	r0, [pc, #24]	@ (8001b90 <MX_GPIO_Init+0xfc>)
 8001b78:	f003 fb42 	bl	8005200 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 8001b7c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001b80:	f004 fc74 	bl	800646c <HAL_I2CEx_EnableFastModePlus>

}
 8001b84:	bf00      	nop
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	48000400 	.word	0x48000400

08001b94 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b0a4      	sub	sp, #144	@ 0x90
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001b9a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001ba8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bac:	2254      	movs	r2, #84	@ 0x54
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f007 f83d 	bl	8008c30 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001bb6:	f107 0320 	add.w	r3, r7, #32
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f007 f831 	bl	8008c30 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8001bce:	4baa      	ldr	r3, [pc, #680]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001bd0:	4aaa      	ldr	r2, [pc, #680]	@ (8001e7c <MX_HRTIM1_Init+0x2e8>)
 8001bd2:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001bd4:	4ba8      	ldr	r3, [pc, #672]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001bda:	4ba7      	ldr	r3, [pc, #668]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001be0:	48a5      	ldr	r0, [pc, #660]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001be2:	f003 fcb1 	bl	8005548 <HAL_HRTIM_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_HRTIM1_Init+0x5c>
  {
    Error_Handler();
 8001bec:	f000 faa2 	bl	8002134 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_14) != HAL_OK)
 8001bf0:	210c      	movs	r1, #12
 8001bf2:	48a1      	ldr	r0, [pc, #644]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001bf4:	f003 fd74 	bl	80056e0 <HAL_HRTIM_DLLCalibrationStart>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_HRTIM1_Init+0x6e>
  {
    Error_Handler();
 8001bfe:	f000 fa99 	bl	8002134 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8001c02:	210a      	movs	r1, #10
 8001c04:	489c      	ldr	r0, [pc, #624]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001c06:	f003 fdc3 	bl	8005790 <HAL_HRTIM_PollForDLLCalibration>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_HRTIM1_Init+0x80>
  {
    Error_Handler();
 8001c10:	f000 fa90 	bl	8002134 <Error_Handler>
  }
  pTimeBaseCfg.Period = 46080;
 8001c14:	f44f 4334 	mov.w	r3, #46080	@ 0xb400
 8001c18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001c28:	2308      	movs	r3, #8
 8001c2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8001c2e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001c32:	461a      	mov	r2, r3
 8001c34:	2105      	movs	r1, #5
 8001c36:	4890      	ldr	r0, [pc, #576]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001c38:	f003 fdde 	bl	80057f8 <HAL_HRTIM_TimeBaseConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_HRTIM1_Init+0xb2>
  {
    Error_Handler();
 8001c42:	f000 fa77 	bl	8002134 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8001c52:	2300      	movs	r3, #0
 8001c54:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMASize = 0x1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001c62:	2300      	movs	r3, #0
 8001c64:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001c76:	2300      	movs	r3, #0
 8001c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8001c7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2105      	movs	r1, #5
 8001c82:	487d      	ldr	r0, [pc, #500]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001c84:	f003 fde0 	bl	8005848 <HAL_HRTIM_WaveformTimerConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_HRTIM1_Init+0xfe>
  {
    Error_Handler();
 8001c8e:	f000 fa51 	bl	8002134 <Error_Handler>
  }
  pCompareCfg.CompareValue = 23040;
 8001c92:	f44f 43b4 	mov.w	r3, #23040	@ 0x5a00
 8001c96:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001c98:	f107 0320 	add.w	r3, r7, #32
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	2105      	movs	r1, #5
 8001ca0:	4875      	ldr	r0, [pc, #468]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001ca2:	f003 fe43 	bl	800592c <HAL_HRTIM_WaveformCompareConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_HRTIM1_Init+0x11c>
  {
    Error_Handler();
 8001cac:	f000 fa42 	bl	8002134 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001cb0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	486f      	ldr	r0, [pc, #444]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001cba:	f003 fd9d 	bl	80057f8 <HAL_HRTIM_TimeBaseConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_HRTIM1_Init+0x134>
  {
    Error_Handler();
 8001cc4:	f000 fa36 	bl	8002134 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8001cd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001cd4:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 8001cd6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001cda:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001cec:	2300      	movs	r3, #0
 8001cee:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 8001cf4:	2310      	movs	r3, #16
 8001cf6:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001cfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d00:	461a      	mov	r2, r3
 8001d02:	2100      	movs	r1, #0
 8001d04:	485c      	ldr	r0, [pc, #368]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001d06:	f003 fd9f 	bl	8005848 <HAL_HRTIM_WaveformTimerConfig>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_HRTIM1_Init+0x180>
  {
    Error_Handler();
 8001d10:	f000 fa10 	bl	8002134 <Error_Handler>
  }
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_CMP1;
 8001d14:	2320      	movs	r3, #32
 8001d16:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8001d18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2101      	movs	r1, #1
 8001d20:	4855      	ldr	r0, [pc, #340]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001d22:	f003 fd91 	bl	8005848 <HAL_HRTIM_WaveformTimerConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_HRTIM1_Init+0x19c>
  {
    Error_Handler();
 8001d2c:	f000 fa02 	bl	8002134 <Error_Handler>
  }
  pCompareCfg.CompareValue = 100;
 8001d30:	2364      	movs	r3, #100	@ 0x64
 8001d32:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001d34:	f107 0320 	add.w	r3, r7, #32
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	484e      	ldr	r0, [pc, #312]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001d3e:	f003 fdf5 	bl	800592c <HAL_HRTIM_WaveformCompareConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_HRTIM1_Init+0x1b8>
  {
    Error_Handler();
 8001d48:	f000 f9f4 	bl	8002134 <Error_Handler>
  }
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001d54:	f107 0320 	add.w	r3, r7, #32
 8001d58:	2202      	movs	r2, #2
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4846      	ldr	r0, [pc, #280]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001d5e:	f003 fde5 	bl	800592c <HAL_HRTIM_WaveformCompareConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_HRTIM1_Init+0x1d8>
  {
    Error_Handler();
 8001d68:	f000 f9e4 	bl	8002134 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001d6c:	f107 0320 	add.w	r3, r7, #32
 8001d70:	2202      	movs	r2, #2
 8001d72:	2101      	movs	r1, #1
 8001d74:	4840      	ldr	r0, [pc, #256]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001d76:	f003 fdd9 	bl	800592c <HAL_HRTIM_WaveformCompareConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_HRTIM1_Init+0x1f0>
  {
    Error_Handler();
 8001d80:	f000 f9d8 	bl	8002134 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001d84:	f107 0320 	add.w	r3, r7, #32
 8001d88:	2204      	movs	r2, #4
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	483a      	ldr	r0, [pc, #232]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001d8e:	f003 fdcd 	bl	800592c <HAL_HRTIM_WaveformCompareConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_HRTIM1_Init+0x208>
  {
    Error_Handler();
 8001d98:	f000 f9cc 	bl	8002134 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8001da0:	2310      	movs	r3, #16
 8001da2:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP3;
 8001da4:	2320      	movs	r3, #32
 8001da6:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	482d      	ldr	r0, [pc, #180]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001dc4:	f003 ff20 	bl	8005c08 <HAL_HRTIM_WaveformOutputConfig>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_HRTIM1_Init+0x23e>
  {
    Error_Handler();
 8001dce:	f000 f9b1 	bl	8002134 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	4827      	ldr	r0, [pc, #156]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001dda:	f003 ff15 	bl	8005c08 <HAL_HRTIM_WaveformOutputConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_HRTIM1_Init+0x254>
  {
    Error_Handler();
 8001de4:	f000 f9a6 	bl	8002134 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERPER;
 8001de8:	2380      	movs	r3, #128	@ 0x80
 8001dea:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8001dec:	2308      	movs	r3, #8
 8001dee:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	2202      	movs	r2, #2
 8001df4:	2100      	movs	r1, #0
 8001df6:	4820      	ldr	r0, [pc, #128]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001df8:	f003 ff06 	bl	8005c08 <HAL_HRTIM_WaveformOutputConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_HRTIM1_Init+0x272>
  {
    Error_Handler();
 8001e02:	f000 f997 	bl	8002134 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERCMP1;
 8001e06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e0a:	607b      	str	r3, [r7, #4]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8001e0c:	463b      	mov	r3, r7
 8001e0e:	2208      	movs	r2, #8
 8001e10:	2101      	movs	r1, #1
 8001e12:	4819      	ldr	r0, [pc, #100]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001e14:	f003 fef8 	bl	8005c08 <HAL_HRTIM_WaveformOutputConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_HRTIM1_Init+0x28e>
  {
    Error_Handler();
 8001e1e:	f000 f989 	bl	8002134 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8001e22:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001e26:	461a      	mov	r2, r3
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4813      	ldr	r0, [pc, #76]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001e2c:	f003 fce4 	bl	80057f8 <HAL_HRTIM_TimeBaseConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_HRTIM1_Init+0x2a6>
  {
    Error_Handler();
 8001e36:	f000 f97d 	bl	8002134 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001e3a:	f107 0320 	add.w	r3, r7, #32
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2101      	movs	r1, #1
 8001e42:	480d      	ldr	r0, [pc, #52]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001e44:	f003 fd72 	bl	800592c <HAL_HRTIM_WaveformCompareConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_HRTIM1_Init+0x2be>
  {
    Error_Handler();
 8001e4e:	f000 f971 	bl	8002134 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001e52:	f107 0320 	add.w	r3, r7, #32
 8001e56:	2204      	movs	r2, #4
 8001e58:	2101      	movs	r1, #1
 8001e5a:	4807      	ldr	r0, [pc, #28]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001e5c:	f003 fd66 	bl	800592c <HAL_HRTIM_WaveformCompareConfig>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_HRTIM1_Init+0x2d6>
  {
    Error_Handler();
 8001e66:	f000 f965 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001e6a:	4803      	ldr	r0, [pc, #12]	@ (8001e78 <MX_HRTIM1_Init+0x2e4>)
 8001e6c:	f000 f828 	bl	8001ec0 <HAL_HRTIM_MspPostInit>

}
 8001e70:	bf00      	nop
 8001e72:	3790      	adds	r7, #144	@ 0x90
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200002b4 	.word	0x200002b4
 8001e7c:	40017400 	.word	0x40017400

08001e80 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb8 <HAL_HRTIM_MspInit+0x38>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10b      	bne.n	8001eaa <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <HAL_HRTIM_MspInit+0x3c>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	4a09      	ldr	r2, [pc, #36]	@ (8001ebc <HAL_HRTIM_MspInit+0x3c>)
 8001e98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e9c:	6193      	str	r3, [r2, #24]
 8001e9e:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <HAL_HRTIM_MspInit+0x3c>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40017400 	.word	0x40017400
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 030c 	add.w	r3, r7, #12
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a12      	ldr	r2, [pc, #72]	@ (8001f28 <HAL_HRTIM_MspPostInit+0x68>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d11d      	bne.n	8001f1e <HAL_HRTIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <HAL_HRTIM_MspPostInit+0x6c>)
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	4a11      	ldr	r2, [pc, #68]	@ (8001f2c <HAL_HRTIM_MspPostInit+0x6c>)
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eec:	6153      	str	r3, [r2, #20]
 8001eee:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <HAL_HRTIM_MspPostInit+0x6c>)
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = PWM1H_Pin|PWM1L_Pin|PWM2H_Pin|PWM2L_Pin;
 8001efa:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001efe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001f0c:	230d      	movs	r3, #13
 8001f0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f1a:	f003 f971 	bl	8005200 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001f1e:	bf00      	nop
 8001f20:	3720      	adds	r7, #32
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40017400 	.word	0x40017400
 8001f2c:	40021000 	.word	0x40021000

08001f30 <lowPassFilterInit>:
//Input[3]:采样时间（s）
void lowPassFilterInit(lowPassFilter *filter,
		lowPassFilterCofficient *filterCofficient,
		float bandWidth,
		float Ts)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f3e:	edc7 0a00 	vstr	s1, [r7]
	filter->x[0] = 0.0;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
	filter->x[1] = 0.0;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	605a      	str	r2, [r3, #4]
	filter->y[0] = 0.0;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
	filter->y[1] = 0.0;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]

	filter->fc = bandWidth;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	619a      	str	r2, [r3, #24]
	filter->tao = 1/(PI_2*filter->fc);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f6e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001fb8 <lowPassFilterInit+0x88>
 8001f72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	edc3 7a05 	vstr	s15, [r3, #20]
	filter->Tsample = Ts;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	611a      	str	r2, [r3, #16]

	filterCofficient->alpha = filter->Tsample / (filter->Tsample + filter->tao);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	edd3 6a04 	vldr	s13, [r3, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	edc3 7a00 	vstr	s15, [r3]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40c90fdb 	.word	0x40c90fdb

08001fbc <calcLowPassFilter>:

//计算低通滤波器
float calcLowPassFilter(lowPassFilter *filter,
		lowPassFilterCofficient *filterCofficient,
		float u)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	ed87 0a01 	vstr	s0, [r7, #4]
	filter->x[0] = u;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	601a      	str	r2, [r3, #0]
	filter->y[0] = filterCofficient->alpha * filter->x[0] + filter->y[1] * (1 - filterCofficient->alpha);
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	ed93 7a00 	vldr	s14, [r3]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	edd3 6a03 	vldr	s13, [r3, #12]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001ff0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	edc3 7a02 	vstr	s15, [r3, #8]

	filter->x[1] = filter->x[0];
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	605a      	str	r2, [r3, #4]
	filter->y[1] = filter->y[0];
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	60da      	str	r2, [r3, #12]

	return filter->y[0];
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	ee07 3a90 	vmov	s15, r3
}
 800201a:	eeb0 0a67 	vmov.f32	s0, s15
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800202c:	f001 fda6 	bl	8003b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002030:	f000 f81c 	bl	800206c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002034:	f7ff fd2e 	bl	8001a94 <MX_GPIO_Init>
  MX_DMA_Init();
 8002038:	f7ff fd0e 	bl	8001a58 <MX_DMA_Init>
  MX_ADC1_Init();
 800203c:	f7ff fa90 	bl	8001560 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002040:	f7ff fb2e 	bl	80016a0 <MX_ADC2_Init>
  MX_HRTIM1_Init();
 8002044:	f7ff fda6 	bl	8001b94 <MX_HRTIM1_Init>
  MX_TIM17_Init();
 8002048:	f001 fc20 	bl	800388c <MX_TIM17_Init>
  MX_TIM1_Init();
 800204c:	f001 fb7e 	bl	800374c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002050:	f001 fbce 	bl	80037f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  fsmInit(&stFsm, 0);
 8002054:	2100      	movs	r1, #0
 8002056:	4804      	ldr	r0, [pc, #16]	@ (8002068 <main+0x40>)
 8002058:	f001 f8e2 	bl	8003220 <fsmInit>
  runInit();
 800205c:	f000 ff4a 	bl	8002ef4 <runInit>
  while(1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  startFsm();
 8002060:	f001 f8f0 	bl	8003244 <startFsm>
 8002064:	e7fc      	b.n	8002060 <main+0x38>
 8002066:	bf00      	nop
 8002068:	20000518 	.word	0x20000518

0800206c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b096      	sub	sp, #88	@ 0x58
 8002070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002072:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002076:	2228      	movs	r2, #40	@ 0x28
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f006 fdd8 	bl	8008c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002080:	f107 031c 	add.w	r3, r7, #28
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002090:	463b      	mov	r3, r7
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	611a      	str	r2, [r3, #16]
 800209e:	615a      	str	r2, [r3, #20]
 80020a0:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020a2:	2301      	movs	r3, #1
 80020a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020b0:	2301      	movs	r3, #1
 80020b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020b4:	2302      	movs	r3, #2
 80020b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020bc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80020be:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80020c2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 f9ef 	bl	80064ac <HAL_RCC_OscConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80020d4:	f000 f82e 	bl	8002134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d8:	230f      	movs	r3, #15
 80020da:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020dc:	2302      	movs	r3, #2
 80020de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ea:	2300      	movs	r3, #0
 80020ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020ee:	f107 031c 	add.w	r3, r7, #28
 80020f2:	2102      	movs	r1, #2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f005 fa17 	bl	8007528 <HAL_RCC_ClockConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002100:	f000 f818 	bl	8002134 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_TIM1
 8002104:	f44f 43a1 	mov.w	r3, #20608	@ 0x5080
 8002108:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800210a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800210e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
 8002114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002118:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800211a:	463b      	mov	r3, r7
 800211c:	4618      	mov	r0, r3
 800211e:	f005 fbe9 	bl	80078f4 <HAL_RCCEx_PeriphCLKConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002128:	f000 f804 	bl	8002134 <Error_Handler>
  }
}
 800212c:	bf00      	nop
 800212e:	3758      	adds	r7, #88	@ 0x58
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002138:	b672      	cpsid	i
}
 800213a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <Error_Handler+0x8>

08002140 <mpptInit>:
#include <PID.h>

mpptVariables mpptMain;

void mpptInit(mpptVariables *arg)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
    arg->I_current = 0.0;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	615a      	str	r2, [r3, #20]
    arg->I_previous = 0.0;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
    arg->P_current = 0.0;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	605a      	str	r2, [r3, #4]
    arg->P_previous = 0.0;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
    arg->P_current = 0.0;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	605a      	str	r2, [r3, #4]
    arg->V_previous = 0.0;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
    arg->V_current = 0.0;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	60da      	str	r2, [r3, #12]
    arg->dI = 0.0;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	621a      	str	r2, [r3, #32]
    arg->dV = 0.0;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	61da      	str	r2, [r3, #28]
    arg->Verr = 0.0;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
    arg->step = 0.1;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a09      	ldr	r2, [pc, #36]	@ (80021c0 <mpptInit+0x80>)
 800219c:	625a      	str	r2, [r3, #36]	@ 0x24

    PID_init(0.0, 0.0, 0.0, 0.8, 0, &mpptPid);
 800219e:	4809      	ldr	r0, [pc, #36]	@ (80021c4 <mpptInit+0x84>)
 80021a0:	ed9f 2a09 	vldr	s4, [pc, #36]	@ 80021c8 <mpptInit+0x88>
 80021a4:	eddf 1a09 	vldr	s3, [pc, #36]	@ 80021cc <mpptInit+0x8c>
 80021a8:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 80021c8 <mpptInit+0x88>
 80021ac:	eddf 0a06 	vldr	s1, [pc, #24]	@ 80021c8 <mpptInit+0x88>
 80021b0:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 80021c8 <mpptInit+0x88>
 80021b4:	f7fe ffee 	bl	8001194 <PID_init>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	3dcccccd 	.word	0x3dcccccd
 80021c4:	20000114 	.word	0x20000114
 80021c8:	00000000 	.word	0x00000000
 80021cc:	3f4ccccd 	.word	0x3f4ccccd

080021d0 <mpptPno>:

//Perturbation and observation method
void mpptPno(mpptVariables *Pno, float Vpv, float Ipv)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80021dc:	edc7 0a01 	vstr	s1, [r7, #4]
	Pno->V_current = Vpv;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	60da      	str	r2, [r3, #12]
	Pno->I_current = Ipv;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	615a      	str	r2, [r3, #20]
    Pno->V_current += Pno->dV;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	edd3 7a07 	vldr	s15, [r3, #28]
 80021f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	edc3 7a03 	vstr	s15, [r3, #12]
    if (Pno->P_current<Pno->P_previous)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	ed93 7a01 	vldr	s14, [r3, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	edd3 7a02 	vldr	s15, [r3, #8]
 800220e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002216:	d522      	bpl.n	800225e <mpptPno+0x8e>
    {
        /* code */
        if (Pno->V_current>Pno->V_previous)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	ed93 7a03 	vldr	s14, [r3, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	edd3 7a04 	vldr	s15, [r3, #16]
 8002224:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222c:	dd0b      	ble.n	8002246 <mpptPno+0x76>
        {
            /* code */
            Pno->Vref -= Pno->dV;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	edd3 7a07 	vldr	s15, [r3, #28]
 800223a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 8002244:	e02d      	b.n	80022a2 <mpptPno+0xd2>
        }
        else
        {
            /* code */
            Pno->Vref += Pno->dV;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 800225c:	e021      	b.n	80022a2 <mpptPno+0xd2>
        }
    }
    else
    {
        /* code */
        if (Pno->V_current>Pno->V_previous)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	ed93 7a03 	vldr	s14, [r3, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	edd3 7a04 	vldr	s15, [r3, #16]
 800226a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002272:	dd0b      	ble.n	800228c <mpptPno+0xbc>
        {
            /* code */
            Pno->Vref += Pno->dV;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 800228a:	e00a      	b.n	80022a2 <mpptPno+0xd2>
        }
        else
        {
            /* code */
            Pno->Vref -= Pno->dV;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	edd3 7a07 	vldr	s15, [r3, #28]
 8002298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        }
    }
    if (Pno->Vref>=32.9)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f8f2 	bl	8000490 <__aeabi_f2d>
 80022ac:	a313      	add	r3, pc, #76	@ (adr r3, 80022fc <mpptPno+0x12c>)
 80022ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b2:	f7fe fbcb 	bl	8000a4c <__aeabi_dcmpge>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <mpptPno+0xf2>
    {
        /* code */
        Pno->Vref=32.9;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4a0e      	ldr	r2, [pc, #56]	@ (80022f8 <mpptPno+0x128>)
 80022c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    if (Pno->Vref<=0)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80022c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	d803      	bhi.n	80022da <mpptPno+0x10a>
    {
        /* code */
        Pno->Vref=0;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    Pno->P_previous = Pno->P_current;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	609a      	str	r2, [r3, #8]
    Pno->V_previous = Pno->V_current;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	611a      	str	r2, [r3, #16]
}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	f3af 8000 	nop.w
 80022f8:	4203999a 	.word	0x4203999a
 80022fc:	33333333 	.word	0x33333333
 8002300:	40407333 	.word	0x40407333

08002304 <adcValueInit>:
adcValue adcSampleValue;
rmsValue rmsCalcValue;
//testStruct testStructValue;

void adcValueInit(adcValue *adc)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	//ADC采样值
	adc->flybackI1.data = 0;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	651a      	str	r2, [r3, #80]	@ 0x50
	adc->flybackI2.data = 0;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	65da      	str	r2, [r3, #92]	@ 0x5c
	adc->vPV.data = 0;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	669a      	str	r2, [r3, #104]	@ 0x68
	adc->iPV.data = 0;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	675a      	str	r2, [r3, #116]	@ 0x74

	adc->fGrid.data = 50;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a0e      	ldr	r2, [pc, #56]	@ (8002368 <adcValueInit+0x64>)
 8002330:	615a      	str	r2, [r3, #20]
	adc->vInv.data = 0;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	62da      	str	r2, [r3, #44]	@ 0x2c
	adc->vGrid.data = 0;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	639a      	str	r2, [r3, #56]	@ 0x38
	adc->iGrid.data = 0;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	621a      	str	r2, [r3, #32]
	adc->Temperature.data = 0;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	645a      	str	r2, [r3, #68]	@ 0x44
	adc->vPll.data = 0;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	42480000 	.word	0x42480000

0800236c <rmsValueInit>:

//计算初始化函数
void rmsValueInit(rmsValue *arg)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	arg->rmsFlag = 1;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	831a      	strh	r2, [r3, #24]
	arg->vGridRMS.rms = 0;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	60da      	str	r2, [r3, #12]
	arg->vInvRMS.rms = 0;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	615a      	str	r2, [r3, #20]
	arg->iGridRMS.rms = 0;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	605a      	str	r2, [r3, #4]

	arg->vGridRMS.sum = 0;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
	arg->vInvRMS.sum = 0;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
	arg->iGridRMS.sum = 0;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <adcSampleGainInit>:

//初始化每个增益
void adcSampleGainInit(adcValue *arg)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	arg->vPV.gain = SAMPLE_COFFICIENT * VPV_COFFICIENT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002400 <adcSampleGainInit+0x48>)
 80023c4:	665a      	str	r2, [r3, #100]	@ 0x64
	arg->iPV.gain = SAMPLE_COFFICIENT * IPV_COFFICIENT;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002404 <adcSampleGainInit+0x4c>)
 80023ca:	671a      	str	r2, [r3, #112]	@ 0x70
	arg->flybackI1.gain = SAMPLE_COFFICIENT * CT1_COFFICIENT;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002408 <adcSampleGainInit+0x50>)
 80023d0:	64da      	str	r2, [r3, #76]	@ 0x4c
	arg->flybackI2.gain = SAMPLE_COFFICIENT * CT2_COFFICIENT;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002408 <adcSampleGainInit+0x50>)
 80023d6:	659a      	str	r2, [r3, #88]	@ 0x58
	arg->vInv.gain = SAMPLE_COFFICIENT * INV_COFFICIENT;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a0c      	ldr	r2, [pc, #48]	@ (800240c <adcSampleGainInit+0x54>)
 80023dc:	629a      	str	r2, [r3, #40]	@ 0x28
	arg->vGrid.gain = SAMPLE_COFFICIENT * VG_COFFICIENT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	@ (800240c <adcSampleGainInit+0x54>)
 80023e2:	635a      	str	r2, [r3, #52]	@ 0x34
	arg->iGrid.gain = SAMPLE_COFFICIENT * IG_COFFICIENT;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002410 <adcSampleGainInit+0x58>)
 80023e8:	61da      	str	r2, [r3, #28]
	arg->fGrid.gain = 1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023f0:	611a      	str	r2, [r3, #16]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	3c040000 	.word	0x3c040000
 8002404:	3acf0f0f 	.word	0x3acf0f0f
 8002408:	3b0ccccd 	.word	0x3b0ccccd
 800240c:	3e973652 	.word	0x3e973652
 8002410:	3a3f4c9c 	.word	0x3a3f4c9c
 8002414:	00000000 	.word	0x00000000

08002418 <adcReadConvert>:

//ADC读取转换函数，AD->raw
void adcReadConvert(adcValue *arg)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	//存放原始值
	//ADC1
	arg->flybackI1.raw = adcValueBuffer[0] & 0x0000FFFF;
 8002420:	4b83      	ldr	r3, [pc, #524]	@ (8002630 <adcReadConvert+0x218>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	b29a      	uxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	649a      	str	r2, [r3, #72]	@ 0x48
	arg->flybackI2.raw = adcValueBuffer[1] & 0x0000FFFF;
 800242a:	4b81      	ldr	r3, [pc, #516]	@ (8002630 <adcReadConvert+0x218>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	b29a      	uxth	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	655a      	str	r2, [r3, #84]	@ 0x54
	arg->vPV.raw = adcValueBuffer[2] & 0x0000FFFF;
 8002434:	4b7e      	ldr	r3, [pc, #504]	@ (8002630 <adcReadConvert+0x218>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	b29a      	uxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	661a      	str	r2, [r3, #96]	@ 0x60
	arg->iPV.raw = adcValueBuffer[3] & 0x0000FFFF;
 800243e:	4b7c      	ldr	r3, [pc, #496]	@ (8002630 <adcReadConvert+0x218>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	b29a      	uxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	66da      	str	r2, [r3, #108]	@ 0x6c
	//ADC2
	arg->vInv.raw = (adcValueBuffer[0] & 0xFFFF0000) >> 16;
 8002448:	4b79      	ldr	r3, [pc, #484]	@ (8002630 <adcReadConvert+0x218>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0c1a      	lsrs	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	625a      	str	r2, [r3, #36]	@ 0x24
	arg->vGrid.raw = (adcValueBuffer[1] & 0xFFFF0000) >> 16;
 8002452:	4b77      	ldr	r3, [pc, #476]	@ (8002630 <adcReadConvert+0x218>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	0c1a      	lsrs	r2, r3, #16
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	631a      	str	r2, [r3, #48]	@ 0x30
	arg->iGrid.raw = (adcValueBuffer[2] & 0xFFFF0000) >> 16;
 800245c:	4b74      	ldr	r3, [pc, #464]	@ (8002630 <adcReadConvert+0x218>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	0c1a      	lsrs	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	619a      	str	r2, [r3, #24]
	arg->Temperature.data = (((((adcValueBuffer[3] & 0xFFFF0000) >> 16) * 3.3)/4095 - V25)/AVGSLOPE + 25);
 8002466:	4b72      	ldr	r3, [pc, #456]	@ (8002630 <adcReadConvert+0x218>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	0c1b      	lsrs	r3, r3, #16
 800246c:	4618      	mov	r0, r3
 800246e:	f7fd ffed 	bl	800044c <__aeabi_ui2d>
 8002472:	a363      	add	r3, pc, #396	@ (adr r3, 8002600 <adcReadConvert+0x1e8>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fe f862 	bl	8000540 <__aeabi_dmul>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	a360      	add	r3, pc, #384	@ (adr r3, 8002608 <adcReadConvert+0x1f0>)
 8002486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248a:	f7fe f983 	bl	8000794 <__aeabi_ddiv>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4610      	mov	r0, r2
 8002494:	4619      	mov	r1, r3
 8002496:	a35e      	add	r3, pc, #376	@ (adr r3, 8002610 <adcReadConvert+0x1f8>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	f7fd fe98 	bl	80001d0 <__aeabi_dsub>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	a35b      	add	r3, pc, #364	@ (adr r3, 8002618 <adcReadConvert+0x200>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	f7fe f971 	bl	8000794 <__aeabi_ddiv>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	4b5d      	ldr	r3, [pc, #372]	@ (8002634 <adcReadConvert+0x21c>)
 80024c0:	f7fd fe88 	bl	80001d4 <__adddf3>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	f7fe fad2 	bl	8000a74 <__aeabi_d2f>
 80024d0:	4602      	mov	r2, r0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	645a      	str	r2, [r3, #68]	@ 0x44
//浮点数模式
#if 1
	//数据转换
	arg->flybackI1.data = arg->flybackI1.gain * arg->flybackI1.raw;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e0:	ee07 3a90 	vmov	s15, r3
 80024e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	arg->flybackI2.data = arg->flybackI2.gain * arg->flybackI2.raw;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
	arg->vPV.data = arg->vPV.gain * arg->vPV.raw;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002518:	ee07 3a90 	vmov	s15, r3
 800251c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
	arg->iPV.data = arg->iPV.gain * arg->iPV.raw;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002534:	ee07 3a90 	vmov	s15, r3
 8002538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800253c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
	arg->vInv.data = arg->vInv.gain * arg->vInv.raw - INV_OFFSET;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255c:	ee17 0a90 	vmov	r0, s15
 8002560:	f7fd ff96 	bl	8000490 <__aeabi_f2d>
 8002564:	a32e      	add	r3, pc, #184	@ (adr r3, 8002620 <adcReadConvert+0x208>)
 8002566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256a:	f7fd fe31 	bl	80001d0 <__aeabi_dsub>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4610      	mov	r0, r2
 8002574:	4619      	mov	r1, r3
 8002576:	f7fe fa7d 	bl	8000a74 <__aeabi_d2f>
 800257a:	4602      	mov	r2, r0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	62da      	str	r2, [r3, #44]	@ 0x2c
	arg->vGrid.data = arg->vGrid.gain * arg->vGrid.raw - VG_OFFSET;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002596:	ee17 0a90 	vmov	r0, s15
 800259a:	f7fd ff79 	bl	8000490 <__aeabi_f2d>
 800259e:	a320      	add	r3, pc, #128	@ (adr r3, 8002620 <adcReadConvert+0x208>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f7fd fe14 	bl	80001d0 <__aeabi_dsub>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f7fe fa60 	bl	8000a74 <__aeabi_d2f>
 80025b4:	4602      	mov	r2, r0
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	639a      	str	r2, [r3, #56]	@ 0x38
	arg->iGrid.data = arg->iGrid.gain * arg->iGrid.raw - IG_OFFSET;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	ed93 7a07 	vldr	s14, [r3, #28]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	ee07 3a90 	vmov	s15, r3
 80025c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d0:	ee17 0a90 	vmov	r0, s15
 80025d4:	f7fd ff5c 	bl	8000490 <__aeabi_f2d>
 80025d8:	a313      	add	r3, pc, #76	@ (adr r3, 8002628 <adcReadConvert+0x210>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f7fd fdf7 	bl	80001d0 <__aeabi_dsub>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	f7fe fa43 	bl	8000a74 <__aeabi_d2f>
 80025ee:	4602      	mov	r2, r0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	621a      	str	r2, [r3, #32]
#endif

#if 0
	calcLowPassFilter(&lowPass100Hz,&lowPass100HzCofficient,adcSampleValue.vGrid.data);
#endif
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	f3af 8000 	nop.w
 8002600:	66666666 	.word	0x66666666
 8002604:	400a6666 	.word	0x400a6666
 8002608:	00000000 	.word	0x00000000
 800260c:	40affe00 	.word	0x40affe00
 8002610:	ae147ae1 	.word	0xae147ae1
 8002614:	3ff6e147 	.word	0x3ff6e147
 8002618:	33333333 	.word	0x33333333
 800261c:	40113333 	.word	0x40113333
 8002620:	3126e979 	.word	0x3126e979
 8002624:	40829f08 	.word	0x40829f08
 8002628:	da122fad 	.word	0xda122fad
 800262c:	3ffcee72 	.word	0x3ffcee72
 8002630:	200002a4 	.word	0x200002a4
 8002634:	40390000 	.word	0x40390000

08002638 <calcRmsSum>:
#if 1
//有效值累加计算
void calcRmsSum(rmsValue *arg)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	arg->vGridRMS.sum += adcSampleValue.vGrid.data * adcSampleValue.vGrid.data;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	ed93 7a02 	vldr	s14, [r3, #8]
 8002646:	4b1c      	ldr	r3, [pc, #112]	@ (80026b8 <calcRmsSum+0x80>)
 8002648:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800264c:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <calcRmsSum+0x80>)
 800264e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	edc3 7a02 	vstr	s15, [r3, #8]
	arg->vInvRMS.sum += adcSampleValue.vInv.data * adcSampleValue.vInv.data;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	ed93 7a04 	vldr	s14, [r3, #16]
 8002666:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <calcRmsSum+0x80>)
 8002668:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800266c:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <calcRmsSum+0x80>)
 800266e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	edc3 7a04 	vstr	s15, [r3, #16]
	arg->iGridRMS.sum += adcSampleValue.iGrid.data * adcSampleValue.iGrid.data;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	ed93 7a00 	vldr	s14, [r3]
 8002686:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <calcRmsSum+0x80>)
 8002688:	edd3 6a08 	vldr	s13, [r3, #32]
 800268c:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <calcRmsSum+0x80>)
 800268e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	edc3 7a00 	vstr	s15, [r3]

	arg->rmsFlag++;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	8b1b      	ldrh	r3, [r3, #24]
 80026a4:	3301      	adds	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	831a      	strh	r2, [r3, #24]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	200003fc 	.word	0x200003fc

080026bc <calcRms>:
//当累加一个周期后调用此函数计算有效值
void calcRms(rmsValue *arg)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	arm_sqrt_f32(arg->vGridRMS.sum / arg->rmsFlag, &arg->vGridRMS.rms);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8b1b      	ldrh	r3, [r3, #24]
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	330c      	adds	r3, #12
 80026de:	edc7 7a03 	vstr	s15, [r7, #12]
 80026e2:	60bb      	str	r3, [r7, #8]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80026e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80026e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f0:	db09      	blt.n	8002706 <calcRms+0x4a>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 80026f2:	ed97 0a03 	vldr	s0, [r7, #12]
 80026f6:	f006 facd 	bl	8008c94 <sqrtf>
 80026fa:	eef0 7a40 	vmov.f32	s15, s0
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8002704:	e004      	b.n	8002710 <calcRms+0x54>
    }
    else
    {
      *pOut = 0.0f;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800270e:	bf00      	nop
	arm_sqrt_f32(arg->vInvRMS.sum / arg->rmsFlag, &arg->vInvRMS.rms);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	edd3 6a04 	vldr	s13, [r3, #16]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	8b1b      	ldrh	r3, [r3, #24]
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3314      	adds	r3, #20
 800272a:	edc7 7a05 	vstr	s15, [r7, #20]
 800272e:	613b      	str	r3, [r7, #16]
    if (in >= 0.0f)
 8002730:	edd7 7a05 	vldr	s15, [r7, #20]
 8002734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	db09      	blt.n	8002752 <calcRms+0x96>
      *pOut = __builtin_sqrtf(in);
 800273e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002742:	f006 faa7 	bl	8008c94 <sqrtf>
 8002746:	eef0 7a40 	vmov.f32	s15, s0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8002750:	e004      	b.n	800275c <calcRms+0xa0>
      *pOut = 0.0f;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800275a:	bf00      	nop
	arm_sqrt_f32(arg->iGridRMS.sum / arg->rmsFlag, &arg->iGridRMS.rms);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	edd3 6a00 	vldr	s13, [r3]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	8b1b      	ldrh	r3, [r3, #24]
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800276e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3304      	adds	r3, #4
 8002776:	edc7 7a07 	vstr	s15, [r7, #28]
 800277a:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 800277c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002780:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002788:	db09      	blt.n	800279e <calcRms+0xe2>
      *pOut = __builtin_sqrtf(in);
 800278a:	ed97 0a07 	vldr	s0, [r7, #28]
 800278e:	f006 fa81 	bl	8008c94 <sqrtf>
 8002792:	eef0 7a40 	vmov.f32	s15, s0
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800279c:	e004      	b.n	80027a8 <calcRms+0xec>
      *pOut = 0.0f;
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80027a6:	bf00      	nop
	if(control.FSM_STATE == initState || control.FSM_STATE == checkSelf)
 80027a8:	4b14      	ldr	r3, [pc, #80]	@ (80027fc <calcRms+0x140>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <calcRms+0xfc>
 80027b0:	4b12      	ldr	r3, [pc, #72]	@ (80027fc <calcRms+0x140>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d10d      	bne.n	80027d4 <calcRms+0x118>
	{
		arg->vGridRMS.rms = calcLowPassFilter(&lowPass1Hz, &lowPass1HzCofficient, arg->vGridRMS.rms);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80027be:	eeb0 0a67 	vmov.f32	s0, s15
 80027c2:	490f      	ldr	r1, [pc, #60]	@ (8002800 <calcRms+0x144>)
 80027c4:	480f      	ldr	r0, [pc, #60]	@ (8002804 <calcRms+0x148>)
 80027c6:	f7ff fbf9 	bl	8001fbc <calcLowPassFilter>
 80027ca:	eef0 7a40 	vmov.f32	s15, s0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	arg->rmsFlag = 0;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	831a      	strh	r2, [r3, #24]
	arg->vGridRMS.sum = 0;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
	arg->vInvRMS.sum = 0;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
	arg->iGridRMS.sum = 0;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
}
 80027f2:	bf00      	nop
 80027f4:	3720      	adds	r7, #32
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000288 	.word	0x20000288
 8002800:	200003cc 	.word	0x200003cc
 8002804:	200003ac 	.word	0x200003ac

08002808 <sogiPll_init>:
#include <config.h>
sogiPll	gridPll;

//SOGI-PLL And sogiPid Initialization
void sogiPll_init(sogiPll *pll)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	pll->u[0] = 0.0;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
	pll->u[1] = 0.0;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	605a      	str	r2, [r3, #4]
	pll->u[2] = 0.0;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	609a      	str	r2, [r3, #8]

	//__disable_irq();
	pll->alpha[0] = 0.0;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	60da      	str	r2, [r3, #12]
	pll->alpha[1] = 0.0;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
	pll->alpha[2] = 0.0;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	615a      	str	r2, [r3, #20]

	pll->beta[0] = 0.0;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
	pll->beta[1] = 0.0;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	61da      	str	r2, [r3, #28]
	pll->beta[2] = 0.0;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	621a      	str	r2, [r3, #32]

	pll->u_D[0] = 0.0;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	625a      	str	r2, [r3, #36]	@ 0x24
	pll->u_D[1] = 0.0;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	629a      	str	r2, [r3, #40]	@ 0x28

	pll->u_Q[0] = 0.0;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	62da      	str	r2, [r3, #44]	@ 0x2c
	pll->u_Q[1] = 0.0;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	@ 0x30

	pll->fo = 0.0;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	63da      	str	r2, [r3, #60]	@ 0x3c

	pll->sine = 0.0;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	64da      	str	r2, [r3, #76]	@ 0x4c
	pll->cosine = 0.0;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	649a      	str	r2, [r3, #72]	@ 0x48

	pll->theta = 0.0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	645a      	str	r2, [r3, #68]	@ 0x44
	//锁相频率fn = 50 Hz
	pll->fn = 0.0;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	641a      	str	r2, [r3, #64]	@ 0x40
	pll->sogi_n = 0.0;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	651a      	str	r2, [r3, #80]	@ 0x50

	pll->Ti = 1.0/10000;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a04      	ldr	r2, [pc, #16]	@ (80028bc <sogiPll_init+0xb4>)
 80028ac:	655a      	str	r2, [r3, #84]	@ 0x54
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	38d1b717 	.word	0x38d1b717

080028c0 <sogiConfig>:
void sogiConfig(sogiPll *pll,
                         float32_t acFreq,
                         float32_t isrFrequency,
                         float32_t lpf_b0,
                         float32_t lpf_b1)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6178      	str	r0, [r7, #20]
 80028c8:	ed87 0a04 	vstr	s0, [r7, #16]
 80028cc:	edc7 0a03 	vstr	s1, [r7, #12]
 80028d0:	ed87 1a02 	vstr	s2, [r7, #8]
 80028d4:	edc7 1a01 	vstr	s3, [r7, #4]
    pll->fn=acFreq;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	641a      	str	r2, [r3, #64]	@ 0x40
    pll->Ti=((1.0f)/isrFrequency);
 80028de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80028e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

    sogiPllOsgCofficientCalc(pll);
 80028f0:	6978      	ldr	r0, [r7, #20]
 80028f2:	f000 f80d 	bl	8002910 <sogiPllOsgCofficientCalc>

    pll->LpfCofficient.b0=lpf_b0;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    pll->LpfCofficient.b1=lpf_b1;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <sogiPllOsgCofficientCalc>:
//! \brief Calculates the SPLL_1PH_SOGI coefficient
//! \param *pll The SPLL_1PH_SOGI structure
//! \return None
//!
void sogiPllOsgCofficientCalc(sogiPll *pll)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
    float32_t osgx,osgy,temp, wn;
    wn= pll->fn *(float32_t) 2.0f * (float32_t) 3.14159265f;               //锁相频率
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800291e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002922:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8002a38 <sogiPllOsgCofficientCalc+0x128>
 8002926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800292a:	edc7 7a05 	vstr	s15, [r7, #20]
    pll->osgCofficient.osg_k=(float32_t)(0.5);                                 //系数K
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002934:	659a      	str	r2, [r3, #88]	@ 0x58
    osgx = (float32_t)(2.0f*0.5f*wn*pll->Ti);                         //
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800293c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002944:	edc7 7a04 	vstr	s15, [r7, #16]
    pll->osgCofficient.osg_x=(float32_t)(osgx);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	65da      	str	r2, [r3, #92]	@ 0x5c
    osgy = (float32_t)(wn*pll->Ti*wn*pll->Ti);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8002954:	edd7 7a05 	vldr	s15, [r7, #20]
 8002958:	ee27 7a27 	vmul.f32	s14, s14, s15
 800295c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002960:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800296a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296e:	edc7 7a03 	vstr	s15, [r7, #12]
    pll->osgCofficient.osg_y=(float32_t)(osgy);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	661a      	str	r2, [r3, #96]	@ 0x60
    temp = (float32_t)1.0/(osgx+osgy+4.0f);
 8002978:	ed97 7a04 	vldr	s14, [r7, #16]
 800297c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002984:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800298c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002994:	edc7 7a02 	vstr	s15, [r7, #8]
    pll->osgCofficient.osg_b0=((float32_t)osgx*temp);
 8002998:	ed97 7a04 	vldr	s14, [r7, #16]
 800299c:	edd7 7a02 	vldr	s15, [r7, #8]
 80029a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
    pll->osgCofficient.osg_b2=((float32_t)(-1.0f)*pll->osgCofficient.osg_b0);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80029b0:	eef1 7a67 	vneg.f32	s15, s15
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
    pll->osgCofficient.osg_a1=((float32_t)(2.0*(4.0f-osgy))*temp);
 80029ba:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80029be:	edd7 7a03 	vldr	s15, [r7, #12]
 80029c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80029ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
    pll->osgCofficient.osg_a2=((float32_t)(osgx-osgy-4)*temp);
 80029d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80029dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80029e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80029e8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80029f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
    pll->osgCofficient.osg_qb0=((float32_t)(0.5f*osgy)*temp);
 80029fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80029fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a06:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
    pll->osgCofficient.osg_qb1=(pll->osgCofficient.osg_qb0*(float32_t)(2.0));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8002a1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
    pll->osgCofficient.osg_qb2=pll->osgCofficient.osg_qb0;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002a2c:	bf00      	nop
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40490fdb 	.word	0x40490fdb

08002a3c <sogiPllLoop_calc>:

void sogiPllLoop_calc(float vin, sogiPll *pll)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a46:	6038      	str	r0, [r7, #0]
    // Update the pll->u[0] with the grid value
    pll->u[0]=vin;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	601a      	str	r2, [r3, #0]

    //
    // Orthogonal Signal Generator
    //
    pll->alpha[0]=(pll->osgCofficient.osg_b0*
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
                       (pll->u[0]-pll->u[2])) +
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	edd3 6a00 	vldr	s13, [r3]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a60:	ee76 7ae7 	vsub.f32	s15, s13, s15
    pll->alpha[0]=(pll->osgCofficient.osg_b0*
 8002a64:	ee27 7a27 	vmul.f32	s14, s14, s15
                       (pll->osgCofficient.osg_a1*pll->alpha[1]) +
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	edd3 6a1b 	vldr	s13, [r3, #108]	@ 0x6c
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a74:	ee66 7aa7 	vmul.f32	s15, s13, s15
                       (pll->u[0]-pll->u[2])) +
 8002a78:	ee37 7a27 	vadd.f32	s14, s14, s15
                       (pll->osgCofficient.osg_a2*pll->alpha[2]);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	edd3 6a1c 	vldr	s13, [r3, #112]	@ 0x70
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
                       (pll->osgCofficient.osg_a1*pll->alpha[1]) +
 8002a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
    pll->alpha[0]=(pll->osgCofficient.osg_b0*
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	edc3 7a03 	vstr	s15, [r3, #12]

    pll->alpha[2]=pll->alpha[1];
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	615a      	str	r2, [r3, #20]
    pll->alpha[1]=pll->alpha[0];
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	611a      	str	r2, [r3, #16]

    pll->beta[0]=(pll->osgCofficient.osg_qb0*pll->u[0]) +
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
                        (pll->osgCofficient.osg_qb1*pll->u[1]) +
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	edd3 6a1e 	vldr	s13, [r3, #120]	@ 0x78
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pll->beta[0]=(pll->osgCofficient.osg_qb0*pll->u[0]) +
 8002ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
                        (pll->osgCofficient.osg_qb2*pll->u[2]) +
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	edd3 6a1f 	vldr	s13, [r3, #124]	@ 0x7c
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
                        (pll->osgCofficient.osg_qb1*pll->u[1]) +
 8002ada:	ee37 7a27 	vadd.f32	s14, s14, s15
                        (pll->osgCofficient.osg_a1*pll->beta[1]) +
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	edd3 6a1b 	vldr	s13, [r3, #108]	@ 0x6c
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	edd3 7a07 	vldr	s15, [r3, #28]
 8002aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
                        (pll->osgCofficient.osg_qb2*pll->u[2]) +
 8002aee:	ee37 7a27 	vadd.f32	s14, s14, s15
                        (pll->osgCofficient.osg_a2*pll->beta[2]);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	edd3 6a1c 	vldr	s13, [r3, #112]	@ 0x70
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	edd3 7a08 	vldr	s15, [r3, #32]
 8002afe:	ee66 7aa7 	vmul.f32	s15, s13, s15
                        (pll->osgCofficient.osg_a1*pll->beta[1]) +
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
    pll->beta[0]=(pll->osgCofficient.osg_qb0*pll->u[0]) +
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	edc3 7a06 	vstr	s15, [r3, #24]

    pll->beta[2]=pll->beta[1];
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	621a      	str	r2, [r3, #32]
    pll->beta[1]=pll->beta[0];
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	699a      	ldr	r2, [r3, #24]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	61da      	str	r2, [r3, #28]

    pll->u[2]=pll->u[1];
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	609a      	str	r2, [r3, #8]
    pll->u[1]=pll->u[0];
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	605a      	str	r2, [r3, #4]

	//Calculate Park Transfer
//	arm_sin_cos_f32(pll->theta,&pll->sine,&pll->cosine);
	pll->u_D[0] = pll->alpha[0] * pll->cosine + pll->beta[0] * pll->sine;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002b38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	edd3 6a06 	vldr	s13, [r3, #24]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pll->u_Q[0] = pll->beta[0] * pll->cosine - pll->alpha[0] * pll->sine;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	edd3 6a03 	vldr	s13, [r3, #12]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002b72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    //
    // Loop Filter
    //
    pll->ylf[0]=pll->ylf[1] +
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
                     (pll->LpfCofficient.b0*pll->u_Q[0]) +
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	edd3 6a21 	vldr	s13, [r3, #132]	@ 0x84
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pll->ylf[0]=pll->ylf[1] +
 8002b96:	ee37 7a27 	vadd.f32	s14, s14, s15
                     (pll->LpfCofficient.b1*pll->u_Q[1]);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	edd3 6a20 	vldr	s13, [r3, #128]	@ 0x80
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
                     (pll->LpfCofficient.b0*pll->u_Q[0]) +
 8002baa:	ee77 7a27 	vadd.f32	s15, s14, s15
    pll->ylf[0]=pll->ylf[1] +
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    pll->ylf[1]=pll->ylf[0];
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	639a      	str	r2, [r3, #56]	@ 0x38

    pll->u_Q[1]=pll->u_Q[0];
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30

    //
    // VCO
    //
    pll->fo=pll->fn+pll->ylf[0];
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	//PD
    pll->theta=pll->theta + (pll->fo*pll->Ti)*
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf0:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8002c64 <sogiPllLoop_calc+0x228>
 8002bf4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
                       (float32_t)(2.0*3.1415926f);

    if(pll->theta>(float32_t)(2.0*3.1415926f))
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002c08:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002c64 <sogiPllLoop_calc+0x228>
 8002c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	dd09      	ble.n	8002c2a <sogiPllLoop_calc+0x1ee>
    {
        pll->theta=pll->theta - (float32_t)(2.0*3.1415926f);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002c1c:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002c64 <sogiPllLoop_calc+0x228>
 8002c20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
        //pll->theta=0;
    }

    pll->sine=(float32_t)sinf(pll->theta);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002c30:	eeb0 0a67 	vmov.f32	s0, s15
 8002c34:	f006 f890 	bl	8008d58 <sinf>
 8002c38:	eef0 7a40 	vmov.f32	s15, s0
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
    pll->cosine=(float32_t)cosf(pll->theta);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002c48:	eeb0 0a67 	vmov.f32	s0, s15
 8002c4c:	f006 f840 	bl	8008cd0 <cosf>
 8002c50:	eef0 7a40 	vmov.f32	s15, s0
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40c90fda 	.word	0x40c90fda

08002c68 <startPWM>:
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
	control.PWM_ENABLE = 1;
 8002c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca4 <startPWM+0x3c>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	735a      	strb	r2, [r3, #13]
	HAL_HRTIM_WaveformCountStart(&hhrtim1, HRTIM_TIMERID_MASTER);
 8002c72:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002c76:	480c      	ldr	r0, [pc, #48]	@ (8002ca8 <startPWM+0x40>)
 8002c78:	f003 f851 	bl	8005d1e <HAL_HRTIM_WaveformCountStart>
	HAL_HRTIM_WaveformCountStart(&hhrtim1, HRTIM_TIMERID_TIMER_A);
 8002c7c:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8002c80:	4809      	ldr	r0, [pc, #36]	@ (8002ca8 <startPWM+0x40>)
 8002c82:	f003 f84c 	bl	8005d1e <HAL_HRTIM_WaveformCountStart>
	HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1 + HRTIM_OUTPUT_TA2);
 8002c86:	2103      	movs	r1, #3
 8002c88:	4807      	ldr	r0, [pc, #28]	@ (8002ca8 <startPWM+0x40>)
 8002c8a:	f002 ffee 	bl	8005c6a <HAL_HRTIM_WaveformOutputStart>
	HAL_HRTIM_WaveformCountStart(&hhrtim1, HRTIM_TIMERID_TIMER_B);
 8002c8e:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8002c92:	4805      	ldr	r0, [pc, #20]	@ (8002ca8 <startPWM+0x40>)
 8002c94:	f003 f843 	bl	8005d1e <HAL_HRTIM_WaveformCountStart>
	HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TB1 + HRTIM_OUTPUT_TB2);
 8002c98:	210c      	movs	r1, #12
 8002c9a:	4803      	ldr	r0, [pc, #12]	@ (8002ca8 <startPWM+0x40>)
 8002c9c:	f002 ffe5 	bl	8005c6a <HAL_HRTIM_WaveformOutputStart>
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000288 	.word	0x20000288
 8002ca8:	200002b4 	.word	0x200002b4

08002cac <stopPWM>:
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
	control.PWM_ENABLE = 0;
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce8 <stopPWM+0x3c>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	735a      	strb	r2, [r3, #13]
	HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA1 + HRTIM_OUTPUT_TA2);
 8002cb6:	2103      	movs	r1, #3
 8002cb8:	480c      	ldr	r0, [pc, #48]	@ (8002cec <stopPWM+0x40>)
 8002cba:	f003 f803 	bl	8005cc4 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCountStop(&hhrtim1, HRTIM_TIMERID_TIMER_A);
 8002cbe:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8002cc2:	480a      	ldr	r0, [pc, #40]	@ (8002cec <stopPWM+0x40>)
 8002cc4:	f003 f856 	bl	8005d74 <HAL_HRTIM_WaveformCountStop>
	HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TB1 + HRTIM_OUTPUT_TB2);
 8002cc8:	210c      	movs	r1, #12
 8002cca:	4808      	ldr	r0, [pc, #32]	@ (8002cec <stopPWM+0x40>)
 8002ccc:	f002 fffa 	bl	8005cc4 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCountStop(&hhrtim1, HRTIM_TIMERID_TIMER_B);
 8002cd0:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8002cd4:	4805      	ldr	r0, [pc, #20]	@ (8002cec <stopPWM+0x40>)
 8002cd6:	f003 f84d 	bl	8005d74 <HAL_HRTIM_WaveformCountStop>
	HAL_HRTIM_WaveformCountStop(&hhrtim1, HRTIM_TIMERID_MASTER);
 8002cda:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002cde:	4803      	ldr	r0, [pc, #12]	@ (8002cec <stopPWM+0x40>)
 8002ce0:	f003 f848 	bl	8005d74 <HAL_HRTIM_WaveformCountStop>
}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000288 	.word	0x20000288
 8002cec:	200002b4 	.word	0x200002b4

08002cf0 <startAllInterrupt>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8002cf4:	b662      	cpsie	i
}
 8002cf6:	bf00      	nop
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <stopAllInterrupt>:
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d06:	b672      	cpsid	i
}
 8002d08:	bf00      	nop
}
 8002d0a:	bf00      	nop
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <stopTim1Interrupt>:
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim1);
 8002d18:	4803      	ldr	r0, [pc, #12]	@ (8002d28 <stopTim1Interrupt+0x14>)
 8002d1a:	f004 ffcd 	bl	8007cb8 <HAL_TIM_Base_Stop>
	control.TIMER1 = 0;
 8002d1e:	4b03      	ldr	r3, [pc, #12]	@ (8002d2c <stopTim1Interrupt+0x18>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	72da      	strb	r2, [r3, #11]
}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000524 	.word	0x20000524
 8002d2c:	20000288 	.word	0x20000288

08002d30 <stopTim2Interrupt>:
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim2);
 8002d34:	4803      	ldr	r0, [pc, #12]	@ (8002d44 <stopTim2Interrupt+0x14>)
 8002d36:	f004 ffbf 	bl	8007cb8 <HAL_TIM_Base_Stop>
	control.TIMER2 = 0;
 8002d3a:	4b03      	ldr	r3, [pc, #12]	@ (8002d48 <stopTim2Interrupt+0x18>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	731a      	strb	r2, [r3, #12]
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000570 	.word	0x20000570
 8002d48:	20000288 	.word	0x20000288

08002d4c <startTim1Interrupt>:
//开启TIM1
static inline void startTim1Interrupt()
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
	stopTim2Interrupt();
 8002d50:	f7ff ffee 	bl	8002d30 <stopTim2Interrupt>
	if(HAL_TIM_Base_Start(&htim1) != HAL_OK)
 8002d54:	4808      	ldr	r0, [pc, #32]	@ (8002d78 <startTim1Interrupt+0x2c>)
 8002d56:	f004 ff5b 	bl	8007c10 <HAL_TIM_Base_Start>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <startTim1Interrupt+0x1c>
	{
		//开启定时器失败
		control.TIMER1 = 2;
 8002d60:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <startTim1Interrupt+0x30>)
 8002d62:	2202      	movs	r2, #2
 8002d64:	72da      	strb	r2, [r3, #11]
 8002d66:	e002      	b.n	8002d6e <startTim1Interrupt+0x22>
	}
	else
	{
		//开启定时器成功
		control.TIMER1 = 1;
 8002d68:	4b04      	ldr	r3, [pc, #16]	@ (8002d7c <startTim1Interrupt+0x30>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	72da      	strb	r2, [r3, #11]
	}
	control.TIMER2 = 0;
 8002d6e:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <startTim1Interrupt+0x30>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	731a      	strb	r2, [r3, #12]
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000524 	.word	0x20000524
 8002d7c:	20000288 	.word	0x20000288

08002d80 <startTim2Interrupt>:

//开启TIM2
static inline void startTim2Interrupt()
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
	stopTim1Interrupt();
 8002d84:	f7ff ffc6 	bl	8002d14 <stopTim1Interrupt>
	if(HAL_TIM_Base_Start(&htim2) != HAL_OK)
 8002d88:	4808      	ldr	r0, [pc, #32]	@ (8002dac <startTim2Interrupt+0x2c>)
 8002d8a:	f004 ff41 	bl	8007c10 <HAL_TIM_Base_Start>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <startTim2Interrupt+0x1c>
	{
		//开启定时器失败
		control.TIMER2 = 2;
 8002d94:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <startTim2Interrupt+0x30>)
 8002d96:	2202      	movs	r2, #2
 8002d98:	731a      	strb	r2, [r3, #12]
 8002d9a:	e002      	b.n	8002da2 <startTim2Interrupt+0x22>
	}
	else
	{
		//开启定时器成功
		control.TIMER2 = 1;
 8002d9c:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <startTim2Interrupt+0x30>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	731a      	strb	r2, [r3, #12]
	}
	control.TIMER1 = 0;
 8002da2:	4b03      	ldr	r3, [pc, #12]	@ (8002db0 <startTim2Interrupt+0x30>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	72da      	strb	r2, [r3, #11]
}
 8002da8:	bf00      	nop
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000570 	.word	0x20000570
 8002db0:	20000288 	.word	0x20000288

08002db4 <changeADCTrigToTim1>:

//更改ADC触发源为TIM1
static inline void changeADCTrigToTim1()
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8002db8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <changeADCTrigToTim1+0x38>)
 8002dba:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8002dbe:	629a      	str	r2, [r3, #40]	@ 0x28
	externTrig(hadc1.Instance,ADC_EXTERNALTRIGCONV_T1_TRGO);
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dec <changeADCTrigToTim1+0x38>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <changeADCTrigToTim1+0x38>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 7270 	bic.w	r2, r2, #960	@ 0x3c0
 8002dce:	60da      	str	r2, [r3, #12]
 8002dd0:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <changeADCTrigToTim1+0x38>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <changeADCTrigToTim1+0x38>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 7210 	orr.w	r2, r2, #576	@ 0x240
 8002dde:	60da      	str	r2, [r3, #12]

}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000174 	.word	0x20000174

08002df0 <changeADCTrigToTim2>:
//更改ADC触发源为TIM2
static inline void changeADCTrigToTim2()
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002df4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e28 <changeADCTrigToTim2+0x38>)
 8002df6:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 8002dfa:	629a      	str	r2, [r3, #40]	@ 0x28
	externTrig(hadc1.Instance,ADC_EXTERNALTRIGCONV_T2_TRGO);
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <changeADCTrigToTim2+0x38>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <changeADCTrigToTim2+0x38>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 7270 	bic.w	r2, r2, #960	@ 0x3c0
 8002e0a:	60da      	str	r2, [r3, #12]
 8002e0c:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <changeADCTrigToTim2+0x38>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	4b05      	ldr	r3, [pc, #20]	@ (8002e28 <changeADCTrigToTim2+0x38>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7230 	orr.w	r2, r2, #704	@ 0x2c0
 8002e1a:	60da      	str	r2, [r3, #12]
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000174 	.word	0x20000174

08002e2c <openRelay>:
//打开继电器
static inline void openRelay()
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, AC_Relay_Pin, GPIO_PIN_SET);
 8002e30:	2201      	movs	r2, #1
 8002e32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e36:	4804      	ldr	r0, [pc, #16]	@ (8002e48 <openRelay+0x1c>)
 8002e38:	f002 fb54 	bl	80054e4 <HAL_GPIO_WritePin>
	control.REALY_STATE = 1;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	@ (8002e4c <openRelay+0x20>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	725a      	strb	r2, [r3, #9]
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	48000400 	.word	0x48000400
 8002e4c:	20000288 	.word	0x20000288

08002e50 <closeRelay>:
//关闭继电器
static inline void closeRelay()
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, AC_Relay_Pin, GPIO_PIN_RESET);
 8002e54:	2200      	movs	r2, #0
 8002e56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e5a:	4804      	ldr	r0, [pc, #16]	@ (8002e6c <closeRelay+0x1c>)
 8002e5c:	f002 fb42 	bl	80054e4 <HAL_GPIO_WritePin>
	control.REALY_STATE = 0;
 8002e60:	4b03      	ldr	r3, [pc, #12]	@ (8002e70 <closeRelay+0x20>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	725a      	strb	r2, [r3, #9]
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	48000400 	.word	0x48000400
 8002e70:	20000288 	.word	0x20000288

08002e74 <openRed>:
//亮红灯
static inline void openRed()
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LEDR_Pin, RESET);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	4804      	ldr	r0, [pc, #16]	@ (8002e90 <openRed+0x1c>)
 8002e7e:	f002 fb31 	bl	80054e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LEDG_Pin, SET);
 8002e82:	2201      	movs	r2, #1
 8002e84:	2102      	movs	r1, #2
 8002e86:	4802      	ldr	r0, [pc, #8]	@ (8002e90 <openRed+0x1c>)
 8002e88:	f002 fb2c 	bl	80054e4 <HAL_GPIO_WritePin>
}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	48000400 	.word	0x48000400

08002e94 <openGreen>:
//亮绿灯
static inline void openGreen()
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LEDR_Pin, SET);
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	4804      	ldr	r0, [pc, #16]	@ (8002eb0 <openGreen+0x1c>)
 8002e9e:	f002 fb21 	bl	80054e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LEDG_Pin, RESET);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	4802      	ldr	r0, [pc, #8]	@ (8002eb0 <openGreen+0x1c>)
 8002ea8:	f002 fb1c 	bl	80054e4 <HAL_GPIO_WritePin>
}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	48000400 	.word	0x48000400

08002eb4 <changeTaskTim2ToInit>:
extern taskObject checkTaskObject;
extern taskObject taskListTim2[2];
extern taskObject taskListTim1[2];

static inline void changeTaskTim2ToInit()
{
 8002eb4:	b490      	push	{r4, r7}
 8002eb6:	af00      	add	r7, sp, #0
	taskListTim2[0] = runInitTaskObject;
 8002eb8:	4a04      	ldr	r2, [pc, #16]	@ (8002ecc <changeTaskTim2ToInit+0x18>)
 8002eba:	4b05      	ldr	r3, [pc, #20]	@ (8002ed0 <changeTaskTim2ToInit+0x1c>)
 8002ebc:	4614      	mov	r4, r2
 8002ebe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc90      	pop	{r4, r7}
 8002eca:	4770      	bx	lr
 8002ecc:	20000024 	.word	0x20000024
 8002ed0:	20000004 	.word	0x20000004

08002ed4 <changeTaskTim2ToCheck>:

static inline void changeTaskTim2ToCheck()
{
 8002ed4:	b490      	push	{r4, r7}
 8002ed6:	af00      	add	r7, sp, #0
	taskListTim2[0] = checkTaskObject;
 8002ed8:	4a04      	ldr	r2, [pc, #16]	@ (8002eec <changeTaskTim2ToCheck+0x18>)
 8002eda:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <changeTaskTim2ToCheck+0x1c>)
 8002edc:	4614      	mov	r4, r2
 8002ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc90      	pop	{r4, r7}
 8002eea:	4770      	bx	lr
 8002eec:	20000024 	.word	0x20000024
 8002ef0:	20000014 	.word	0x20000014

08002ef4 <runInit>:
enum State fsmState;
fsmT stFsm;

//初始化状态
void runInit()
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
	/*如果还已经初始化，则运行*/
	if(control.INIT_FLAG == 1)
 8002ef8:	4b44      	ldr	r3, [pc, #272]	@ (800300c <runInit+0x118>)
 8002efa:	7a9b      	ldrb	r3, [r3, #10]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d10f      	bne.n	8002f20 <runInit+0x2c>
	{
		adcReadConvert(&adcSampleValue);
 8002f00:	4843      	ldr	r0, [pc, #268]	@ (8003010 <runInit+0x11c>)
 8002f02:	f7ff fa89 	bl	8002418 <adcReadConvert>

		/*累加RMS*/
		calcRmsSum(&rmsCalcValue);
 8002f06:	4843      	ldr	r0, [pc, #268]	@ (8003014 <runInit+0x120>)
 8002f08:	f7ff fb96 	bl	8002638 <calcRmsSum>
		//初始化过程中执行RMS计算
		if(rmsCalcValue.rmsFlag == 20)
 8002f0c:	4b41      	ldr	r3, [pc, #260]	@ (8003014 <runInit+0x120>)
 8002f0e:	8b1b      	ldrh	r3, [r3, #24]
 8002f10:	2b14      	cmp	r3, #20
 8002f12:	d105      	bne.n	8002f20 <runInit+0x2c>
		{
			calcRms(&rmsCalcValue);
 8002f14:	483f      	ldr	r0, [pc, #252]	@ (8003014 <runInit+0x120>)
 8002f16:	f7ff fbd1 	bl	80026bc <calcRms>
			rmsCalcValue.rmsFlag = 1;
 8002f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003014 <runInit+0x120>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	831a      	strh	r2, [r3, #24]
		}
	}
	/*如果还未进行初始化，则运行*/
	if(control.INIT_FLAG == 0)
 8002f20:	4b3a      	ldr	r3, [pc, #232]	@ (800300c <runInit+0x118>)
 8002f22:	7a9b      	ldrb	r3, [r3, #10]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d165      	bne.n	8002ff4 <runInit+0x100>
	{
	//校准并打开ADC
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); //校准
 8002f28:	2100      	movs	r1, #0
 8002f2a:	483b      	ldr	r0, [pc, #236]	@ (8003018 <runInit+0x124>)
 8002f2c:	f001 f8e8 	bl	8004100 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED); //校准
 8002f30:	2100      	movs	r1, #0
 8002f32:	483a      	ldr	r0, [pc, #232]	@ (800301c <runInit+0x128>)
 8002f34:	f001 f8e4 	bl	8004100 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc2);
 8002f38:	4838      	ldr	r0, [pc, #224]	@ (800301c <runInit+0x128>)
 8002f3a:	f001 f82b 	bl	8003f94 <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, adcValueBuffer, 4);
 8002f3e:	2204      	movs	r2, #4
 8002f40:	4937      	ldr	r1, [pc, #220]	@ (8003020 <runInit+0x12c>)
 8002f42:	4835      	ldr	r0, [pc, #212]	@ (8003018 <runInit+0x124>)
 8002f44:	f001 f94e 	bl	80041e4 <HAL_ADCEx_MultiModeStart_DMA>
	//打开捕获定时器
	HAL_TIM_IC_Start_IT(&htim17, TIM_CHANNEL_1);
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4836      	ldr	r0, [pc, #216]	@ (8003024 <runInit+0x130>)
 8002f4c:	f004 ff3c 	bl	8007dc8 <HAL_TIM_IC_Start_IT>


	//初始化配置
	adcValueInit(&adcSampleValue);
 8002f50:	482f      	ldr	r0, [pc, #188]	@ (8003010 <runInit+0x11c>)
 8002f52:	f7ff f9d7 	bl	8002304 <adcValueInit>
	adcSampleGainInit(&adcSampleValue);
 8002f56:	482e      	ldr	r0, [pc, #184]	@ (8003010 <runInit+0x11c>)
 8002f58:	f7ff fa2e 	bl	80023b8 <adcSampleGainInit>
	rmsValueInit(&rmsCalcValue);
 8002f5c:	482d      	ldr	r0, [pc, #180]	@ (8003014 <runInit+0x120>)
 8002f5e:	f7ff fa05 	bl	800236c <rmsValueInit>
	systemCoefficientInit(&systemValue);
 8002f62:	4831      	ldr	r0, [pc, #196]	@ (8003028 <runInit+0x134>)
 8002f64:	f7fe fcd8 	bl	8001918 <systemCoefficientInit>
	mpptInit(&mpptMain);
 8002f68:	4830      	ldr	r0, [pc, #192]	@ (800302c <runInit+0x138>)
 8002f6a:	f7ff f8e9 	bl	8002140 <mpptInit>
	movingRmsInit(&iGridMovingRms, MOVINGRMS_MAX_L);
	movingRmsInit(&vInvMovingRms, MOVINGRMS_MAX_L);
#endif

	//初始化锁相环参数
	sogiPll_init(&gridPll);
 8002f6e:	4830      	ldr	r0, [pc, #192]	@ (8003030 <runInit+0x13c>)
 8002f70:	f7ff fc4a 	bl	8002808 <sogiPll_init>
	sogiConfig(&gridPll,
 8002f74:	eddf 1a2f 	vldr	s3, [pc, #188]	@ 8003034 <runInit+0x140>
 8002f78:	ed9f 1a2f 	vldr	s2, [pc, #188]	@ 8003038 <runInit+0x144>
 8002f7c:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 800303c <runInit+0x148>
 8002f80:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8003040 <runInit+0x14c>
 8002f84:	482a      	ldr	r0, [pc, #168]	@ (8003030 <runInit+0x13c>)
 8002f86:	f7ff fc9b 	bl	80028c0 <sogiConfig>
	                     50,
	                     10000,
	                     (float32_t) 166.9743385,
	                     (float32_t) -166.2661165);
	sogiPllOsgCofficientCalc(&gridPll);
 8002f8a:	4829      	ldr	r0, [pc, #164]	@ (8003030 <runInit+0x13c>)
 8002f8c:	f7ff fcc0 	bl	8002910 <sogiPllOsgCofficientCalc>
	//初始化1Hz滤波器
	lowPassFilterInit(&lowPass1Hz, &lowPass1HzCofficient, 0.5, 0.001);
 8002f90:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8003044 <runInit+0x150>
 8002f94:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8002f98:	492b      	ldr	r1, [pc, #172]	@ (8003048 <runInit+0x154>)
 8002f9a:	482c      	ldr	r0, [pc, #176]	@ (800304c <runInit+0x158>)
 8002f9c:	f7fe ffc8 	bl	8001f30 <lowPassFilterInit>
	//初始化100Hz滤波器
	lowPassFilterInit(&lowPass100Hz, &lowPass100HzCofficient, 100.0, systemValue.Ti);
 8002fa0:	4b21      	ldr	r3, [pc, #132]	@ (8003028 <runInit+0x134>)
 8002fa2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002fa6:	eef0 0a67 	vmov.f32	s1, s15
 8002faa:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8003050 <runInit+0x15c>
 8002fae:	4929      	ldr	r1, [pc, #164]	@ (8003054 <runInit+0x160>)
 8002fb0:	4829      	ldr	r0, [pc, #164]	@ (8003058 <runInit+0x164>)
 8002fb2:	f7fe ffbd 	bl	8001f30 <lowPassFilterInit>
	//初始化DCL
	DCL_init(&mainDCL, 0.1, 20, 100.0, 0.1, 1/systemValue.Ti);
 8002fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003028 <runInit+0x134>)
 8002fb8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002fbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fc4:	eeb0 2a47 	vmov.f32	s4, s14
 8002fc8:	eddf 1a24 	vldr	s3, [pc, #144]	@ 800305c <runInit+0x168>
 8002fcc:	ed9f 1a20 	vldr	s2, [pc, #128]	@ 8003050 <runInit+0x15c>
 8002fd0:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8002fd4:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 800305c <runInit+0x168>
 8002fd8:	4821      	ldr	r0, [pc, #132]	@ (8003060 <runInit+0x16c>)
 8002fda:	f7fd fe75 	bl	8000cc8 <DCL_init>
	//初始化CSL
	//CSL_init(1.5, 5, 0, 0.005, -0.005);

	//初始化状态
	faultStateInit(&fault);
 8002fde:	4821      	ldr	r0, [pc, #132]	@ (8003064 <runInit+0x170>)
 8002fe0:	f7fe fd0e 	bl	8001a00 <faultStateInit>
	controlStateInit(&control);
 8002fe4:	4809      	ldr	r0, [pc, #36]	@ (800300c <runInit+0x118>)
 8002fe6:	f7fe fcd7 	bl	8001998 <controlStateInit>
#if 0
	openRelay();
#endif

	openGreen();
 8002fea:	f7ff ff53 	bl	8002e94 <openGreen>
	//初始化完成
	control.INIT_FLAG = 1;
 8002fee:	4b07      	ldr	r3, [pc, #28]	@ (800300c <runInit+0x118>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	729a      	strb	r2, [r3, #10]
	}

	//初始化完毕，等待启机指令
	if(control.START_MACHINE == 1)
 8002ff4:	4b05      	ldr	r3, [pc, #20]	@ (800300c <runInit+0x118>)
 8002ff6:	785b      	ldrb	r3, [r3, #1]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d105      	bne.n	8003008 <runInit+0x114>
	{
		stFsm.stNextState = checkSelf;
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8003068 <runInit+0x174>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	705a      	strb	r2, [r3, #1]
		rmsCalcValue.rmsFlag = 1;
 8003002:	4b04      	ldr	r3, [pc, #16]	@ (8003014 <runInit+0x120>)
 8003004:	2201      	movs	r2, #1
 8003006:	831a      	strh	r2, [r3, #24]
	}
}
 8003008:	bf00      	nop
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000288 	.word	0x20000288
 8003010:	200003fc 	.word	0x200003fc
 8003014:	20000474 	.word	0x20000474
 8003018:	20000174 	.word	0x20000174
 800301c:	200001c4 	.word	0x200001c4
 8003020:	200002a4 	.word	0x200002a4
 8003024:	200005bc 	.word	0x200005bc
 8003028:	2000025c 	.word	0x2000025c
 800302c:	200003d0 	.word	0x200003d0
 8003030:	20000490 	.word	0x20000490
 8003034:	c3264420 	.word	0xc3264420
 8003038:	4326f96e 	.word	0x4326f96e
 800303c:	461c4000 	.word	0x461c4000
 8003040:	42480000 	.word	0x42480000
 8003044:	3a83126f 	.word	0x3a83126f
 8003048:	200003cc 	.word	0x200003cc
 800304c:	200003ac 	.word	0x200003ac
 8003050:	42c80000 	.word	0x42c80000
 8003054:	200003c8 	.word	0x200003c8
 8003058:	20000390 	.word	0x20000390
 800305c:	3dcccccd 	.word	0x3dcccccd
 8003060:	200000d8 	.word	0x200000d8
 8003064:	20000298 	.word	0x20000298
 8003068:	20000518 	.word	0x20000518

0800306c <checkSelfState>:

//上电自检函数
void checkSelfState()
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
	adcReadConvert(&adcSampleValue);
 8003070:	484a      	ldr	r0, [pc, #296]	@ (800319c <checkSelfState+0x130>)
 8003072:	f7ff f9d1 	bl	8002418 <adcReadConvert>
	openRelay();
 8003076:	f7ff fed9 	bl	8002e2c <openRelay>
//继电器自检，检测吸合继电器后，逆变电压值与电网电压值的差值
#if 1
	/*累加RMS*/
	calcRmsSum(&rmsCalcValue);
 800307a:	4849      	ldr	r0, [pc, #292]	@ (80031a0 <checkSelfState+0x134>)
 800307c:	f7ff fadc 	bl	8002638 <calcRmsSum>
	//初始化过程中执行RMS计算
	if(rmsCalcValue.rmsFlag == 1000)
 8003080:	4b47      	ldr	r3, [pc, #284]	@ (80031a0 <checkSelfState+0x134>)
 8003082:	8b1b      	ldrh	r3, [r3, #24]
 8003084:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003088:	f040 8086 	bne.w	8003198 <checkSelfState+0x12c>
	{
		calcRms(&rmsCalcValue);
 800308c:	4844      	ldr	r0, [pc, #272]	@ (80031a0 <checkSelfState+0x134>)
 800308e:	f7ff fb15 	bl	80026bc <calcRms>
		rmsCalcValue.rmsFlag = 1;
 8003092:	4b43      	ldr	r3, [pc, #268]	@ (80031a0 <checkSelfState+0x134>)
 8003094:	2201      	movs	r2, #1
 8003096:	831a      	strh	r2, [r3, #24]
	}
	else
	{
		return;
	}
	if(abs(adcSampleValue.vInv.raw - adcSampleValue.vGrid.raw) > 100)
 8003098:	4b40      	ldr	r3, [pc, #256]	@ (800319c <checkSelfState+0x130>)
 800309a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800309c:	4b3f      	ldr	r3, [pc, #252]	@ (800319c <checkSelfState+0x130>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bfb8      	it	lt
 80030a6:	425b      	neglt	r3, r3
 80030a8:	2b64      	cmp	r3, #100	@ 0x64
 80030aa:	dd05      	ble.n	80030b8 <checkSelfState+0x4c>
	{
		//继电器故障
		fault.REALY_ERROR = 1;
 80030ac:	4b3d      	ldr	r3, [pc, #244]	@ (80031a4 <checkSelfState+0x138>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	725a      	strb	r2, [r3, #9]
		control.ERROR_FLAG = 1;
 80030b2:	4b3d      	ldr	r3, [pc, #244]	@ (80031a8 <checkSelfState+0x13c>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	721a      	strb	r2, [r3, #8]
	}
	closeRelay();
 80030b8:	f7ff feca 	bl	8002e50 <closeRelay>
	//检查电网电压
	//检测电网电压是否在允许最大值与最小值。
//中国标准
//拟定，Vgrid=190~240，具体查看标准32004
#if 1
	if(rmsCalcValue.vGridRMS.rms > systemValue.maxVoltageGrid)
 80030bc:	4b38      	ldr	r3, [pc, #224]	@ (80031a0 <checkSelfState+0x134>)
 80030be:	ed93 7a03 	vldr	s14, [r3, #12]
 80030c2:	4b3a      	ldr	r3, [pc, #232]	@ (80031ac <checkSelfState+0x140>)
 80030c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80030c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d0:	dd05      	ble.n	80030de <checkSelfState+0x72>
	{
		fault.GRID_OVER_VOLTAGE = 1;
 80030d2:	4b34      	ldr	r3, [pc, #208]	@ (80031a4 <checkSelfState+0x138>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	70da      	strb	r2, [r3, #3]
		control.ERROR_FLAG = 1;
 80030d8:	4b33      	ldr	r3, [pc, #204]	@ (80031a8 <checkSelfState+0x13c>)
 80030da:	2201      	movs	r2, #1
 80030dc:	721a      	strb	r2, [r3, #8]
		//printf("电网过压");
	}
	if(rmsCalcValue.vGridRMS.rms < systemValue.minVoltageGrid)
 80030de:	4b30      	ldr	r3, [pc, #192]	@ (80031a0 <checkSelfState+0x134>)
 80030e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80030e4:	4b31      	ldr	r3, [pc, #196]	@ (80031ac <checkSelfState+0x140>)
 80030e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80030ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f2:	d505      	bpl.n	8003100 <checkSelfState+0x94>
	{
		fault.GRID_UNDER_VOLTAGE = 1;
 80030f4:	4b2b      	ldr	r3, [pc, #172]	@ (80031a4 <checkSelfState+0x138>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	709a      	strb	r2, [r3, #2]
		control.ERROR_FLAG = 1;
 80030fa:	4b2b      	ldr	r3, [pc, #172]	@ (80031a8 <checkSelfState+0x13c>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	721a      	strb	r2, [r3, #8]
//外国标准，暂定
#if 0
#endif
//反激电流自检
#if 1
	if((adcSampleValue.flybackI1.data<1) && (adcSampleValue.flybackI2.data<1))
 8003100:	4b26      	ldr	r3, [pc, #152]	@ (800319c <checkSelfState+0x130>)
 8003102:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8003106:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800310a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003112:	d50d      	bpl.n	8003130 <checkSelfState+0xc4>
 8003114:	4b21      	ldr	r3, [pc, #132]	@ (800319c <checkSelfState+0x130>)
 8003116:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800311a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800311e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003126:	d503      	bpl.n	8003130 <checkSelfState+0xc4>
	{
		fault.SAMPLE_ERROR = 0;
 8003128:	4b1e      	ldr	r3, [pc, #120]	@ (80031a4 <checkSelfState+0x138>)
 800312a:	2200      	movs	r2, #0
 800312c:	721a      	strb	r2, [r3, #8]
 800312e:	e005      	b.n	800313c <checkSelfState+0xd0>
	}
	else
	{
		fault.SAMPLE_ERROR = 1;
 8003130:	4b1c      	ldr	r3, [pc, #112]	@ (80031a4 <checkSelfState+0x138>)
 8003132:	2201      	movs	r2, #1
 8003134:	721a      	strb	r2, [r3, #8]
		//printf("反激电流采样异常");
		control.ERROR_FLAG = 1;
 8003136:	4b1c      	ldr	r3, [pc, #112]	@ (80031a8 <checkSelfState+0x13c>)
 8003138:	2201      	movs	r2, #1
 800313a:	721a      	strb	r2, [r3, #8]
	}
#endif
//PV电压自检
#if 1
	//检查PV电压
	if(adcSampleValue.vPV.data < systemValue.minVoltagePV)
 800313c:	4b17      	ldr	r3, [pc, #92]	@ (800319c <checkSelfState+0x130>)
 800313e:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8003142:	4b1a      	ldr	r3, [pc, #104]	@ (80031ac <checkSelfState+0x140>)
 8003144:	edd3 7a01 	vldr	s15, [r3, #4]
 8003148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800314c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003150:	d505      	bpl.n	800315e <checkSelfState+0xf2>
	{
		//欠压
		fault.PV_UNDER_VOLTAGE = 1;
 8003152:	4b14      	ldr	r3, [pc, #80]	@ (80031a4 <checkSelfState+0x138>)
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
		//printf("PV欠压");
		control.ERROR_FLAG = 1;
 8003158:	4b13      	ldr	r3, [pc, #76]	@ (80031a8 <checkSelfState+0x13c>)
 800315a:	2201      	movs	r2, #1
 800315c:	721a      	strb	r2, [r3, #8]
	}
	if(adcSampleValue.vPV.data > systemValue.maxVoltagePV)
 800315e:	4b0f      	ldr	r3, [pc, #60]	@ (800319c <checkSelfState+0x130>)
 8003160:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8003164:	4b11      	ldr	r3, [pc, #68]	@ (80031ac <checkSelfState+0x140>)
 8003166:	edd3 7a00 	vldr	s15, [r3]
 800316a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800316e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003172:	dd05      	ble.n	8003180 <checkSelfState+0x114>
	{
		//过压
		fault.PV_OVER_VOLTAGE = 1;
 8003174:	4b0b      	ldr	r3, [pc, #44]	@ (80031a4 <checkSelfState+0x138>)
 8003176:	2201      	movs	r2, #1
 8003178:	705a      	strb	r2, [r3, #1]
		//printf("PV过压");
		control.ERROR_FLAG = 1;
 800317a:	4b0b      	ldr	r3, [pc, #44]	@ (80031a8 <checkSelfState+0x13c>)
 800317c:	2201      	movs	r2, #1
 800317e:	721a      	strb	r2, [r3, #8]

//检查是否锁相成功
#if 0

#endif
	if(control.ERROR_FLAG == 0)
 8003180:	4b09      	ldr	r3, [pc, #36]	@ (80031a8 <checkSelfState+0x13c>)
 8003182:	7a1b      	ldrb	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d103      	bne.n	8003190 <checkSelfState+0x124>
	{
		stFsm.stNextState = workState;
 8003188:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <checkSelfState+0x144>)
 800318a:	2202      	movs	r2, #2
 800318c:	705a      	strb	r2, [r3, #1]
 800318e:	e004      	b.n	800319a <checkSelfState+0x12e>
	}
	else
	{
		stFsm.stNextState = errorState;
 8003190:	4b07      	ldr	r3, [pc, #28]	@ (80031b0 <checkSelfState+0x144>)
 8003192:	2203      	movs	r2, #3
 8003194:	705a      	strb	r2, [r3, #1]
 8003196:	e000      	b.n	800319a <checkSelfState+0x12e>
		return;
 8003198:	bf00      	nop
	}
}
 800319a:	bd80      	pop	{r7, pc}
 800319c:	200003fc 	.word	0x200003fc
 80031a0:	20000474 	.word	0x20000474
 80031a4:	20000298 	.word	0x20000298
 80031a8:	20000288 	.word	0x20000288
 80031ac:	2000025c 	.word	0x2000025c
 80031b0:	20000518 	.word	0x20000518

080031b4 <faultHandle>:

void faultHandle()
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
	openRed();
 80031b8:	f7ff fe5c 	bl	8002e74 <openRed>
	//报故障
	//检查故障是否存在，存在则进入
	if(control.ERROR_FLAG == 1)
 80031bc:	4b15      	ldr	r3, [pc, #84]	@ (8003214 <faultHandle+0x60>)
 80031be:	7a1b      	ldrb	r3, [r3, #8]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d11c      	bne.n	80031fe <faultHandle+0x4a>
	{
		//检查是否符合故障清楚条件
		if(control.CLEAR_FAULT == 1)
 80031c4:	4b13      	ldr	r3, [pc, #76]	@ (8003214 <faultHandle+0x60>)
 80031c6:	78db      	ldrb	r3, [r3, #3]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d114      	bne.n	80031f6 <faultHandle+0x42>
		{
			//故障清除,重新进入初始化状态
			controlStateInit(&control);
 80031cc:	4811      	ldr	r0, [pc, #68]	@ (8003214 <faultHandle+0x60>)
 80031ce:	f7fe fbe3 	bl	8001998 <controlStateInit>
			faultStateInit(&fault);
 80031d2:	4811      	ldr	r0, [pc, #68]	@ (8003218 <faultHandle+0x64>)
 80031d4:	f7fe fc14 	bl	8001a00 <faultStateInit>
			control.INIT_FLAG = 1;
 80031d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003214 <faultHandle+0x60>)
 80031da:	2201      	movs	r2, #1
 80031dc:	729a      	strb	r2, [r3, #10]
			stopTim1Interrupt();
 80031de:	f7ff fd99 	bl	8002d14 <stopTim1Interrupt>
			stopTim2Interrupt();
 80031e2:	f7ff fda5 	bl	8002d30 <stopTim2Interrupt>
			stFsm.stNextState = initState;
 80031e6:	4b0d      	ldr	r3, [pc, #52]	@ (800321c <faultHandle+0x68>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	705a      	strb	r2, [r3, #1]
			startAllInterrupt();
 80031ec:	f7ff fd80 	bl	8002cf0 <startAllInterrupt>
			openGreen();
 80031f0:	f7ff fe50 	bl	8002e94 <openGreen>
		stFsm.stNextState = initState;
		startAllInterrupt();
		stopPWM();
		openGreen();
	}
}
 80031f4:	e00c      	b.n	8003210 <faultHandle+0x5c>
			stFsm.stNextState = errorState;
 80031f6:	4b09      	ldr	r3, [pc, #36]	@ (800321c <faultHandle+0x68>)
 80031f8:	2203      	movs	r2, #3
 80031fa:	705a      	strb	r2, [r3, #1]
}
 80031fc:	e008      	b.n	8003210 <faultHandle+0x5c>
		stFsm.stNextState = initState;
 80031fe:	4b07      	ldr	r3, [pc, #28]	@ (800321c <faultHandle+0x68>)
 8003200:	2200      	movs	r2, #0
 8003202:	705a      	strb	r2, [r3, #1]
		startAllInterrupt();
 8003204:	f7ff fd74 	bl	8002cf0 <startAllInterrupt>
		stopPWM();
 8003208:	f7ff fd50 	bl	8002cac <stopPWM>
		openGreen();
 800320c:	f7ff fe42 	bl	8002e94 <openGreen>
}
 8003210:	bf00      	nop
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20000288 	.word	0x20000288
 8003218:	20000298 	.word	0x20000298
 800321c:	20000518 	.word	0x20000518

08003220 <fsmInit>:

void fsmInit(fsmT* pFsm,uint8_t curState)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
	pFsm->stNextState = initState;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	705a      	strb	r2, [r3, #1]
	pFsm->stCurState = curState;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	701a      	strb	r2, [r3, #0]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <startFsm>:

void startFsm()
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
	while(1)
	{
		switch(stFsm.stCurState)
 8003248:	4b31      	ldr	r3, [pc, #196]	@ (8003310 <startFsm+0xcc>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b03      	cmp	r3, #3
 8003250:	d857      	bhi.n	8003302 <startFsm+0xbe>
 8003252:	a201      	add	r2, pc, #4	@ (adr r2, 8003258 <startFsm+0x14>)
 8003254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003258:	08003269 	.word	0x08003269
 800325c:	08003299 	.word	0x08003299
 8003260:	080032bd 	.word	0x080032bd
 8003264:	080032e9 	.word	0x080032e9
		{
			//初始化状态
			case initState:
				control.FSM_STATE = initState;
 8003268:	4b2a      	ldr	r3, [pc, #168]	@ (8003314 <startFsm+0xd0>)
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
				//如果TIM2没有开启，则进入
				if(control.TIMER2 == 0)
 800326e:	4b29      	ldr	r3, [pc, #164]	@ (8003314 <startFsm+0xd0>)
 8003270:	7b1b      	ldrb	r3, [r3, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d108      	bne.n	8003288 <startFsm+0x44>
				{
					changeTaskTim2ToInit();
 8003276:	f7ff fe1d 	bl	8002eb4 <changeTaskTim2ToInit>
					startTim2Interrupt();
 800327a:	f7ff fd81 	bl	8002d80 <startTim2Interrupt>
					changeADCTrigToTim2();
 800327e:	f7ff fdb7 	bl	8002df0 <changeADCTrigToTim2>
					startAllInterrupt();
 8003282:	f7ff fd35 	bl	8002cf0 <startAllInterrupt>
				}
				else if(control.ERROR_FLAG == 1)
				{
					stFsm.stNextState = errorState;
				}
				break;
 8003286:	e037      	b.n	80032f8 <startFsm+0xb4>
				else if(control.ERROR_FLAG == 1)
 8003288:	4b22      	ldr	r3, [pc, #136]	@ (8003314 <startFsm+0xd0>)
 800328a:	7a1b      	ldrb	r3, [r3, #8]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d133      	bne.n	80032f8 <startFsm+0xb4>
					stFsm.stNextState = errorState;
 8003290:	4b1f      	ldr	r3, [pc, #124]	@ (8003310 <startFsm+0xcc>)
 8003292:	2203      	movs	r2, #3
 8003294:	705a      	strb	r2, [r3, #1]
				break;
 8003296:	e02f      	b.n	80032f8 <startFsm+0xb4>
			//自检状态
			case checkSelf:
				if(control.FSM_STATE != checkSelf)
 8003298:	4b1e      	ldr	r3, [pc, #120]	@ (8003314 <startFsm+0xd0>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d005      	beq.n	80032ac <startFsm+0x68>
				{
					control.FSM_STATE = checkSelf;
 80032a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003314 <startFsm+0xd0>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	701a      	strb	r2, [r3, #0]
					changeTaskTim2ToCheck();
 80032a6:	f7ff fe15 	bl	8002ed4 <changeTaskTim2ToCheck>
				}
				else if(control.ERROR_FLAG == 1)
				{
					stFsm.stNextState = errorState;
				}
				break;
 80032aa:	e027      	b.n	80032fc <startFsm+0xb8>
				else if(control.ERROR_FLAG == 1)
 80032ac:	4b19      	ldr	r3, [pc, #100]	@ (8003314 <startFsm+0xd0>)
 80032ae:	7a1b      	ldrb	r3, [r3, #8]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d123      	bne.n	80032fc <startFsm+0xb8>
					stFsm.stNextState = errorState;
 80032b4:	4b16      	ldr	r3, [pc, #88]	@ (8003310 <startFsm+0xcc>)
 80032b6:	2203      	movs	r2, #3
 80032b8:	705a      	strb	r2, [r3, #1]
				break;
 80032ba:	e01f      	b.n	80032fc <startFsm+0xb8>
			//工作状态
			case workState:
				if(control.FSM_STATE != workState)
 80032bc:	4b15      	ldr	r3, [pc, #84]	@ (8003314 <startFsm+0xd0>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d009      	beq.n	80032d8 <startFsm+0x94>
				{
					//发波，开启环路定时器
					startPWM();
 80032c4:	f7ff fcd0 	bl	8002c68 <startPWM>
					changeADCTrigToTim1();
 80032c8:	f7ff fd74 	bl	8002db4 <changeADCTrigToTim1>
					startTim1Interrupt();
 80032cc:	f7ff fd3e 	bl	8002d4c <startTim1Interrupt>
					control.FSM_STATE = workState;
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <startFsm+0xd0>)
 80032d2:	2202      	movs	r2, #2
 80032d4:	701a      	strb	r2, [r3, #0]
				}
				else if(control.ERROR_FLAG == 1)
				{
					stFsm.stNextState = errorState;
				}
				break;
 80032d6:	e013      	b.n	8003300 <startFsm+0xbc>
				else if(control.ERROR_FLAG == 1)
 80032d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003314 <startFsm+0xd0>)
 80032da:	7a1b      	ldrb	r3, [r3, #8]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d10f      	bne.n	8003300 <startFsm+0xbc>
					stFsm.stNextState = errorState;
 80032e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003310 <startFsm+0xcc>)
 80032e2:	2203      	movs	r2, #3
 80032e4:	705a      	strb	r2, [r3, #1]
				break;
 80032e6:	e00b      	b.n	8003300 <startFsm+0xbc>
			//故障状态
			case errorState:
				control.FSM_STATE = errorState;
 80032e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <startFsm+0xd0>)
 80032ea:	2203      	movs	r2, #3
 80032ec:	701a      	strb	r2, [r3, #0]
				stopAllInterrupt();
 80032ee:	f7ff fd08 	bl	8002d02 <stopAllInterrupt>
				faultHandle();
 80032f2:	f7ff ff5f 	bl	80031b4 <faultHandle>
				break;
 80032f6:	e004      	b.n	8003302 <startFsm+0xbe>
				break;
 80032f8:	bf00      	nop
 80032fa:	e002      	b.n	8003302 <startFsm+0xbe>
				break;
 80032fc:	bf00      	nop
 80032fe:	e000      	b.n	8003302 <startFsm+0xbe>
				break;
 8003300:	bf00      	nop
		}
		stFsm.stCurState = stFsm.stNextState;
 8003302:	4b03      	ldr	r3, [pc, #12]	@ (8003310 <startFsm+0xcc>)
 8003304:	785b      	ldrb	r3, [r3, #1]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	4b01      	ldr	r3, [pc, #4]	@ (8003310 <startFsm+0xcc>)
 800330a:	701a      	strb	r2, [r3, #0]
		switch(stFsm.stCurState)
 800330c:	e79c      	b.n	8003248 <startFsm+0x4>
 800330e:	bf00      	nop
 8003310:	20000518 	.word	0x20000518
 8003314:	20000288 	.word	0x20000288

08003318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331e:	4b0f      	ldr	r3, [pc, #60]	@ (800335c <HAL_MspInit+0x44>)
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	4a0e      	ldr	r2, [pc, #56]	@ (800335c <HAL_MspInit+0x44>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6193      	str	r3, [r2, #24]
 800332a:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <HAL_MspInit+0x44>)
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	607b      	str	r3, [r7, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003336:	4b09      	ldr	r3, [pc, #36]	@ (800335c <HAL_MspInit+0x44>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	4a08      	ldr	r2, [pc, #32]	@ (800335c <HAL_MspInit+0x44>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003340:	61d3      	str	r3, [r2, #28]
 8003342:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_MspInit+0x44>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40021000 	.word	0x40021000

08003360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003364:	bf00      	nop
 8003366:	e7fd      	b.n	8003364 <NMI_Handler+0x4>

08003368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <HardFault_Handler+0x4>

08003370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <MemManage_Handler+0x4>

08003378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <BusFault_Handler+0x4>

08003380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <UsageFault_Handler+0x4>

08003388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033b6:	f000 fc27 	bl	8003c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033c4:	4802      	ldr	r0, [pc, #8]	@ (80033d0 <DMA1_Channel1_IRQHandler+0x10>)
 80033c6:	f001 fe2a 	bl	800501e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000214 	.word	0x20000214

080033d4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033d8:	4803      	ldr	r0, [pc, #12]	@ (80033e8 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80033da:	f004 fe29 	bl	8008030 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80033de:	4803      	ldr	r0, [pc, #12]	@ (80033ec <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80033e0:	f004 fe26 	bl	8008030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000524 	.word	0x20000524
 80033ec:	200005bc 	.word	0x200005bc

080033f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033f4:	4b06      	ldr	r3, [pc, #24]	@ (8003410 <SystemInit+0x20>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	4a05      	ldr	r2, [pc, #20]	@ (8003410 <SystemInit+0x20>)
 80033fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <forwardBridge>:
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, forwardBridge_Pin, SET);
 8003418:	2201      	movs	r2, #1
 800341a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800341e:	4805      	ldr	r0, [pc, #20]	@ (8003434 <forwardBridge+0x20>)
 8003420:	f002 f860 	bl	80054e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, reverseBridge_Pin, RESET);
 8003424:	2200      	movs	r2, #0
 8003426:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800342a:	4802      	ldr	r0, [pc, #8]	@ (8003434 <forwardBridge+0x20>)
 800342c:	f002 f85a 	bl	80054e4 <HAL_GPIO_WritePin>
}
 8003430:	bf00      	nop
 8003432:	bd80      	pop	{r7, pc}
 8003434:	48000400 	.word	0x48000400

08003438 <reverseBridge>:
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, reverseBridge_Pin, SET);
 800343c:	2201      	movs	r2, #1
 800343e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003442:	4805      	ldr	r0, [pc, #20]	@ (8003458 <reverseBridge+0x20>)
 8003444:	f002 f84e 	bl	80054e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, forwardBridge_Pin, RESET);
 8003448:	2200      	movs	r2, #0
 800344a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800344e:	4802      	ldr	r0, [pc, #8]	@ (8003458 <reverseBridge+0x20>)
 8003450:	f002 f848 	bl	80054e4 <HAL_GPIO_WritePin>
}
 8003454:	bf00      	nop
 8003456:	bd80      	pop	{r7, pc}
 8003458:	48000400 	.word	0x48000400

0800345c <startAllInterrupt>:
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8003460:	b662      	cpsie	i
}
 8003462:	bf00      	nop
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <stopAllInterrupt>:
{
 800346e:	b480      	push	{r7}
 8003470:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003472:	b672      	cpsid	i
}
 8003474:	bf00      	nop
}
 8003476:	bf00      	nop
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <openRelay>:
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, AC_Relay_Pin, GPIO_PIN_SET);
 8003484:	2201      	movs	r2, #1
 8003486:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800348a:	4804      	ldr	r0, [pc, #16]	@ (800349c <openRelay+0x1c>)
 800348c:	f002 f82a 	bl	80054e4 <HAL_GPIO_WritePin>
	control.REALY_STATE = 1;
 8003490:	4b03      	ldr	r3, [pc, #12]	@ (80034a0 <openRelay+0x20>)
 8003492:	2201      	movs	r2, #1
 8003494:	725a      	strb	r2, [r3, #9]
}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	48000400 	.word	0x48000400
 80034a0:	20000288 	.word	0x20000288

080034a4 <initTask>:
		{loopTask,1,1,0},
		{ledTask,2500,2500,0}
};

void initTask()
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
	runInit();
 80034a8:	f7ff fd24 	bl	8002ef4 <runInit>
}
 80034ac:	bf00      	nop
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <checkTask>:

void checkTask()
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
	checkSelfState();
 80034b4:	f7ff fdda 	bl	800306c <checkSelfState>
}
 80034b8:	bf00      	nop
 80034ba:	bd80      	pop	{r7, pc}

080034bc <ledTask>:

void ledTask()
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, LEDG_Pin);
 80034c0:	2102      	movs	r1, #2
 80034c2:	4802      	ldr	r0, [pc, #8]	@ (80034cc <ledTask+0x10>)
 80034c4:	f002 f826 	bl	8005514 <HAL_GPIO_TogglePin>
}
 80034c8:	bf00      	nop
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	48000400 	.word	0x48000400

080034d0 <loopTask>:

void loopTask()
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, test_Pin, SET);
 80034d4:	2201      	movs	r2, #1
 80034d6:	2180      	movs	r1, #128	@ 0x80
 80034d8:	4841      	ldr	r0, [pc, #260]	@ (80035e0 <loopTask+0x110>)
 80034da:	f002 f803 	bl	80054e4 <HAL_GPIO_WritePin>
	stopAllInterrupt();
 80034de:	f7ff ffc6 	bl	800346e <stopAllInterrupt>
	adcReadConvert(&adcSampleValue);
 80034e2:	4840      	ldr	r0, [pc, #256]	@ (80035e4 <loopTask+0x114>)
 80034e4:	f7fe ff98 	bl	8002418 <adcReadConvert>
	/*累加RMS*/
	calcRmsSum(&rmsCalcValue);
 80034e8:	483f      	ldr	r0, [pc, #252]	@ (80035e8 <loopTask+0x118>)
 80034ea:	f7ff f8a5 	bl	8002638 <calcRmsSum>

	//计算锁相环
	sogiPllLoop_calc(adcSampleValue.vGrid.data, &gridPll);
 80034ee:	4b3d      	ldr	r3, [pc, #244]	@ (80035e4 <loopTask+0x114>)
 80034f0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80034f4:	483d      	ldr	r0, [pc, #244]	@ (80035ec <loopTask+0x11c>)
 80034f6:	eeb0 0a67 	vmov.f32	s0, s15
 80034fa:	f7ff fa9f 	bl	8002a3c <sogiPllLoop_calc>
/*
 * 全桥控制电路，根据锁相角度，打开相应桥臂
 */
#if 1
	//正向
	if(gridPll.theta < PI && gridPll.theta > 0)
 80034fe:	4b3b      	ldr	r3, [pc, #236]	@ (80035ec <loopTask+0x11c>)
 8003500:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003504:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80035f0 <loopTask+0x120>
 8003508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800350c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003510:	d509      	bpl.n	8003526 <loopTask+0x56>
 8003512:	4b36      	ldr	r3, [pc, #216]	@ (80035ec <loopTask+0x11c>)
 8003514:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003518:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800351c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003520:	dd01      	ble.n	8003526 <loopTask+0x56>
	{
		forwardBridge();
 8003522:	f7ff ff77 	bl	8003414 <forwardBridge>
	}
	//反向
	if(gridPll.theta > PI && gridPll.theta < PI_2)
 8003526:	4b31      	ldr	r3, [pc, #196]	@ (80035ec <loopTask+0x11c>)
 8003528:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800352c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80035f0 <loopTask+0x120>
 8003530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003538:	dd0b      	ble.n	8003552 <loopTask+0x82>
 800353a:	4b2c      	ldr	r3, [pc, #176]	@ (80035ec <loopTask+0x11c>)
 800353c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003540:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80035f4 <loopTask+0x124>
 8003544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354c:	d501      	bpl.n	8003552 <loopTask+0x82>
	{
		reverseBridge();
 800354e:	f7ff ff73 	bl	8003438 <reverseBridge>
		control.ERROR_FLAG = 1;
	}
#endif

	//判断逆变电压是否建立，建立逆变电压后，吸合继电器
	if(rmsCalcValue.vInvRMS.rms > GRID_CONNECTED_VOLTAGE && control.PLL_FLAG == 1)
 8003552:	4b25      	ldr	r3, [pc, #148]	@ (80035e8 <loopTask+0x118>)
 8003554:	edd3 7a05 	vldr	s15, [r3, #20]
 8003558:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80035f8 <loopTask+0x128>
 800355c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003564:	dd08      	ble.n	8003578 <loopTask+0xa8>
 8003566:	4b25      	ldr	r3, [pc, #148]	@ (80035fc <loopTask+0x12c>)
 8003568:	79db      	ldrb	r3, [r3, #7]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d104      	bne.n	8003578 <loopTask+0xa8>
	{
		//吸合继电器，并网
		openRelay();
 800356e:	f7ff ff87 	bl	8003480 <openRelay>
		//开启继电器
		control.REALY_STATE = 1;
 8003572:	4b22      	ldr	r3, [pc, #136]	@ (80035fc <loopTask+0x12c>)
 8003574:	2201      	movs	r2, #1
 8003576:	725a      	strb	r2, [r3, #9]
	}
	//并网条件,满足以下条件允许并网
	//锁相成功
	//逆变电压建立
	if(control.REALY_STATE)
 8003578:	4b20      	ldr	r3, [pc, #128]	@ (80035fc <loopTask+0x12c>)
 800357a:	7a5b      	ldrb	r3, [r3, #9]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <loopTask+0xb6>
	{
		//并网标志
		control.GRID_CONNECTED_FLAG = 1;
 8003580:	4b1e      	ldr	r3, [pc, #120]	@ (80035fc <loopTask+0x12c>)
 8003582:	2201      	movs	r2, #1
 8003584:	719a      	strb	r2, [r3, #6]
	}
	//电流控制环路运行条件
	//锁相成功
	//继电器吸合(同并网控制字bit8)
	//电流环路开始运行，反激发波
	if(control.CURRENT_MODE && control.GRID_CONNECTED_FLAG)
 8003586:	4b1d      	ldr	r3, [pc, #116]	@ (80035fc <loopTask+0x12c>)
 8003588:	795b      	ldrb	r3, [r3, #5]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <loopTask+0xca>
 800358e:	4b1b      	ldr	r3, [pc, #108]	@ (80035fc <loopTask+0x12c>)
 8003590:	799b      	ldrb	r3, [r3, #6]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <loopTask+0xca>
	{
		runCurrentLoop();
 8003596:	f7fd fd4b 	bl	8001030 <runCurrentLoop>

	}
	if(control.VOLTAGE_MODE && control.GRID_CONNECTED_FLAG)
 800359a:	4b18      	ldr	r3, [pc, #96]	@ (80035fc <loopTask+0x12c>)
 800359c:	791b      	ldrb	r3, [r3, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <loopTask+0xde>
 80035a2:	4b16      	ldr	r3, [pc, #88]	@ (80035fc <loopTask+0x12c>)
 80035a4:	799b      	ldrb	r3, [r3, #6]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <loopTask+0xde>
	{
		runVoltageLoop();
 80035aa:	f7fd fd97 	bl	80010dc <runVoltageLoop>
	}

	protectCheck();
 80035ae:	f7fd fc97 	bl	8000ee0 <protectCheck>
	//HAL_GPIO_TogglePin(GPIOC, test_Pin);
	//有效值测
//周期平均
#if 1
	//运行环路
	if(rmsCalcValue.rmsFlag == 200)
 80035b2:	4b0d      	ldr	r3, [pc, #52]	@ (80035e8 <loopTask+0x118>)
 80035b4:	8b1b      	ldrh	r3, [r3, #24]
 80035b6:	2bc8      	cmp	r3, #200	@ 0xc8
 80035b8:	d105      	bne.n	80035c6 <loopTask+0xf6>
	{
		calcRms(&rmsCalcValue);
 80035ba:	480b      	ldr	r0, [pc, #44]	@ (80035e8 <loopTask+0x118>)
 80035bc:	f7ff f87e 	bl	80026bc <calcRms>
		rmsCalcValue.rmsFlag = 1;
 80035c0:	4b09      	ldr	r3, [pc, #36]	@ (80035e8 <loopTask+0x118>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	831a      	strh	r2, [r3, #24]
#if 0
	rmsCalcValue.vGridRMS.rms = calcMovingRms(&vGridMovingRms, adcSampleValue.vGrid.data);
	rmsCalcValue.iGridRMS.rms = calcMovingRms(&iGridMovingRms, adcSampleValue.iGrid.data);
	rmsCalcValue.vInvRMS.rms = calcMovingRms(&vInvMovingRms, adcSampleValue.vInv.data);
#endif
	if(control.ERROR_FLAG != 1 && control.STOP_MACHINE != 1)
 80035c6:	4b0d      	ldr	r3, [pc, #52]	@ (80035fc <loopTask+0x12c>)
 80035c8:	7a1b      	ldrb	r3, [r3, #8]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d005      	beq.n	80035da <loopTask+0x10a>
 80035ce:	4b0b      	ldr	r3, [pc, #44]	@ (80035fc <loopTask+0x12c>)
 80035d0:	789b      	ldrb	r3, [r3, #2]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d001      	beq.n	80035da <loopTask+0x10a>
	{
		startAllInterrupt();
 80035d6:	f7ff ff41 	bl	800345c <startAllInterrupt>
	}
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	48000400 	.word	0x48000400
 80035e4:	200003fc 	.word	0x200003fc
 80035e8:	20000474 	.word	0x20000474
 80035ec:	20000490 	.word	0x20000490
 80035f0:	40490fdb 	.word	0x40490fdb
 80035f4:	40c90fdb 	.word	0x40c90fdb
 80035f8:	43570000 	.word	0x43570000
 80035fc:	20000288 	.word	0x20000288

08003600 <runTask>:
/*
 * 任务运行函数，放进ADC转换完成中断里面
 * 函数功能：判断中断来源然后选择不同的任务遍历循环
 */
void runTask()
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
	static uint8_t i;
	static uint8_t j;
	/*
	 * 判断定时器来源
	 */
	if(control.TIMER1 == 1)
 8003604:	4b4b      	ldr	r3, [pc, #300]	@ (8003734 <runTask+0x134>)
 8003606:	7adb      	ldrb	r3, [r3, #11]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d143      	bne.n	8003694 <runTask+0x94>
	{
		for(i = 0; i < 2; i++)
 800360c:	4b4a      	ldr	r3, [pc, #296]	@ (8003738 <runTask+0x138>)
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	e03b      	b.n	800368c <runTask+0x8c>
		{
			if(taskListTim1[i].beats != 0)
 8003614:	4b48      	ldr	r3, [pc, #288]	@ (8003738 <runTask+0x138>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	4a48      	ldr	r2, [pc, #288]	@ (800373c <runTask+0x13c>)
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	4413      	add	r3, r2
 800361e:	3304      	adds	r3, #4
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d02c      	beq.n	8003680 <runTask+0x80>
			{
				taskListTim1[i].beats--;
 8003626:	4b44      	ldr	r3, [pc, #272]	@ (8003738 <runTask+0x138>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	4944      	ldr	r1, [pc, #272]	@ (800373c <runTask+0x13c>)
 800362c:	011a      	lsls	r2, r3, #4
 800362e:	440a      	add	r2, r1
 8003630:	3204      	adds	r2, #4
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	3a01      	subs	r2, #1
 8003636:	4941      	ldr	r1, [pc, #260]	@ (800373c <runTask+0x13c>)
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	440b      	add	r3, r1
 800363c:	3304      	adds	r3, #4
 800363e:	601a      	str	r2, [r3, #0]
				if(taskListTim1[i].beats == 0)
 8003640:	4b3d      	ldr	r3, [pc, #244]	@ (8003738 <runTask+0x138>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	4a3d      	ldr	r2, [pc, #244]	@ (800373c <runTask+0x13c>)
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	4413      	add	r3, r2
 800364a:	3304      	adds	r3, #4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d116      	bne.n	8003680 <runTask+0x80>
				{
					taskListTim1[i].beats = taskListTim1[i].count;
 8003652:	4b39      	ldr	r3, [pc, #228]	@ (8003738 <runTask+0x138>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	4619      	mov	r1, r3
 8003658:	4b37      	ldr	r3, [pc, #220]	@ (8003738 <runTask+0x138>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	4a37      	ldr	r2, [pc, #220]	@ (800373c <runTask+0x13c>)
 8003660:	010b      	lsls	r3, r1, #4
 8003662:	4413      	add	r3, r2
 8003664:	3308      	adds	r3, #8
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4934      	ldr	r1, [pc, #208]	@ (800373c <runTask+0x13c>)
 800366a:	0103      	lsls	r3, r0, #4
 800366c:	440b      	add	r3, r1
 800366e:	3304      	adds	r3, #4
 8003670:	601a      	str	r2, [r3, #0]
					taskListTim1[i].task();
 8003672:	4b31      	ldr	r3, [pc, #196]	@ (8003738 <runTask+0x138>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	4a31      	ldr	r2, [pc, #196]	@ (800373c <runTask+0x13c>)
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	4413      	add	r3, r2
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4798      	blx	r3
		for(i = 0; i < 2; i++)
 8003680:	4b2d      	ldr	r3, [pc, #180]	@ (8003738 <runTask+0x138>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	3301      	adds	r3, #1
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4b2b      	ldr	r3, [pc, #172]	@ (8003738 <runTask+0x138>)
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	4b2a      	ldr	r3, [pc, #168]	@ (8003738 <runTask+0x138>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d9bf      	bls.n	8003614 <runTask+0x14>
				}
			}
		}
	}
	if(control.TIMER2 == 1)
 8003694:	4b27      	ldr	r3, [pc, #156]	@ (8003734 <runTask+0x134>)
 8003696:	7b1b      	ldrb	r3, [r3, #12]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d143      	bne.n	8003724 <runTask+0x124>
	{
		for(j = 0; j < 2; j++)
 800369c:	4b28      	ldr	r3, [pc, #160]	@ (8003740 <runTask+0x140>)
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	e03b      	b.n	800371c <runTask+0x11c>
		{
			if(taskListTim2[j].beats != 0)
 80036a4:	4b26      	ldr	r3, [pc, #152]	@ (8003740 <runTask+0x140>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	4a26      	ldr	r2, [pc, #152]	@ (8003744 <runTask+0x144>)
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	4413      	add	r3, r2
 80036ae:	3304      	adds	r3, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d02c      	beq.n	8003710 <runTask+0x110>
			{
				taskListTim2[j].beats--;
 80036b6:	4b22      	ldr	r3, [pc, #136]	@ (8003740 <runTask+0x140>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	4922      	ldr	r1, [pc, #136]	@ (8003744 <runTask+0x144>)
 80036bc:	011a      	lsls	r2, r3, #4
 80036be:	440a      	add	r2, r1
 80036c0:	3204      	adds	r2, #4
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	3a01      	subs	r2, #1
 80036c6:	491f      	ldr	r1, [pc, #124]	@ (8003744 <runTask+0x144>)
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	440b      	add	r3, r1
 80036cc:	3304      	adds	r3, #4
 80036ce:	601a      	str	r2, [r3, #0]
				if(taskListTim2[j].beats == 0)
 80036d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003740 <runTask+0x140>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003744 <runTask+0x144>)
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	4413      	add	r3, r2
 80036da:	3304      	adds	r3, #4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d116      	bne.n	8003710 <runTask+0x110>
				{
					taskListTim2[j].beats = taskListTim2[j].count;
 80036e2:	4b17      	ldr	r3, [pc, #92]	@ (8003740 <runTask+0x140>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	4619      	mov	r1, r3
 80036e8:	4b15      	ldr	r3, [pc, #84]	@ (8003740 <runTask+0x140>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	4a15      	ldr	r2, [pc, #84]	@ (8003744 <runTask+0x144>)
 80036f0:	010b      	lsls	r3, r1, #4
 80036f2:	4413      	add	r3, r2
 80036f4:	3308      	adds	r3, #8
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4912      	ldr	r1, [pc, #72]	@ (8003744 <runTask+0x144>)
 80036fa:	0103      	lsls	r3, r0, #4
 80036fc:	440b      	add	r3, r1
 80036fe:	3304      	adds	r3, #4
 8003700:	601a      	str	r2, [r3, #0]
					taskListTim2[j].task();
 8003702:	4b0f      	ldr	r3, [pc, #60]	@ (8003740 <runTask+0x140>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	4a0f      	ldr	r2, [pc, #60]	@ (8003744 <runTask+0x144>)
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	4413      	add	r3, r2
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4798      	blx	r3
		for(j = 0; j < 2; j++)
 8003710:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <runTask+0x140>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	3301      	adds	r3, #1
 8003716:	b2da      	uxtb	r2, r3
 8003718:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <runTask+0x140>)
 800371a:	701a      	strb	r2, [r3, #0]
 800371c:	4b08      	ldr	r3, [pc, #32]	@ (8003740 <runTask+0x140>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d9bf      	bls.n	80036a4 <runTask+0xa4>
				}
			}
		}
	}
	HAL_GPIO_WritePin(GPIOB, test_Pin, RESET);
 8003724:	2200      	movs	r2, #0
 8003726:	2180      	movs	r1, #128	@ 0x80
 8003728:	4807      	ldr	r0, [pc, #28]	@ (8003748 <runTask+0x148>)
 800372a:	f001 fedb 	bl	80054e4 <HAL_GPIO_WritePin>
	return;
 800372e:	bf00      	nop
}
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20000288 	.word	0x20000288
 8003738:	2000051a 	.word	0x2000051a
 800373c:	20000044 	.word	0x20000044
 8003740:	2000051b 	.word	0x2000051b
 8003744:	20000024 	.word	0x20000024
 8003748:	48000400 	.word	0x48000400

0800374c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003752:	f107 0310 	add.w	r3, r7, #16
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	605a      	str	r2, [r3, #4]
 800375c:	609a      	str	r2, [r3, #8]
 800375e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800376a:	4b1f      	ldr	r3, [pc, #124]	@ (80037e8 <MX_TIM1_Init+0x9c>)
 800376c:	4a1f      	ldr	r2, [pc, #124]	@ (80037ec <MX_TIM1_Init+0xa0>)
 800376e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8003770:	4b1d      	ldr	r3, [pc, #116]	@ (80037e8 <MX_TIM1_Init+0x9c>)
 8003772:	2247      	movs	r2, #71	@ 0x47
 8003774:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003776:	4b1c      	ldr	r3, [pc, #112]	@ (80037e8 <MX_TIM1_Init+0x9c>)
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800377c:	4b1a      	ldr	r3, [pc, #104]	@ (80037e8 <MX_TIM1_Init+0x9c>)
 800377e:	2263      	movs	r2, #99	@ 0x63
 8003780:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003782:	4b19      	ldr	r3, [pc, #100]	@ (80037e8 <MX_TIM1_Init+0x9c>)
 8003784:	2200      	movs	r2, #0
 8003786:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003788:	4b17      	ldr	r3, [pc, #92]	@ (80037e8 <MX_TIM1_Init+0x9c>)
 800378a:	2200      	movs	r2, #0
 800378c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800378e:	4b16      	ldr	r3, [pc, #88]	@ (80037e8 <MX_TIM1_Init+0x9c>)
 8003790:	2280      	movs	r2, #128	@ 0x80
 8003792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003794:	4814      	ldr	r0, [pc, #80]	@ (80037e8 <MX_TIM1_Init+0x9c>)
 8003796:	f004 f9e3 	bl	8007b60 <HAL_TIM_Base_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80037a0:	f7fe fcc8 	bl	8002134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80037aa:	f107 0310 	add.w	r3, r7, #16
 80037ae:	4619      	mov	r1, r3
 80037b0:	480d      	ldr	r0, [pc, #52]	@ (80037e8 <MX_TIM1_Init+0x9c>)
 80037b2:	f004 fdf8 	bl	80083a6 <HAL_TIM_ConfigClockSource>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80037bc:	f7fe fcba 	bl	8002134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80037c0:	2320      	movs	r3, #32
 80037c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037cc:	1d3b      	adds	r3, r7, #4
 80037ce:	4619      	mov	r1, r3
 80037d0:	4805      	ldr	r0, [pc, #20]	@ (80037e8 <MX_TIM1_Init+0x9c>)
 80037d2:	f005 f95d 	bl	8008a90 <HAL_TIMEx_MasterConfigSynchronization>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80037dc:	f7fe fcaa 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80037e0:	bf00      	nop
 80037e2:	3720      	adds	r7, #32
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20000524 	.word	0x20000524
 80037ec:	40012c00 	.word	0x40012c00

080037f0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037f6:	f107 0310 	add.w	r3, r7, #16
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	609a      	str	r2, [r3, #8]
 8003802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003804:	1d3b      	adds	r3, r7, #4
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	605a      	str	r2, [r3, #4]
 800380c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800380e:	4b1e      	ldr	r3, [pc, #120]	@ (8003888 <MX_TIM2_Init+0x98>)
 8003810:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003814:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8003816:	4b1c      	ldr	r3, [pc, #112]	@ (8003888 <MX_TIM2_Init+0x98>)
 8003818:	2247      	movs	r2, #71	@ 0x47
 800381a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800381c:	4b1a      	ldr	r3, [pc, #104]	@ (8003888 <MX_TIM2_Init+0x98>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003822:	4b19      	ldr	r3, [pc, #100]	@ (8003888 <MX_TIM2_Init+0x98>)
 8003824:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003828:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800382a:	4b17      	ldr	r3, [pc, #92]	@ (8003888 <MX_TIM2_Init+0x98>)
 800382c:	2200      	movs	r2, #0
 800382e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003830:	4b15      	ldr	r3, [pc, #84]	@ (8003888 <MX_TIM2_Init+0x98>)
 8003832:	2280      	movs	r2, #128	@ 0x80
 8003834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003836:	4814      	ldr	r0, [pc, #80]	@ (8003888 <MX_TIM2_Init+0x98>)
 8003838:	f004 f992 	bl	8007b60 <HAL_TIM_Base_Init>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003842:	f7fe fc77 	bl	8002134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800384a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800384c:	f107 0310 	add.w	r3, r7, #16
 8003850:	4619      	mov	r1, r3
 8003852:	480d      	ldr	r0, [pc, #52]	@ (8003888 <MX_TIM2_Init+0x98>)
 8003854:	f004 fda7 	bl	80083a6 <HAL_TIM_ConfigClockSource>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800385e:	f7fe fc69 	bl	8002134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003862:	2320      	movs	r3, #32
 8003864:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800386a:	1d3b      	adds	r3, r7, #4
 800386c:	4619      	mov	r1, r3
 800386e:	4806      	ldr	r0, [pc, #24]	@ (8003888 <MX_TIM2_Init+0x98>)
 8003870:	f005 f90e 	bl	8008a90 <HAL_TIMEx_MasterConfigSynchronization>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800387a:	f7fe fc5b 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800387e:	bf00      	nop
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000570 	.word	0x20000570

0800388c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003892:	463b      	mov	r3, r7
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800389e:	4b1e      	ldr	r3, [pc, #120]	@ (8003918 <MX_TIM17_Init+0x8c>)
 80038a0:	4a1e      	ldr	r2, [pc, #120]	@ (800391c <MX_TIM17_Init+0x90>)
 80038a2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80038a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003918 <MX_TIM17_Init+0x8c>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003918 <MX_TIM17_Init+0x8c>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80038b0:	4b19      	ldr	r3, [pc, #100]	@ (8003918 <MX_TIM17_Init+0x8c>)
 80038b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038b6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038b8:	4b17      	ldr	r3, [pc, #92]	@ (8003918 <MX_TIM17_Init+0x8c>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80038be:	4b16      	ldr	r3, [pc, #88]	@ (8003918 <MX_TIM17_Init+0x8c>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038c4:	4b14      	ldr	r3, [pc, #80]	@ (8003918 <MX_TIM17_Init+0x8c>)
 80038c6:	2280      	movs	r2, #128	@ 0x80
 80038c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80038ca:	4813      	ldr	r0, [pc, #76]	@ (8003918 <MX_TIM17_Init+0x8c>)
 80038cc:	f004 f948 	bl	8007b60 <HAL_TIM_Base_Init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 80038d6:	f7fe fc2d 	bl	8002134 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 80038da:	480f      	ldr	r0, [pc, #60]	@ (8003918 <MX_TIM17_Init+0x8c>)
 80038dc:	f004 fa13 	bl	8007d06 <HAL_TIM_IC_Init>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80038e6:	f7fe fc25 	bl	8002134 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80038ea:	2300      	movs	r3, #0
 80038ec:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80038ee:	2301      	movs	r3, #1
 80038f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80038fa:	463b      	mov	r3, r7
 80038fc:	2200      	movs	r2, #0
 80038fe:	4619      	mov	r1, r3
 8003900:	4805      	ldr	r0, [pc, #20]	@ (8003918 <MX_TIM17_Init+0x8c>)
 8003902:	f004 fcb4 	bl	800826e <HAL_TIM_IC_ConfigChannel>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 800390c:	f7fe fc12 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	200005bc 	.word	0x200005bc
 800391c:	40014800 	.word	0x40014800

08003920 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08c      	sub	sp, #48	@ 0x30
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003928:	f107 031c 	add.w	r3, r7, #28
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a31      	ldr	r2, [pc, #196]	@ (8003a04 <HAL_TIM_Base_MspInit+0xe4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d114      	bne.n	800396c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003942:	4b31      	ldr	r3, [pc, #196]	@ (8003a08 <HAL_TIM_Base_MspInit+0xe8>)
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	4a30      	ldr	r2, [pc, #192]	@ (8003a08 <HAL_TIM_Base_MspInit+0xe8>)
 8003948:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800394c:	6193      	str	r3, [r2, #24]
 800394e:	4b2e      	ldr	r3, [pc, #184]	@ (8003a08 <HAL_TIM_Base_MspInit+0xe8>)
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 800395a:	2200      	movs	r2, #0
 800395c:	2101      	movs	r1, #1
 800395e:	201a      	movs	r0, #26
 8003960:	f001 fa81 	bl	8004e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003964:	201a      	movs	r0, #26
 8003966:	f001 fa9a 	bl	8004e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800396a:	e047      	b.n	80039fc <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003974:	d10c      	bne.n	8003990 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003976:	4b24      	ldr	r3, [pc, #144]	@ (8003a08 <HAL_TIM_Base_MspInit+0xe8>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	4a23      	ldr	r2, [pc, #140]	@ (8003a08 <HAL_TIM_Base_MspInit+0xe8>)
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	61d3      	str	r3, [r2, #28]
 8003982:	4b21      	ldr	r3, [pc, #132]	@ (8003a08 <HAL_TIM_Base_MspInit+0xe8>)
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	697b      	ldr	r3, [r7, #20]
}
 800398e:	e035      	b.n	80039fc <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM17)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1d      	ldr	r2, [pc, #116]	@ (8003a0c <HAL_TIM_Base_MspInit+0xec>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d130      	bne.n	80039fc <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800399a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a08 <HAL_TIM_Base_MspInit+0xe8>)
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	4a1a      	ldr	r2, [pc, #104]	@ (8003a08 <HAL_TIM_Base_MspInit+0xe8>)
 80039a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039a4:	6193      	str	r3, [r2, #24]
 80039a6:	4b18      	ldr	r3, [pc, #96]	@ (8003a08 <HAL_TIM_Base_MspInit+0xe8>)
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b2:	4b15      	ldr	r3, [pc, #84]	@ (8003a08 <HAL_TIM_Base_MspInit+0xe8>)
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	4a14      	ldr	r2, [pc, #80]	@ (8003a08 <HAL_TIM_Base_MspInit+0xe8>)
 80039b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039bc:	6153      	str	r3, [r2, #20]
 80039be:	4b12      	ldr	r3, [pc, #72]	@ (8003a08 <HAL_TIM_Base_MspInit+0xe8>)
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039ca:	2380      	movs	r3, #128	@ 0x80
 80039cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ce:	2302      	movs	r3, #2
 80039d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d6:	2300      	movs	r3, #0
 80039d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80039da:	2301      	movs	r3, #1
 80039dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039de:	f107 031c 	add.w	r3, r7, #28
 80039e2:	4619      	mov	r1, r3
 80039e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039e8:	f001 fc0a 	bl	8005200 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80039ec:	2200      	movs	r2, #0
 80039ee:	2101      	movs	r1, #1
 80039f0:	201a      	movs	r0, #26
 80039f2:	f001 fa38 	bl	8004e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80039f6:	201a      	movs	r0, #26
 80039f8:	f001 fa51 	bl	8004e9e <HAL_NVIC_EnableIRQ>
}
 80039fc:	bf00      	nop
 80039fe:	3730      	adds	r7, #48	@ 0x30
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40012c00 	.word	0x40012c00
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40014800 	.word	0x40014800

08003a10 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */

//捕获中断
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	//TIM17CH1触发捕获中断
	if (htim->Instance==TIM17 && htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a20      	ldr	r2, [pc, #128]	@ (8003aa0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d139      	bne.n	8003a96 <HAL_TIM_IC_CaptureCallback+0x86>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	7f1b      	ldrb	r3, [r3, #28]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d135      	bne.n	8003a96 <HAL_TIM_IC_CaptureCallback+0x86>
	{
		if((captureState&0x80) == 0)
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	b25b      	sxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	db30      	blt.n	8003a96 <HAL_TIM_IC_CaptureCallback+0x86>
		{
			if(captureState&0x40)
 8003a34:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d016      	beq.n	8003a6e <HAL_TIM_IC_CaptureCallback+0x5e>
			{
				//再次捕获到上升沿，标记捕获完
				captureState |= 0x80;
 8003a40:	4b18      	ldr	r3, [pc, #96]	@ (8003aa4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	4b16      	ldr	r3, [pc, #88]	@ (8003aa4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8003a4c:	701a      	strb	r2, [r3, #0]
				//读取捕获值（计数值）
				captureValue = HAL_TIM_ReadCapturedValue(&htim17, TIM_CHANNEL_1);
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4815      	ldr	r0, [pc, #84]	@ (8003aa8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8003a52:	f004 fd71 	bl	8008538 <HAL_TIM_ReadCapturedValue>
 8003a56:	4603      	mov	r3, r0
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	4b14      	ldr	r3, [pc, #80]	@ (8003aac <HAL_TIM_IC_CaptureCallback+0x9c>)
 8003a5c:	801a      	strh	r2, [r3, #0]
				//标记捕获完成 1000 0000
				captureState &= 0x80;
 8003a5e:	4b11      	ldr	r3, [pc, #68]	@ (8003aa4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8003a6a:	701a      	strb	r2, [r3, #0]
				//标记捕获到上升沿
				captureState |= 0x40;
			}
		}
	}
}
 8003a6c:	e013      	b.n	8003a96 <HAL_TIM_IC_CaptureCallback+0x86>
				captureState = 0;
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
				captureValue = 0;
 8003a74:	4b0d      	ldr	r3, [pc, #52]	@ (8003aac <HAL_TIM_IC_CaptureCallback+0x9c>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	801a      	strh	r2, [r3, #0]
				escapeNum = 0;
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SetCounter(&htim17, 0);
 8003a80:	4b09      	ldr	r3, [pc, #36]	@ (8003aa8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2200      	movs	r2, #0
 8003a86:	625a      	str	r2, [r3, #36]	@ 0x24
				captureState |= 0x40;
 8003a88:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4b04      	ldr	r3, [pc, #16]	@ (8003aa4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8003a94:	701a      	strb	r2, [r3, #0]
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40014800 	.word	0x40014800
 8003aa4:	2000051c 	.word	0x2000051c
 8003aa8:	200005bc 	.word	0x200005bc
 8003aac:	2000051e 	.word	0x2000051e
 8003ab0:	20000520 	.word	0x20000520

08003ab4 <HAL_TIM_PeriodElapsedCallback>:

//溢出中断
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM17)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a15      	ldr	r2, [pc, #84]	@ (8003b18 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d122      	bne.n	8003b0c <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		if((captureState&0x80) == 0)
 8003ac6:	4b15      	ldr	r3, [pc, #84]	@ (8003b1c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	b25b      	sxtb	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	db1d      	blt.n	8003b0c <HAL_TIM_PeriodElapsedCallback+0x58>
		{
			//已经捕获到第1个上升沿
			if(captureState&0x40)
 8003ad0:	4b12      	ldr	r3, [pc, #72]	@ (8003b1c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d017      	beq.n	8003b0c <HAL_TIM_PeriodElapsedCallback+0x58>
			{
				//捕获次数溢出
				if((escapeNum&0xffff) == 0xffff)
 8003adc:	4b10      	ldr	r3, [pc, #64]	@ (8003b20 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d10b      	bne.n	8003b00 <HAL_TIM_PeriodElapsedCallback+0x4c>
				{
					//强制捕获完成
					captureState |= 0xA0;
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003af4:	701a      	strb	r2, [r3, #0]

					captureValue = 0xFFFF;
 8003af6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003af8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003afc:	801a      	strh	r2, [r3, #0]
//					printf("escapeNum: %d",escapeNum);
				}
			}
		}
	}
}
 8003afe:	e005      	b.n	8003b0c <HAL_TIM_PeriodElapsedCallback+0x58>
					escapeNum++;
 8003b00:	4b07      	ldr	r3, [pc, #28]	@ (8003b20 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	3301      	adds	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003b0a:	801a      	strh	r2, [r3, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	40014800 	.word	0x40014800
 8003b1c:	2000051c 	.word	0x2000051c
 8003b20:	20000520 	.word	0x20000520
 8003b24:	2000051e 	.word	0x2000051e

08003b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b60 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b2c:	f7ff fc60 	bl	80033f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b30:	480c      	ldr	r0, [pc, #48]	@ (8003b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b32:	490d      	ldr	r1, [pc, #52]	@ (8003b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b34:	4a0d      	ldr	r2, [pc, #52]	@ (8003b6c <LoopForever+0xe>)
  movs r3, #0
 8003b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b38:	e002      	b.n	8003b40 <LoopCopyDataInit>

08003b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b3e:	3304      	adds	r3, #4

08003b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b44:	d3f9      	bcc.n	8003b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b46:	4a0a      	ldr	r2, [pc, #40]	@ (8003b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b48:	4c0a      	ldr	r4, [pc, #40]	@ (8003b74 <LoopForever+0x16>)
  movs r3, #0
 8003b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b4c:	e001      	b.n	8003b52 <LoopFillZerobss>

08003b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b50:	3204      	adds	r2, #4

08003b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b54:	d3fb      	bcc.n	8003b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b56:	f005 f879 	bl	8008c4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b5a:	f7fe fa65 	bl	8002028 <main>

08003b5e <LoopForever>:

LoopForever:
    b LoopForever
 8003b5e:	e7fe      	b.n	8003b5e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b60:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b68:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8003b6c:	08009bf4 	.word	0x08009bf4
  ldr r2, =_sbss
 8003b70:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8003b74:	20000744 	.word	0x20000744

08003b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b78:	e7fe      	b.n	8003b78 <ADC1_2_IRQHandler>
	...

08003b7c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b80:	4b08      	ldr	r3, [pc, #32]	@ (8003ba4 <HAL_Init+0x28>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a07      	ldr	r2, [pc, #28]	@ (8003ba4 <HAL_Init+0x28>)
 8003b86:	f043 0310 	orr.w	r3, r3, #16
 8003b8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b8c:	2003      	movs	r0, #3
 8003b8e:	f001 f95f 	bl	8004e50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b92:	200f      	movs	r0, #15
 8003b94:	f000 f808 	bl	8003ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b98:	f7ff fbbe 	bl	8003318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40022000 	.word	0x40022000

08003ba8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bb0:	4b12      	ldr	r3, [pc, #72]	@ (8003bfc <HAL_InitTick+0x54>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b12      	ldr	r3, [pc, #72]	@ (8003c00 <HAL_InitTick+0x58>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 f977 	bl	8004eba <HAL_SYSTICK_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e00e      	b.n	8003bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b0f      	cmp	r3, #15
 8003bda:	d80a      	bhi.n	8003bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bdc:	2200      	movs	r2, #0
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	f001 f93f 	bl	8004e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003be8:	4a06      	ldr	r2, [pc, #24]	@ (8003c04 <HAL_InitTick+0x5c>)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e000      	b.n	8003bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000000 	.word	0x20000000
 8003c00:	20000068 	.word	0x20000068
 8003c04:	20000064 	.word	0x20000064

08003c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c0c:	4b06      	ldr	r3, [pc, #24]	@ (8003c28 <HAL_IncTick+0x20>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	4b06      	ldr	r3, [pc, #24]	@ (8003c2c <HAL_IncTick+0x24>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4413      	add	r3, r2
 8003c18:	4a04      	ldr	r2, [pc, #16]	@ (8003c2c <HAL_IncTick+0x24>)
 8003c1a:	6013      	str	r3, [r2, #0]
}
 8003c1c:	bf00      	nop
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000068 	.word	0x20000068
 8003c2c:	20000608 	.word	0x20000608

08003c30 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return uwTick;  
 8003c34:	4b03      	ldr	r3, [pc, #12]	@ (8003c44 <HAL_GetTick+0x14>)
 8003c36:	681b      	ldr	r3, [r3, #0]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000608 	.word	0x20000608

08003c48 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b09a      	sub	sp, #104	@ 0x68
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e172      	b.n	8003f76 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d176      	bne.n	8003d90 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d152      	bne.n	8003d50 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7fd fd6d 	bl	80017a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d13b      	bne.n	8003d50 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 ff83 	bl	8004be4 <ADC_Disable>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d12f      	bne.n	8003d50 <HAL_ADC_Init+0xe0>
 8003cf0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d12b      	bne.n	8003d50 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d00:	f023 0302 	bic.w	r3, r3, #2
 8003d04:	f043 0202 	orr.w	r2, r3, #2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d1a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003d2a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d2c:	4b94      	ldr	r3, [pc, #592]	@ (8003f80 <HAL_ADC_Init+0x310>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a94      	ldr	r2, [pc, #592]	@ (8003f84 <HAL_ADC_Init+0x314>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	0c9a      	lsrs	r2, r3, #18
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d42:	e002      	b.n	8003d4a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f9      	bne.n	8003d44 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003d68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d6c:	d110      	bne.n	8003d90 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	f023 0312 	bic.w	r3, r3, #18
 8003d76:	f043 0210 	orr.w	r2, r3, #16
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d82:	f043 0201 	orr.w	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f040 80df 	bne.w	8003f5c <HAL_ADC_Init+0x2ec>
 8003d9e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f040 80da 	bne.w	8003f5c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f040 80d2 	bne.w	8003f5c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003dc0:	f043 0202 	orr.w	r2, r3, #2
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f88 <HAL_ADC_Init+0x318>)
 8003dca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dd4:	d102      	bne.n	8003ddc <HAL_ADC_Init+0x16c>
 8003dd6:	4b6d      	ldr	r3, [pc, #436]	@ (8003f8c <HAL_ADC_Init+0x31c>)
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	e002      	b.n	8003de2 <HAL_ADC_Init+0x172>
 8003ddc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003de0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d108      	bne.n	8003e02 <HAL_ADC_Init+0x192>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_ADC_Init+0x192>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <HAL_ADC_Init+0x194>
 8003e02:	2300      	movs	r3, #0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d11c      	bne.n	8003e42 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003e08:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d010      	beq.n	8003e30 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d107      	bne.n	8003e2a <HAL_ADC_Init+0x1ba>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_ADC_Init+0x1ba>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_ADC_Init+0x1bc>
 8003e2a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d108      	bne.n	8003e42 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003e30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e40:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	7e5b      	ldrb	r3, [r3, #25]
 8003e46:	035b      	lsls	r3, r3, #13
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e4c:	2a01      	cmp	r2, #1
 8003e4e:	d002      	beq.n	8003e56 <HAL_ADC_Init+0x1e6>
 8003e50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e54:	e000      	b.n	8003e58 <HAL_ADC_Init+0x1e8>
 8003e56:	2200      	movs	r2, #0
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d11b      	bne.n	8003eae <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	7e5b      	ldrb	r3, [r3, #25]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	3b01      	subs	r3, #1
 8003e84:	045a      	lsls	r2, r3, #17
 8003e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e90:	e00d      	b.n	8003eae <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003e9a:	f043 0220 	orr.w	r2, r3, #32
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea6:	f043 0201 	orr.w	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d007      	beq.n	8003ec6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d114      	bne.n	8003efe <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ee2:	f023 0302 	bic.w	r3, r3, #2
 8003ee6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	7e1b      	ldrb	r3, [r3, #24]
 8003eec:	039a      	lsls	r2, r3, #14
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003efa:	4313      	orrs	r3, r2
 8003efc:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	4b22      	ldr	r3, [pc, #136]	@ (8003f90 <HAL_ADC_Init+0x320>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d10c      	bne.n	8003f34 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f20:	f023 010f 	bic.w	r1, r3, #15
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	1e5a      	subs	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f32:	e007      	b.n	8003f44 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 020f 	bic.w	r2, r2, #15
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	f023 0303 	bic.w	r3, r3, #3
 8003f52:	f043 0201 	orr.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f5a:	e00a      	b.n	8003f72 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	f023 0312 	bic.w	r3, r3, #18
 8003f64:	f043 0210 	orr.w	r2, r3, #16
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003f72:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3768      	adds	r7, #104	@ 0x68
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000000 	.word	0x20000000
 8003f84:	431bde83 	.word	0x431bde83
 8003f88:	50000300 	.word	0x50000300
 8003f8c:	50000100 	.word	0x50000100
 8003f90:	fff0c007 	.word	0xfff0c007

08003f94 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f040 809c 	bne.w	80040e8 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_ADC_Start+0x2a>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e097      	b.n	80040ee <HAL_ADC_Start+0x15a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fda8 	bl	8004b1c <ADC_Enable>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 8083 	bne.w	80040de <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fdc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003fec:	4b42      	ldr	r3, [pc, #264]	@ (80040f8 <HAL_ADC_Start+0x164>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d004      	beq.n	8004002 <HAL_ADC_Start+0x6e>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004000:	d115      	bne.n	800402e <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d027      	beq.n	800406c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004020:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004024:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800402c:	e01e      	b.n	800406c <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004042:	d004      	beq.n	800404e <HAL_ADC_Start+0xba>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a2c      	ldr	r2, [pc, #176]	@ (80040fc <HAL_ADC_Start+0x168>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d10e      	bne.n	800406c <HAL_ADC_Start+0xd8>
 800404e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004060:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004064:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004070:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004078:	d106      	bne.n	8004088 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407e:	f023 0206 	bic.w	r2, r3, #6
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	645a      	str	r2, [r3, #68]	@ 0x44
 8004086:	e002      	b.n	800408e <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	221c      	movs	r2, #28
 800409c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800409e:	4b16      	ldr	r3, [pc, #88]	@ (80040f8 <HAL_ADC_Start+0x164>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d010      	beq.n	80040cc <HAL_ADC_Start+0x138>
 80040aa:	4b13      	ldr	r3, [pc, #76]	@ (80040f8 <HAL_ADC_Start+0x164>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	2b05      	cmp	r3, #5
 80040b4:	d00a      	beq.n	80040cc <HAL_ADC_Start+0x138>
 80040b6:	4b10      	ldr	r3, [pc, #64]	@ (80040f8 <HAL_ADC_Start+0x164>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	2b09      	cmp	r3, #9
 80040c0:	d004      	beq.n	80040cc <HAL_ADC_Start+0x138>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040ca:	d10f      	bne.n	80040ec <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0204 	orr.w	r2, r2, #4
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	e006      	b.n	80040ec <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80040e6:	e001      	b.n	80040ec <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80040e8:	2302      	movs	r3, #2
 80040ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	50000300 	.word	0x50000300
 80040fc:	50000100 	.word	0x50000100

08004100 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_ADCEx_Calibration_Start+0x1c>
 8004118:	2302      	movs	r3, #2
 800411a:	e05f      	b.n	80041dc <HAL_ADCEx_Calibration_Start+0xdc>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fd5d 	bl	8004be4 <ADC_Disable>
 800412a:	4603      	mov	r3, r0
 800412c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d14e      	bne.n	80041d2 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8004148:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d107      	bne.n	8004160 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800415e:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800416e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8004170:	f7ff fd5e 	bl	8003c30 <HAL_GetTick>
 8004174:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004176:	e01c      	b.n	80041b2 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004178:	f7ff fd5a 	bl	8003c30 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b0a      	cmp	r3, #10
 8004184:	d915      	bls.n	80041b2 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004190:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004194:	d10d      	bne.n	80041b2 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419a:	f023 0312 	bic.w	r3, r3, #18
 800419e:	f043 0210 	orr.w	r2, r3, #16
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e014      	b.n	80041dc <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041c0:	d0da      	beq.n	8004178 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	f023 0303 	bic.w	r3, r3, #3
 80041ca:	f043 0201 	orr.w	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b09a      	sub	sp, #104	@ 0x68
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_HandleTypeDef tmphadcSlave = {0};
 80041f6:	f107 0310 	add.w	r3, r7, #16
 80041fa:	2250      	movs	r2, #80	@ 0x50
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f004 fd16 	bl	8008c30 <memset>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800420e:	2302      	movs	r3, #2
 8004210:	e08a      	b.n	8004328 <HAL_ADCEx_MultiModeStart_DMA+0x144>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Perform ADC enable and conversion start if no conversion is on going */
  /* (check on ADC master only) */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d17a      	bne.n	800431e <HAL_ADCEx_MultiModeStart_DMA+0x13a>
  {
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    /* (Depending on STM32F3 product, there may be up to 2 ADC slaves)        */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004230:	d101      	bne.n	8004236 <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8004232:	4b3f      	ldr	r3, [pc, #252]	@ (8004330 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8004234:	613b      	str	r3, [r7, #16]
    
    if (tmphadcSlave.Instance == NULL)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004240:	f043 0220 	orr.w	r2, r3, #32
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e069      	b.n	8004328 <HAL_ADCEx_MultiModeStart_DMA+0x144>
    }
    
    
    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fc61 	bl	8004b1c <ADC_Enable>
 800425a:	4603      	mov	r3, r0
 800425c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (tmp_hal_status == HAL_OK)
 8004260:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004264:	2b00      	cmp	r3, #0
 8004266:	d107      	bne.n	8004278 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8004268:	f107 0310 	add.w	r3, r7, #16
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fc55 	bl	8004b1c <ADC_Enable>
 8004272:	4603      	mov	r3, r0
 8004274:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    }
    
    /* Start conversion all ADCs of multimode are effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004278:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800427c:	2b00      	cmp	r3, #0
 800427e:	d149      	bne.n	8004314 <HAL_ADCEx_MultiModeStart_DMA+0x130>
    {
      /* Set ADC state (ADC master)                                           */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004284:	4b2b      	ldr	r3, [pc, #172]	@ (8004334 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8004286:	4013      	ands	r3, r2
 8004288:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP | HAL_ADC_STATE_MULTIMODE_SLAVE,
                        HAL_ADC_STATE_REG_BUSY);
        
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <HAL_ADCEx_MultiModeStart_DMA+0xca>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80042a6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	645a      	str	r2, [r3, #68]	@ 0x44
      
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004338 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 80042c2:	629a      	str	r2, [r3, #40]	@ 0x28
         
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c8:	4a1c      	ldr	r2, [pc, #112]	@ (800433c <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 80042ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004340 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 80042d2:	631a      	str	r2, [r3, #48]	@ 0x30
      
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004344 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 80042d6:	663b      	str	r3, [r7, #96]	@ 0x60
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	221c      	movs	r2, #28
 80042de:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0210 	orr.w	r2, r2, #16
 80042ee:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80042f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042f6:	330c      	adds	r3, #12
 80042f8:	4619      	mov	r1, r3
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f000 fe2f 	bl	8004f60 <HAL_DMA_Start_IT>
          
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0204 	orr.w	r2, r2, #4
 8004310:	609a      	str	r2, [r3, #8]
 8004312:	e007      	b.n	8004324 <HAL_ADCEx_MultiModeStart_DMA+0x140>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800431c:	e002      	b.n	8004324 <HAL_ADCEx_MultiModeStart_DMA+0x140>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800431e:	2302      	movs	r3, #2
 8004320:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004324:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8004328:	4618      	mov	r0, r3
 800432a:	3768      	adds	r7, #104	@ 0x68
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	50000100 	.word	0x50000100
 8004334:	ffeff0fe 	.word	0xffeff0fe
 8004338:	08004a51 	.word	0x08004a51
 800433c:	08004acb 	.word	0x08004acb
 8004340:	08004ae7 	.word	0x08004ae7
 8004344:	50000300 	.word	0x50000300

08004348 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004348:	b480      	push	{r7}
 800434a:	b09b      	sub	sp, #108	@ 0x6c
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_ADC_ConfigChannel+0x22>
 8004366:	2302      	movs	r3, #2
 8004368:	e2a1      	b.n	80048ae <HAL_ADC_ConfigChannel+0x566>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	f040 8285 	bne.w	800488c <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b04      	cmp	r3, #4
 8004388:	d81c      	bhi.n	80043c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	4413      	add	r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	461a      	mov	r2, r3
 800439e:	231f      	movs	r3, #31
 80043a0:	4093      	lsls	r3, r2
 80043a2:	43db      	mvns	r3, r3
 80043a4:	4019      	ands	r1, r3
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	4413      	add	r3, r2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fa00 f203 	lsl.w	r2, r0, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80043c2:	e063      	b.n	800448c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b09      	cmp	r3, #9
 80043ca:	d81e      	bhi.n	800440a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	3b1e      	subs	r3, #30
 80043e0:	221f      	movs	r2, #31
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	43db      	mvns	r3, r3
 80043e8:	4019      	ands	r1, r3
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	4413      	add	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	3b1e      	subs	r3, #30
 80043fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	635a      	str	r2, [r3, #52]	@ 0x34
 8004408:	e040      	b.n	800448c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b0e      	cmp	r3, #14
 8004410:	d81e      	bhi.n	8004450 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	3b3c      	subs	r3, #60	@ 0x3c
 8004426:	221f      	movs	r2, #31
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	4019      	ands	r1, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4413      	add	r3, r2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	3b3c      	subs	r3, #60	@ 0x3c
 8004442:	fa00 f203 	lsl.w	r2, r0, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	639a      	str	r2, [r3, #56]	@ 0x38
 800444e:	e01d      	b.n	800448c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4413      	add	r3, r2
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	3b5a      	subs	r3, #90	@ 0x5a
 8004464:	221f      	movs	r2, #31
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43db      	mvns	r3, r3
 800446c:	4019      	ands	r1, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	4413      	add	r3, r2
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	3b5a      	subs	r3, #90	@ 0x5a
 8004480:	fa00 f203 	lsl.w	r2, r0, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	2b00      	cmp	r3, #0
 8004498:	f040 80e5 	bne.w	8004666 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b09      	cmp	r3, #9
 80044a2:	d91c      	bls.n	80044de <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6999      	ldr	r1, [r3, #24]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	4613      	mov	r3, r2
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	4413      	add	r3, r2
 80044b4:	3b1e      	subs	r3, #30
 80044b6:	2207      	movs	r2, #7
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	4019      	ands	r1, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	6898      	ldr	r0, [r3, #8]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	4613      	mov	r3, r2
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	4413      	add	r3, r2
 80044ce:	3b1e      	subs	r3, #30
 80044d0:	fa00 f203 	lsl.w	r2, r0, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	619a      	str	r2, [r3, #24]
 80044dc:	e019      	b.n	8004512 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6959      	ldr	r1, [r3, #20]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4413      	add	r3, r2
 80044ee:	2207      	movs	r2, #7
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	43db      	mvns	r3, r3
 80044f6:	4019      	ands	r1, r3
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	6898      	ldr	r0, [r3, #8]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4613      	mov	r3, r2
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	4413      	add	r3, r2
 8004506:	fa00 f203 	lsl.w	r2, r0, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695a      	ldr	r2, [r3, #20]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	08db      	lsrs	r3, r3, #3
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	3b01      	subs	r3, #1
 8004530:	2b03      	cmp	r3, #3
 8004532:	d84f      	bhi.n	80045d4 <HAL_ADC_ConfigChannel+0x28c>
 8004534:	a201      	add	r2, pc, #4	@ (adr r2, 800453c <HAL_ADC_ConfigChannel+0x1f4>)
 8004536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453a:	bf00      	nop
 800453c:	0800454d 	.word	0x0800454d
 8004540:	0800456f 	.word	0x0800456f
 8004544:	08004591 	.word	0x08004591
 8004548:	080045b3 	.word	0x080045b3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004552:	4b9c      	ldr	r3, [pc, #624]	@ (80047c4 <HAL_ADC_ConfigChannel+0x47c>)
 8004554:	4013      	ands	r3, r2
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	6812      	ldr	r2, [r2, #0]
 800455a:	0691      	lsls	r1, r2, #26
 800455c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800455e:	430a      	orrs	r2, r1
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800456a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800456c:	e07b      	b.n	8004666 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004574:	4b93      	ldr	r3, [pc, #588]	@ (80047c4 <HAL_ADC_ConfigChannel+0x47c>)
 8004576:	4013      	ands	r3, r2
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	0691      	lsls	r1, r2, #26
 800457e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004580:	430a      	orrs	r2, r1
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800458c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800458e:	e06a      	b.n	8004666 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004596:	4b8b      	ldr	r3, [pc, #556]	@ (80047c4 <HAL_ADC_ConfigChannel+0x47c>)
 8004598:	4013      	ands	r3, r2
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	0691      	lsls	r1, r2, #26
 80045a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80045a2:	430a      	orrs	r2, r1
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80045ae:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80045b0:	e059      	b.n	8004666 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80045b8:	4b82      	ldr	r3, [pc, #520]	@ (80047c4 <HAL_ADC_ConfigChannel+0x47c>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	0691      	lsls	r1, r2, #26
 80045c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80045c4:	430a      	orrs	r2, r1
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80045d0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80045d2:	e048      	b.n	8004666 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	069b      	lsls	r3, r3, #26
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d107      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80045f6:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	069b      	lsls	r3, r3, #26
 8004608:	429a      	cmp	r2, r3
 800460a:	d107      	bne.n	800461c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800461a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004622:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	069b      	lsls	r3, r3, #26
 800462c:	429a      	cmp	r2, r3
 800462e:	d107      	bne.n	8004640 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800463e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004646:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	069b      	lsls	r3, r3, #26
 8004650:	429a      	cmp	r2, r3
 8004652:	d107      	bne.n	8004664 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004662:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8004664:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d108      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x33e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x33e>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <HAL_ADC_ConfigChannel+0x340>
 8004686:	2300      	movs	r3, #0
 8004688:	2b00      	cmp	r3, #0
 800468a:	f040 810a 	bne.w	80048a2 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d00f      	beq.n	80046b6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2201      	movs	r2, #1
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	43da      	mvns	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	400a      	ands	r2, r1
 80046b0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80046b4:	e049      	b.n	800474a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2201      	movs	r2, #1
 80046c4:	409a      	lsls	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b09      	cmp	r3, #9
 80046d6:	d91c      	bls.n	8004712 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6999      	ldr	r1, [r3, #24]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4613      	mov	r3, r2
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	4413      	add	r3, r2
 80046e8:	3b1b      	subs	r3, #27
 80046ea:	2207      	movs	r2, #7
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	4019      	ands	r1, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6898      	ldr	r0, [r3, #8]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4613      	mov	r3, r2
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	4413      	add	r3, r2
 8004702:	3b1b      	subs	r3, #27
 8004704:	fa00 f203 	lsl.w	r2, r0, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	619a      	str	r2, [r3, #24]
 8004710:	e01b      	b.n	800474a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6959      	ldr	r1, [r3, #20]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	4613      	mov	r3, r2
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	4413      	add	r3, r2
 8004724:	2207      	movs	r2, #7
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43db      	mvns	r3, r3
 800472c:	4019      	ands	r1, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6898      	ldr	r0, [r3, #8]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	4613      	mov	r3, r2
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	4413      	add	r3, r2
 800473e:	fa00 f203 	lsl.w	r2, r0, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800474a:	4b1f      	ldr	r3, [pc, #124]	@ (80047c8 <HAL_ADC_ConfigChannel+0x480>)
 800474c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b10      	cmp	r3, #16
 8004754:	d105      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800475e:	2b00      	cmp	r3, #0
 8004760:	d015      	beq.n	800478e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004766:	2b11      	cmp	r3, #17
 8004768:	d105      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800476a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00b      	beq.n	800478e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800477a:	2b12      	cmp	r3, #18
 800477c:	f040 8091 	bne.w	80048a2 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004780:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004788:	2b00      	cmp	r3, #0
 800478a:	f040 808a 	bne.w	80048a2 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004796:	d102      	bne.n	800479e <HAL_ADC_ConfigChannel+0x456>
 8004798:	4b0c      	ldr	r3, [pc, #48]	@ (80047cc <HAL_ADC_ConfigChannel+0x484>)
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	e002      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x45c>
 800479e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80047a2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d10e      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x488>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d107      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x488>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e006      	b.n	80047d2 <HAL_ADC_ConfigChannel+0x48a>
 80047c4:	83fff000 	.word	0x83fff000
 80047c8:	50000300 	.word	0x50000300
 80047cc:	50000100 	.word	0x50000100
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d150      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80047d6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d010      	beq.n	80047fe <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d107      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x4b0>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x4b0>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <HAL_ADC_ConfigChannel+0x4b2>
 80047f8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d13c      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b10      	cmp	r3, #16
 8004804:	d11d      	bne.n	8004842 <HAL_ADC_ConfigChannel+0x4fa>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800480e:	d118      	bne.n	8004842 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004810:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004818:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800481a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800481c:	4b27      	ldr	r3, [pc, #156]	@ (80048bc <HAL_ADC_ConfigChannel+0x574>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a27      	ldr	r2, [pc, #156]	@ (80048c0 <HAL_ADC_ConfigChannel+0x578>)
 8004822:	fba2 2303 	umull	r2, r3, r2, r3
 8004826:	0c9a      	lsrs	r2, r3, #18
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004832:	e002      	b.n	800483a <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	3b01      	subs	r3, #1
 8004838:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1f9      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004840:	e02e      	b.n	80048a0 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b11      	cmp	r3, #17
 8004848:	d10b      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x51a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004852:	d106      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004854:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800485c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800485e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004860:	e01e      	b.n	80048a0 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b12      	cmp	r3, #18
 8004868:	d11a      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800486a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004874:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004876:	e013      	b.n	80048a0 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487c:	f043 0220 	orr.w	r2, r3, #32
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800488a:	e00a      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004890:	f043 0220 	orr.w	r2, r3, #32
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800489e:	e000      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80048a0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80048aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	376c      	adds	r7, #108	@ 0x6c
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	20000000 	.word	0x20000000
 80048c0:	431bde83 	.word	0x431bde83

080048c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b099      	sub	sp, #100	@ 0x64
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048dc:	d102      	bne.n	80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80048de:	4b5a      	ldr	r3, [pc, #360]	@ (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80048e0:	60bb      	str	r3, [r7, #8]
 80048e2:	e002      	b.n	80048ea <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80048e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80048e8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e0a2      	b.n	8004a3a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80048fe:	2302      	movs	r3, #2
 8004900:	e09b      	b.n	8004a3a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d17f      	bne.n	8004a18 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d179      	bne.n	8004a18 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004924:	4b49      	ldr	r3, [pc, #292]	@ (8004a4c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8004926:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d040      	beq.n	80049b2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004930:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004942:	035b      	lsls	r3, r3, #13
 8004944:	430b      	orrs	r3, r1
 8004946:	431a      	orrs	r2, r3
 8004948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800494a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b01      	cmp	r3, #1
 8004958:	d108      	bne.n	800496c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800496c:	2300      	movs	r3, #0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d15c      	bne.n	8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b01      	cmp	r3, #1
 800497c:	d107      	bne.n	800498e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800498e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004990:	2b00      	cmp	r3, #0
 8004992:	d14b      	bne.n	8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004994:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800499c:	f023 030f 	bic.w	r3, r3, #15
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	6811      	ldr	r1, [r2, #0]
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	6892      	ldr	r2, [r2, #8]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	431a      	orrs	r2, r3
 80049ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049ae:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80049b0:	e03c      	b.n	8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049bc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d108      	bne.n	80049de <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d123      	bne.n	8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d107      	bne.n	8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004a00:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d112      	bne.n	8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004a06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a0e:	f023 030f 	bic.w	r3, r3, #15
 8004a12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a14:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a16:	e009      	b.n	8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1c:	f043 0220 	orr.w	r2, r3, #32
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004a2a:	e000      	b.n	8004a2e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a2c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004a36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3764      	adds	r7, #100	@ 0x64
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	50000100 	.word	0x50000100
 8004a4c:	50000300 	.word	0x50000300

08004a50 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d126      	bne.n	8004ab8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d115      	bne.n	8004ab0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d111      	bne.n	8004ab0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa8:	f043 0201 	orr.w	r2, r3, #1
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff f8c9 	bl	8003c48 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004ab6:	e004      	b.n	8004ac2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	4798      	blx	r3
}
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7fc ff0d 	bl	80018f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b04:	f043 0204 	orr.w	r2, r3, #4
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7ff f8a5 	bl	8003c5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b12:	bf00      	nop
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d108      	bne.n	8004b48 <ADC_Enable+0x2c>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <ADC_Enable+0x2c>
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <ADC_Enable+0x2e>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d143      	bne.n	8004bd6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	4b22      	ldr	r3, [pc, #136]	@ (8004be0 <ADC_Enable+0xc4>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00d      	beq.n	8004b78 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b60:	f043 0210 	orr.w	r2, r3, #16
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6c:	f043 0201 	orr.w	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e02f      	b.n	8004bd8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004b88:	f7ff f852 	bl	8003c30 <HAL_GetTick>
 8004b8c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b8e:	e01b      	b.n	8004bc8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b90:	f7ff f84e 	bl	8003c30 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d914      	bls.n	8004bc8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d00d      	beq.n	8004bc8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb0:	f043 0210 	orr.w	r2, r3, #16
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bbc:	f043 0201 	orr.w	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e007      	b.n	8004bd8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d1dc      	bne.n	8004b90 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	8000003f 	.word	0x8000003f

08004be4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d108      	bne.n	8004c10 <ADC_Disable+0x2c>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <ADC_Disable+0x2c>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <ADC_Disable+0x2e>
 8004c10:	2300      	movs	r3, #0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d047      	beq.n	8004ca6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030d 	and.w	r3, r3, #13
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d10f      	bne.n	8004c44 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0202 	orr.w	r2, r2, #2
 8004c32:	609a      	str	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2203      	movs	r2, #3
 8004c3a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004c3c:	f7fe fff8 	bl	8003c30 <HAL_GetTick>
 8004c40:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c42:	e029      	b.n	8004c98 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c48:	f043 0210 	orr.w	r2, r3, #16
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c54:	f043 0201 	orr.w	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e023      	b.n	8004ca8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c60:	f7fe ffe6 	bl	8003c30 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d914      	bls.n	8004c98 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d10d      	bne.n	8004c98 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	f043 0210 	orr.w	r2, r3, #16
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8c:	f043 0201 	orr.w	r2, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e007      	b.n	8004ca8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d0dc      	beq.n	8004c60 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ce2:	4a04      	ldr	r2, [pc, #16]	@ (8004cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	60d3      	str	r3, [r2, #12]
}
 8004ce8:	bf00      	nop
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	e000ed00 	.word	0xe000ed00

08004cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cfc:	4b04      	ldr	r3, [pc, #16]	@ (8004d10 <__NVIC_GetPriorityGrouping+0x18>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	0a1b      	lsrs	r3, r3, #8
 8004d02:	f003 0307 	and.w	r3, r3, #7
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	e000ed00 	.word	0xe000ed00

08004d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	db0b      	blt.n	8004d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	f003 021f 	and.w	r2, r3, #31
 8004d2c:	4907      	ldr	r1, [pc, #28]	@ (8004d4c <__NVIC_EnableIRQ+0x38>)
 8004d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	2001      	movs	r0, #1
 8004d36:	fa00 f202 	lsl.w	r2, r0, r2
 8004d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	e000e100 	.word	0xe000e100

08004d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	6039      	str	r1, [r7, #0]
 8004d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	db0a      	blt.n	8004d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	490c      	ldr	r1, [pc, #48]	@ (8004d9c <__NVIC_SetPriority+0x4c>)
 8004d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6e:	0112      	lsls	r2, r2, #4
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	440b      	add	r3, r1
 8004d74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d78:	e00a      	b.n	8004d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	4908      	ldr	r1, [pc, #32]	@ (8004da0 <__NVIC_SetPriority+0x50>)
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	3b04      	subs	r3, #4
 8004d88:	0112      	lsls	r2, r2, #4
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	761a      	strb	r2, [r3, #24]
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	e000e100 	.word	0xe000e100
 8004da0:	e000ed00 	.word	0xe000ed00

08004da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b089      	sub	sp, #36	@ 0x24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f1c3 0307 	rsb	r3, r3, #7
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	bf28      	it	cs
 8004dc2:	2304      	movcs	r3, #4
 8004dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	2b06      	cmp	r3, #6
 8004dcc:	d902      	bls.n	8004dd4 <NVIC_EncodePriority+0x30>
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	3b03      	subs	r3, #3
 8004dd2:	e000      	b.n	8004dd6 <NVIC_EncodePriority+0x32>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	43da      	mvns	r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	401a      	ands	r2, r3
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dec:	f04f 31ff 	mov.w	r1, #4294967295
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	fa01 f303 	lsl.w	r3, r1, r3
 8004df6:	43d9      	mvns	r1, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dfc:	4313      	orrs	r3, r2
         );
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3724      	adds	r7, #36	@ 0x24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e1c:	d301      	bcc.n	8004e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e00f      	b.n	8004e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e22:	4a0a      	ldr	r2, [pc, #40]	@ (8004e4c <SysTick_Config+0x40>)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e2a:	210f      	movs	r1, #15
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	f7ff ff8e 	bl	8004d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e34:	4b05      	ldr	r3, [pc, #20]	@ (8004e4c <SysTick_Config+0x40>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e3a:	4b04      	ldr	r3, [pc, #16]	@ (8004e4c <SysTick_Config+0x40>)
 8004e3c:	2207      	movs	r2, #7
 8004e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	e000e010 	.word	0xe000e010

08004e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff ff29 	bl	8004cb0 <__NVIC_SetPriorityGrouping>
}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b086      	sub	sp, #24
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
 8004e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e78:	f7ff ff3e 	bl	8004cf8 <__NVIC_GetPriorityGrouping>
 8004e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	6978      	ldr	r0, [r7, #20]
 8004e84:	f7ff ff8e 	bl	8004da4 <NVIC_EncodePriority>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff ff5d 	bl	8004d50 <__NVIC_SetPriority>
}
 8004e96:	bf00      	nop
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff ff31 	bl	8004d14 <__NVIC_EnableIRQ>
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff ffa2 	bl	8004e0c <SysTick_Config>
 8004ec8:	4603      	mov	r3, r0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e037      	b.n	8004f58 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004efe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004f02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f940 	bl	80051c0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}  
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_DMA_Start_IT+0x20>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e04a      	b.n	8005016 <HAL_DMA_Start_IT+0xb6>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d13a      	bne.n	8005008 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2202      	movs	r2, #2
 8004f96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	68b9      	ldr	r1, [r7, #8]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f8d4 	bl	8005164 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d008      	beq.n	8004fd6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 020e 	orr.w	r2, r2, #14
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e00f      	b.n	8004ff6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 020a 	orr.w	r2, r2, #10
 8004fe4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0204 	bic.w	r2, r2, #4
 8004ff4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0201 	orr.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	e005      	b.n	8005014 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005010:	2302      	movs	r3, #2
 8005012:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005014:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503a:	2204      	movs	r2, #4
 800503c:	409a      	lsls	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4013      	ands	r3, r2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d024      	beq.n	8005090 <HAL_DMA_IRQHandler+0x72>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01f      	beq.n	8005090 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d107      	bne.n	800506e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0204 	bic.w	r2, r2, #4
 800506c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005076:	2104      	movs	r1, #4
 8005078:	fa01 f202 	lsl.w	r2, r1, r2
 800507c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d06a      	beq.n	800515c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800508e:	e065      	b.n	800515c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005094:	2202      	movs	r2, #2
 8005096:	409a      	lsls	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4013      	ands	r3, r2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d02c      	beq.n	80050fa <HAL_DMA_IRQHandler+0xdc>
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d027      	beq.n	80050fa <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0320 	and.w	r3, r3, #32
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10b      	bne.n	80050d0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 020a 	bic.w	r2, r2, #10
 80050c6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d8:	2102      	movs	r1, #2
 80050da:	fa01 f202 	lsl.w	r2, r1, r2
 80050de:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d035      	beq.n	800515c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80050f8:	e030      	b.n	800515c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fe:	2208      	movs	r2, #8
 8005100:	409a      	lsls	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d028      	beq.n	800515c <HAL_DMA_IRQHandler+0x13e>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b00      	cmp	r3, #0
 8005112:	d023      	beq.n	800515c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 020e 	bic.w	r2, r2, #14
 8005122:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512c:	2101      	movs	r1, #1
 800512e:	fa01 f202 	lsl.w	r2, r1, r2
 8005132:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514e:	2b00      	cmp	r3, #0
 8005150:	d004      	beq.n	800515c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	4798      	blx	r3
    }
  }
}  
 800515a:	e7ff      	b.n	800515c <HAL_DMA_IRQHandler+0x13e>
 800515c:	bf00      	nop
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517a:	2101      	movs	r1, #1
 800517c:	fa01 f202 	lsl.w	r2, r1, r2
 8005180:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b10      	cmp	r3, #16
 8005190:	d108      	bne.n	80051a4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80051a2:	e007      	b.n	80051b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	60da      	str	r2, [r3, #12]
}
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	4b09      	ldr	r3, [pc, #36]	@ (80051f4 <DMA_CalcBaseAndBitshift+0x34>)
 80051d0:	4413      	add	r3, r2
 80051d2:	4a09      	ldr	r2, [pc, #36]	@ (80051f8 <DMA_CalcBaseAndBitshift+0x38>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	009a      	lsls	r2, r3, #2
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a06      	ldr	r2, [pc, #24]	@ (80051fc <DMA_CalcBaseAndBitshift+0x3c>)
 80051e4:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	bffdfff8 	.word	0xbffdfff8
 80051f8:	cccccccd 	.word	0xcccccccd
 80051fc:	40020000 	.word	0x40020000

08005200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800520e:	e14e      	b.n	80054ae <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	2101      	movs	r1, #1
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	fa01 f303 	lsl.w	r3, r1, r3
 800521c:	4013      	ands	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8140 	beq.w	80054a8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d005      	beq.n	8005240 <HAL_GPIO_Init+0x40>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d130      	bne.n	80052a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	2203      	movs	r2, #3
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	43db      	mvns	r3, r3
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4013      	ands	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005276:	2201      	movs	r2, #1
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4013      	ands	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	f003 0201 	and.w	r2, r3, #1
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	fa02 f303 	lsl.w	r3, r2, r3
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d017      	beq.n	80052de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	2203      	movs	r2, #3
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	43db      	mvns	r3, r3
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4013      	ands	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	fa02 f303 	lsl.w	r3, r2, r3
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d123      	bne.n	8005332 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	08da      	lsrs	r2, r3, #3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3208      	adds	r2, #8
 80052f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	220f      	movs	r2, #15
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	4013      	ands	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	691a      	ldr	r2, [r3, #16]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	08da      	lsrs	r2, r3, #3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3208      	adds	r2, #8
 800532c:	6939      	ldr	r1, [r7, #16]
 800532e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	2203      	movs	r2, #3
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	43db      	mvns	r3, r3
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4013      	ands	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f003 0203 	and.w	r2, r3, #3
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 809a 	beq.w	80054a8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005374:	4b55      	ldr	r3, [pc, #340]	@ (80054cc <HAL_GPIO_Init+0x2cc>)
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	4a54      	ldr	r2, [pc, #336]	@ (80054cc <HAL_GPIO_Init+0x2cc>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	6193      	str	r3, [r2, #24]
 8005380:	4b52      	ldr	r3, [pc, #328]	@ (80054cc <HAL_GPIO_Init+0x2cc>)
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800538c:	4a50      	ldr	r2, [pc, #320]	@ (80054d0 <HAL_GPIO_Init+0x2d0>)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	089b      	lsrs	r3, r3, #2
 8005392:	3302      	adds	r3, #2
 8005394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005398:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	220f      	movs	r2, #15
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	43db      	mvns	r3, r3
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4013      	ands	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80053b6:	d013      	beq.n	80053e0 <HAL_GPIO_Init+0x1e0>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a46      	ldr	r2, [pc, #280]	@ (80054d4 <HAL_GPIO_Init+0x2d4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00d      	beq.n	80053dc <HAL_GPIO_Init+0x1dc>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a45      	ldr	r2, [pc, #276]	@ (80054d8 <HAL_GPIO_Init+0x2d8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d007      	beq.n	80053d8 <HAL_GPIO_Init+0x1d8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a44      	ldr	r2, [pc, #272]	@ (80054dc <HAL_GPIO_Init+0x2dc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d101      	bne.n	80053d4 <HAL_GPIO_Init+0x1d4>
 80053d0:	2303      	movs	r3, #3
 80053d2:	e006      	b.n	80053e2 <HAL_GPIO_Init+0x1e2>
 80053d4:	2305      	movs	r3, #5
 80053d6:	e004      	b.n	80053e2 <HAL_GPIO_Init+0x1e2>
 80053d8:	2302      	movs	r3, #2
 80053da:	e002      	b.n	80053e2 <HAL_GPIO_Init+0x1e2>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <HAL_GPIO_Init+0x1e2>
 80053e0:	2300      	movs	r3, #0
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	f002 0203 	and.w	r2, r2, #3
 80053e8:	0092      	lsls	r2, r2, #2
 80053ea:	4093      	lsls	r3, r2
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80053f2:	4937      	ldr	r1, [pc, #220]	@ (80054d0 <HAL_GPIO_Init+0x2d0>)
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	089b      	lsrs	r3, r3, #2
 80053f8:	3302      	adds	r3, #2
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005400:	4b37      	ldr	r3, [pc, #220]	@ (80054e0 <HAL_GPIO_Init+0x2e0>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	43db      	mvns	r3, r3
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4013      	ands	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005424:	4a2e      	ldr	r2, [pc, #184]	@ (80054e0 <HAL_GPIO_Init+0x2e0>)
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800542a:	4b2d      	ldr	r3, [pc, #180]	@ (80054e0 <HAL_GPIO_Init+0x2e0>)
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	43db      	mvns	r3, r3
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4013      	ands	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800544e:	4a24      	ldr	r2, [pc, #144]	@ (80054e0 <HAL_GPIO_Init+0x2e0>)
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005454:	4b22      	ldr	r3, [pc, #136]	@ (80054e0 <HAL_GPIO_Init+0x2e0>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	43db      	mvns	r3, r3
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4013      	ands	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4313      	orrs	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005478:	4a19      	ldr	r2, [pc, #100]	@ (80054e0 <HAL_GPIO_Init+0x2e0>)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800547e:	4b18      	ldr	r3, [pc, #96]	@ (80054e0 <HAL_GPIO_Init+0x2e0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	43db      	mvns	r3, r3
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4013      	ands	r3, r2
 800548c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80054a2:	4a0f      	ldr	r2, [pc, #60]	@ (80054e0 <HAL_GPIO_Init+0x2e0>)
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	3301      	adds	r3, #1
 80054ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f47f aea9 	bne.w	8005210 <HAL_GPIO_Init+0x10>
  }
}
 80054be:	bf00      	nop
 80054c0:	bf00      	nop
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	40021000 	.word	0x40021000
 80054d0:	40010000 	.word	0x40010000
 80054d4:	48000400 	.word	0x48000400
 80054d8:	48000800 	.word	0x48000800
 80054dc:	48000c00 	.word	0x48000c00
 80054e0:	40010400 	.word	0x40010400

080054e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	807b      	strh	r3, [r7, #2]
 80054f0:	4613      	mov	r3, r2
 80054f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054f4:	787b      	ldrb	r3, [r7, #1]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054fa:	887a      	ldrh	r2, [r7, #2]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005500:	e002      	b.n	8005508 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005502:	887a      	ldrh	r2, [r7, #2]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005526:	887a      	ldrh	r2, [r7, #2]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4013      	ands	r3, r2
 800552c:	041a      	lsls	r2, r3, #16
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	43d9      	mvns	r1, r3
 8005532:	887b      	ldrh	r3, [r7, #2]
 8005534:	400b      	ands	r3, r1
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	619a      	str	r2, [r3, #24]
}
 800553c:	bf00      	nop
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e0ba      	b.n	80056d0 <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2202      	movs	r2, #2
 800555e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d02e      	beq.n	80055fc <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a4d      	ldr	r2, [pc, #308]	@ (80056d8 <HAL_HRTIM_Init+0x190>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d10b      	bne.n	80055c0 <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80055a8:	4b4c      	ldr	r3, [pc, #304]	@ (80056dc <HAL_HRTIM_Init+0x194>)
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	4a4b      	ldr	r2, [pc, #300]	@ (80056dc <HAL_HRTIM_Init+0x194>)
 80055ae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80055b2:	6193      	str	r3, [r2, #24]
 80055b4:	4b49      	ldr	r3, [pc, #292]	@ (80056dc <HAL_HRTIM_Init+0x194>)
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80055ce:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80055e4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7fc fc3f 	bl	8001e80 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d012      	beq.n	8005634 <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800561c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005644:	2300      	movs	r3, #0
 8005646:	75fb      	strb	r3, [r7, #23]
 8005648:	e03e      	b.n	80056c8 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800564a:	7dfa      	ldrb	r2, [r7, #23]
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	4613      	mov	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	1a9b      	subs	r3, r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	3318      	adds	r3, #24
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800565e:	7dfa      	ldrb	r2, [r7, #23]
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	4613      	mov	r3, r2
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	1a9b      	subs	r3, r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	440b      	add	r3, r1
 800566c:	331c      	adds	r3, #28
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8005672:	7dfa      	ldrb	r2, [r7, #23]
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4613      	mov	r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	1a9b      	subs	r3, r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	440b      	add	r3, r1
 8005680:	3320      	adds	r3, #32
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8005686:	7dfa      	ldrb	r2, [r7, #23]
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	4613      	mov	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	1a9b      	subs	r3, r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	3324      	adds	r3, #36	@ 0x24
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800569a:	7dfa      	ldrb	r2, [r7, #23]
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	3328      	adds	r3, #40	@ 0x28
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80056ae:	7dfa      	ldrb	r2, [r7, #23]
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	3330      	adds	r3, #48	@ 0x30
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
 80056c4:	3301      	adds	r3, #1
 80056c6:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
 80056ca:	2b05      	cmp	r3, #5
 80056cc:	d9bd      	bls.n	800564a <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40017400 	.word	0x40017400
 80056dc:	40021000 	.word	0x40021000

080056e0 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_HRTIM_DLLCalibrationStart+0x18>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e045      	b.n	8005784 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570e:	d114      	bne.n	800573a <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0202 	bic.w	r2, r2, #2
 8005720:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0201 	orr.w	r2, r2, #1
 8005734:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8005738:	e01f      	b.n	800577a <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0202 	orr.w	r2, r2, #2
 800574a:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005756:	f023 010c 	bic.w	r1, r3, #12
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 800579a:	f7fe fa49 	bl	8003c30 <HAL_GetTick>
 800579e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80057a0:	e014      	b.n	80057cc <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d010      	beq.n	80057cc <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80057aa:	f7fe fa41 	bl	8003c30 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d302      	bcc.n	80057c0 <HAL_HRTIM_PollForDLLCalibration+0x30>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d105      	bne.n	80057cc <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2207      	movs	r2, #7
 80057c4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
        return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e011      	b.n	80057f0 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80057d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057dc:	d1e1      	bne.n	80057a2 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d101      	bne.n	8005814 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8005810:	2302      	movs	r3, #2
 8005812:	e015      	b.n	8005840 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b05      	cmp	r3, #5
 8005820:	d104      	bne.n	800582c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 fad1 	bl	8005dcc <HRTIM_MasterBase_Config>
 800582a:	e004      	b.n	8005836 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 fafa 	bl	8005e2a <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d101      	bne.n	8005864 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8005860:	2302      	movs	r3, #2
 8005862:	e05f      	b.n	8005924 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800586e:	2302      	movs	r3, #2
 8005870:	e058      	b.n	8005924 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2202      	movs	r2, #2
 800587e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b05      	cmp	r3, #5
 8005886:	d104      	bne.n	8005892 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 fb0d 	bl	8005eaa <HRTIM_MasterWaveform_Config>
 8005890:	e004      	b.n	800589c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 fb6e 	bl	8005f78 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6819      	ldr	r1, [r3, #0]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	4613      	mov	r3, r2
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4403      	add	r3, r0
 80058ae:	3320      	adds	r3, #32
 80058b0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6859      	ldr	r1, [r3, #4]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	4613      	mov	r3, r2
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	1a9b      	subs	r3, r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4403      	add	r3, r0
 80058c4:	3324      	adds	r3, #36	@ 0x24
 80058c6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6899      	ldr	r1, [r3, #8]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	4613      	mov	r3, r2
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4403      	add	r3, r0
 80058da:	3328      	adds	r3, #40	@ 0x28
 80058dc:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68d9      	ldr	r1, [r3, #12]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	4613      	mov	r3, r2
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4403      	add	r3, r0
 80058f0:	332c      	adds	r3, #44	@ 0x2c
 80058f2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6919      	ldr	r1, [r3, #16]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	4613      	mov	r3, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	1a9b      	subs	r3, r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4403      	add	r3, r0
 8005906:	3330      	adds	r3, #48	@ 0x30
 8005908:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 fd4b 	bl	80063a8 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d101      	bne.n	800594a <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8005946:	2302      	movs	r3, #2
 8005948:	e157      	b.n	8005bfa <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8005954:	2302      	movs	r3, #2
 8005956:	e150      	b.n	8005bfa <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b05      	cmp	r3, #5
 800596c:	d140      	bne.n	80059f0 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3b01      	subs	r3, #1
 8005972:	2b07      	cmp	r3, #7
 8005974:	d82a      	bhi.n	80059cc <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8005976:	a201      	add	r2, pc, #4	@ (adr r2, 800597c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8005978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597c:	0800599d 	.word	0x0800599d
 8005980:	080059a9 	.word	0x080059a9
 8005984:	080059cd 	.word	0x080059cd
 8005988:	080059b5 	.word	0x080059b5
 800598c:	080059cd 	.word	0x080059cd
 8005990:	080059cd 	.word	0x080059cd
 8005994:	080059cd 	.word	0x080059cd
 8005998:	080059c1 	.word	0x080059c1
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	6812      	ldr	r2, [r2, #0]
 80059a4:	61da      	str	r2, [r3, #28]
        break;
 80059a6:	e01a      	b.n	80059de <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 80059b2:	e014      	b.n	80059de <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	6812      	ldr	r2, [r2, #0]
 80059bc:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 80059be:	e00e      	b.n	80059de <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 80059ca:	e008      	b.n	80059de <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2207      	movs	r2, #7
 80059d0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 80059dc:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b07      	cmp	r3, #7
 80059e8:	f040 80fe 	bne.w	8005be8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e104      	b.n	8005bfa <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	2b07      	cmp	r3, #7
 80059f6:	f200 80e3 	bhi.w	8005bc0 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80059fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005a00 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80059fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a00:	08005a21 	.word	0x08005a21
 8005a04:	08005a35 	.word	0x08005a35
 8005a08:	08005bc1 	.word	0x08005bc1
 8005a0c:	08005af1 	.word	0x08005af1
 8005a10:	08005bc1 	.word	0x08005bc1
 8005a14:	08005bc1 	.word	0x08005bc1
 8005a18:	08005bc1 	.word	0x08005bc1
 8005a1c:	08005b05 	.word	0x08005b05
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6819      	ldr	r1, [r3, #0]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	01db      	lsls	r3, r3, #7
 8005a2c:	440b      	add	r3, r1
 8005a2e:	339c      	adds	r3, #156	@ 0x9c
 8005a30:	601a      	str	r2, [r3, #0]
        break;
 8005a32:	e0d1      	b.n	8005bd8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6819      	ldr	r1, [r3, #0]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	01db      	lsls	r3, r3, #7
 8005a40:	440b      	add	r3, r1
 8005a42:	33a4      	adds	r3, #164	@ 0xa4
 8005a44:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d03f      	beq.n	8005ace <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	3301      	adds	r3, #1
 8005a56:	01db      	lsls	r3, r3, #7
 8005a58:	4413      	add	r3, r2
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	6811      	ldr	r1, [r2, #0]
 8005a60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	3301      	adds	r3, #1
 8005a68:	01db      	lsls	r3, r3, #7
 8005a6a:	440b      	add	r3, r1
 8005a6c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	3301      	adds	r3, #1
 8005a76:	01db      	lsls	r3, r3, #7
 8005a78:	4413      	add	r3, r2
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	68f9      	ldr	r1, [r7, #12]
 8005a82:	6809      	ldr	r1, [r1, #0]
 8005a84:	431a      	orrs	r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	01db      	lsls	r3, r3, #7
 8005a8c:	440b      	add	r3, r1
 8005a8e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a98:	d109      	bne.n	8005aae <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6819      	ldr	r1, [r3, #0]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	01db      	lsls	r3, r3, #7
 8005aa6:	440b      	add	r3, r1
 8005aa8:	339c      	adds	r3, #156	@ 0x9c
 8005aaa:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8005aac:	e091      	b.n	8005bd2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ab6:	f040 808c 	bne.w	8005bd2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6819      	ldr	r1, [r3, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	01db      	lsls	r3, r3, #7
 8005ac6:	440b      	add	r3, r1
 8005ac8:	33a8      	adds	r3, #168	@ 0xa8
 8005aca:	601a      	str	r2, [r3, #0]
         break;
 8005acc:	e081      	b.n	8005bd2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	01db      	lsls	r3, r3, #7
 8005ad8:	4413      	add	r3, r2
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	6811      	ldr	r1, [r2, #0]
 8005ae0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	01db      	lsls	r3, r3, #7
 8005aea:	440b      	add	r3, r1
 8005aec:	601a      	str	r2, [r3, #0]
         break;
 8005aee:	e070      	b.n	8005bd2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	01db      	lsls	r3, r3, #7
 8005afc:	440b      	add	r3, r1
 8005afe:	33a8      	adds	r3, #168	@ 0xa8
 8005b00:	601a      	str	r2, [r3, #0]
        break;
 8005b02:	e069      	b.n	8005bd8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6819      	ldr	r1, [r3, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	01db      	lsls	r3, r3, #7
 8005b10:	440b      	add	r3, r1
 8005b12:	33ac      	adds	r3, #172	@ 0xac
 8005b14:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d03f      	beq.n	8005b9e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	3301      	adds	r3, #1
 8005b26:	01db      	lsls	r3, r3, #7
 8005b28:	4413      	add	r3, r2
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	6811      	ldr	r1, [r2, #0]
 8005b30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	3301      	adds	r3, #1
 8005b38:	01db      	lsls	r3, r3, #7
 8005b3a:	440b      	add	r3, r1
 8005b3c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	3301      	adds	r3, #1
 8005b46:	01db      	lsls	r3, r3, #7
 8005b48:	4413      	add	r3, r2
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	68f9      	ldr	r1, [r7, #12]
 8005b54:	6809      	ldr	r1, [r1, #0]
 8005b56:	431a      	orrs	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	01db      	lsls	r3, r3, #7
 8005b5e:	440b      	add	r3, r1
 8005b60:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b6a:	d109      	bne.n	8005b80 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6819      	ldr	r1, [r3, #0]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	01db      	lsls	r3, r3, #7
 8005b78:	440b      	add	r3, r1
 8005b7a:	339c      	adds	r3, #156	@ 0x9c
 8005b7c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8005b7e:	e02a      	b.n	8005bd6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b88:	d125      	bne.n	8005bd6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6819      	ldr	r1, [r3, #0]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	01db      	lsls	r3, r3, #7
 8005b96:	440b      	add	r3, r1
 8005b98:	33a8      	adds	r3, #168	@ 0xa8
 8005b9a:	601a      	str	r2, [r3, #0]
         break;
 8005b9c:	e01b      	b.n	8005bd6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	01db      	lsls	r3, r3, #7
 8005ba8:	4413      	add	r3, r2
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	6811      	ldr	r1, [r2, #0]
 8005bb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	01db      	lsls	r3, r3, #7
 8005bba:	440b      	add	r3, r1
 8005bbc:	601a      	str	r2, [r3, #0]
         break;
 8005bbe:	e00a      	b.n	8005bd6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2207      	movs	r2, #7
 8005bc4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

      break;
 8005bd0:	e002      	b.n	8005bd8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005bd2:	bf00      	nop
 8005bd4:	e000      	b.n	8005bd8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005bd6:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b07      	cmp	r3, #7
 8005be2:	d101      	bne.n	8005be8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e008      	b.n	8005bfa <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop

08005c08 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d101      	bne.n	8005c26 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8005c22:	2302      	movs	r3, #2
 8005c24:	e01d      	b.n	8005c62 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e016      	b.n	8005c62 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	68b9      	ldr	r1, [r7, #8]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 fad4 	bl	80061f8 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_HRTIM_WaveformOutputStart+0x18>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e01a      	b.n	8005cb8 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_HRTIM_WaveformOutputStop+0x18>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e01a      	b.n	8005d12 <HAL_HRTIM_WaveformOutputStop+0x4e>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f8d3 1398 	ldr.w	r1, [r3, #920]	@ 0x398
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	f8c3 2398 	str.w	r2, [r3, #920]	@ 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d101      	bne.n	8005d36 <HAL_HRTIM_WaveformCountStart+0x18>
 8005d32:	2302      	movs	r3, #2
 8005d34:	e018      	b.n	8005d68 <HAL_HRTIM_WaveformCountStart+0x4a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2202      	movs	r2, #2
 8005d42:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6819      	ldr	r1, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_HRTIM_WaveformCountStop>:
  * @retval HAL status
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t Timers)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_HRTIM_WaveformCountStop+0x18>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e019      	b.n	8005dc0 <HAL_HRTIM_WaveformCountStop+0x4c>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6819      	ldr	r1, [r3, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	43da      	mvns	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	400a      	ands	r2, r1
 8005dac:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f023 0307 	bic.w	r3, r3, #7
 8005de4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0318 	bic.w	r3, r3, #24
 8005df6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	6852      	ldr	r2, [r2, #4]
 8005e1c:	619a      	str	r2, [r3, #24]
}
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b087      	sub	sp, #28
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	01db      	lsls	r3, r3, #7
 8005e40:	4413      	add	r3, r2
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f023 0307 	bic.w	r3, r3, #7
 8005e4c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f023 0318 	bic.w	r3, r3, #24
 8005e5e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	3301      	adds	r3, #1
 8005e72:	01db      	lsls	r3, r3, #7
 8005e74:	4413      	add	r3, r2
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6819      	ldr	r1, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	01db      	lsls	r3, r3, #7
 8005e86:	440b      	add	r3, r1
 8005e88:	3394      	adds	r3, #148	@ 0x94
 8005e8a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6819      	ldr	r1, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	01db      	lsls	r3, r3, #7
 8005e98:	440b      	add	r3, r1
 8005e9a:	3398      	adds	r3, #152	@ 0x98
 8005e9c:	601a      	str	r2, [r3, #0]
}
 8005e9e:	bf00      	nop
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b085      	sub	sp, #20
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8005ec4:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f023 0320 	bic.w	r3, r3, #32
 8005ecc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ede:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ef0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005f02:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8005f14:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005f26:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005f3a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f4c:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8005f6a:	bf00      	nop
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
	...

08005f78 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b08b      	sub	sp, #44	@ 0x2c
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	01db      	lsls	r3, r3, #7
 8005f8e:	4413      	add	r3, r2
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	6811      	ldr	r1, [r2, #0]
 8005f96:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	01db      	lsls	r3, r3, #7
 8005fa0:	440b      	add	r3, r1
 8005fa2:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	3301      	adds	r3, #1
 8005fac:	01db      	lsls	r3, r3, #7
 8005fae:	4413      	add	r3, r2
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	01db      	lsls	r3, r3, #7
 8005fbc:	4413      	add	r3, r2
 8005fbe:	33e8      	adds	r3, #232	@ 0xe8
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	01db      	lsls	r3, r3, #7
 8005fcc:	4413      	add	r3, r2
 8005fce:	33e4      	adds	r3, #228	@ 0xe4
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8005fdc:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	f023 0320 	bic.w	r3, r3, #32
 8005fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fec:	4313      	orrs	r3, r2
 8005fee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ffe:	4313      	orrs	r3, r2
 8006000:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006008:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006010:	4313      	orrs	r3, r2
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8006014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006016:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800601a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006022:	4313      	orrs	r3, r2
 8006024:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800602c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006034:	4313      	orrs	r3, r2
 8006036:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8006038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006046:	4313      	orrs	r3, r2
 8006048:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006050:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800605a:	d103      	bne.n	8006064 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8006064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006066:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006072:	4313      	orrs	r3, r2
 8006074:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800607c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006084:	4313      	orrs	r3, r2
 8006086:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8006088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608a:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 800608e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006096:	4313      	orrs	r3, r2
 8006098:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	f023 031f 	bic.w	r3, r3, #31
 80060a0:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060b6:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4313      	orrs	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d108      	bne.n	80060dc <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060d0:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d6:	6a3a      	ldr	r2, [r7, #32]
 80060d8:	4313      	orrs	r3, r2
 80060da:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e0:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80060e4:	d004      	beq.n	80060f0 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ea:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 80060ee:	d103      	bne.n	80060f8 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f4:	2b40      	cmp	r3, #64	@ 0x40
 80060f6:	d108      	bne.n	800610a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 80060fe:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006104:	6a3a      	ldr	r2, [r7, #32]
 8006106:	4313      	orrs	r3, r2
 8006108:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800610e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b04      	cmp	r3, #4
 8006114:	d843      	bhi.n	800619e <HRTIM_TimingUnitWaveform_Config+0x226>
 8006116:	a201      	add	r2, pc, #4	@ (adr r2, 800611c <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8006118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611c:	08006131 	.word	0x08006131
 8006120:	08006147 	.word	0x08006147
 8006124:	0800615d 	.word	0x0800615d
 8006128:	08006173 	.word	0x08006173
 800612c:	08006189 	.word	0x08006189
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006136:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	4313      	orrs	r3, r2
 8006142:	61fb      	str	r3, [r7, #28]
      break;
 8006144:	e02c      	b.n	80061a0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800614c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	4313      	orrs	r3, r2
 8006158:	61fb      	str	r3, [r7, #28]
      break;
 800615a:	e021      	b.n	80061a0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006162:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	4313      	orrs	r3, r2
 800616e:	61fb      	str	r3, [r7, #28]
      break;
 8006170:	e016      	b.n	80061a0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006178:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	69fa      	ldr	r2, [r7, #28]
 8006182:	4313      	orrs	r3, r2
 8006184:	61fb      	str	r3, [r7, #28]
      break;
 8006186:	e00b      	b.n	80061a0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800618e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006194:	015b      	lsls	r3, r3, #5
 8006196:	69fa      	ldr	r2, [r7, #28]
 8006198:	4313      	orrs	r3, r2
 800619a:	61fb      	str	r3, [r7, #28]
      break;
 800619c:	e000      	b.n	80061a0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 800619e:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	3301      	adds	r3, #1
 80061a8:	01db      	lsls	r3, r3, #7
 80061aa:	4413      	add	r3, r2
 80061ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ae:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	01db      	lsls	r3, r3, #7
 80061b8:	4413      	add	r3, r2
 80061ba:	33e8      	adds	r3, #232	@ 0xe8
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	01db      	lsls	r3, r3, #7
 80061c8:	4413      	add	r3, r2
 80061ca:	33e4      	adds	r3, #228	@ 0xe4
 80061cc:	6a3a      	ldr	r2, [r7, #32]
 80061ce:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	01db      	lsls	r3, r3, #7
 80061d8:	4413      	add	r3, r2
 80061da:	33d4      	adds	r3, #212	@ 0xd4
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69fa      	ldr	r2, [r7, #28]
 80061e6:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80061ea:	bf00      	nop
 80061ec:	372c      	adds	r7, #44	@ 0x2c
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop

080061f8 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b089      	sub	sp, #36	@ 0x24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	01db      	lsls	r3, r3, #7
 8006212:	4413      	add	r3, r2
 8006214:	33e4      	adds	r3, #228	@ 0xe4
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	01db      	lsls	r3, r3, #7
 8006222:	4413      	add	r3, r2
 8006224:	33b8      	adds	r3, #184	@ 0xb8
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	617b      	str	r3, [r7, #20]

  switch (Output)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006230:	d04d      	beq.n	80062ce <HRTIM_OutputConfig+0xd6>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006238:	d85e      	bhi.n	80062f8 <HRTIM_OutputConfig+0x100>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006240:	d032      	beq.n	80062a8 <HRTIM_OutputConfig+0xb0>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006248:	d856      	bhi.n	80062f8 <HRTIM_OutputConfig+0x100>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b80      	cmp	r3, #128	@ 0x80
 800624e:	d03e      	beq.n	80062ce <HRTIM_OutputConfig+0xd6>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b80      	cmp	r3, #128	@ 0x80
 8006254:	d850      	bhi.n	80062f8 <HRTIM_OutputConfig+0x100>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b40      	cmp	r3, #64	@ 0x40
 800625a:	d025      	beq.n	80062a8 <HRTIM_OutputConfig+0xb0>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b40      	cmp	r3, #64	@ 0x40
 8006260:	d84a      	bhi.n	80062f8 <HRTIM_OutputConfig+0x100>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d01f      	beq.n	80062a8 <HRTIM_OutputConfig+0xb0>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d044      	beq.n	80062f8 <HRTIM_OutputConfig+0x100>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b20      	cmp	r3, #32
 8006272:	d841      	bhi.n	80062f8 <HRTIM_OutputConfig+0x100>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d33e      	bcc.n	80062f8 <HRTIM_OutputConfig+0x100>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3b02      	subs	r3, #2
 800627e:	2201      	movs	r2, #1
 8006280:	409a      	lsls	r2, r3
 8006282:	4b48      	ldr	r3, [pc, #288]	@ (80063a4 <HRTIM_OutputConfig+0x1ac>)
 8006284:	4013      	ands	r3, r2
 8006286:	2b00      	cmp	r3, #0
 8006288:	bf14      	ite	ne
 800628a:	2301      	movne	r3, #1
 800628c:	2300      	moveq	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d11c      	bne.n	80062ce <HRTIM_OutputConfig+0xd6>
 8006294:	f244 0304 	movw	r3, #16388	@ 0x4004
 8006298:	4013      	ands	r3, r2
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf14      	ite	ne
 800629e:	2301      	movne	r3, #1
 80062a0:	2300      	moveq	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d027      	beq.n	80062f8 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6819      	ldr	r1, [r3, #0]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	01db      	lsls	r3, r3, #7
 80062b4:	440b      	add	r3, r1
 80062b6:	33bc      	adds	r3, #188	@ 0xbc
 80062b8:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6819      	ldr	r1, [r3, #0]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	01db      	lsls	r3, r3, #7
 80062c6:	440b      	add	r3, r1
 80062c8:	33c0      	adds	r3, #192	@ 0xc0
 80062ca:	601a      	str	r2, [r3, #0]
      break;
 80062cc:	e015      	b.n	80062fa <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6819      	ldr	r1, [r3, #0]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	01db      	lsls	r3, r3, #7
 80062da:	440b      	add	r3, r1
 80062dc:	33c4      	adds	r3, #196	@ 0xc4
 80062de:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6819      	ldr	r1, [r3, #0]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	01db      	lsls	r3, r3, #7
 80062ec:	440b      	add	r3, r1
 80062ee:	33c8      	adds	r3, #200	@ 0xc8
 80062f0:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80062f2:	2310      	movs	r3, #16
 80062f4:	61bb      	str	r3, [r7, #24]
      break;
 80062f6:	e000      	b.n	80062fa <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 80062f8:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80062fa:	22fe      	movs	r2, #254	@ 0xfe
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8006302:	43db      	mvns	r3, r3
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	4013      	ands	r3, r2
 8006308:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	69fa      	ldr	r2, [r7, #28]
 8006316:	4313      	orrs	r3, r2
 8006318:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	fa02 f303 	lsl.w	r3, r2, r3
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	4313      	orrs	r3, r2
 8006328:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	691a      	ldr	r2, [r3, #16]
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	4313      	orrs	r3, r2
 8006338:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	695a      	ldr	r2, [r3, #20]
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	69fa      	ldr	r2, [r7, #28]
 8006346:	4313      	orrs	r3, r2
 8006348:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	4313      	orrs	r3, r2
 8006358:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	2b08      	cmp	r3, #8
 8006360:	d111      	bne.n	8006386 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10c      	bne.n	8006386 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006372:	2b00      	cmp	r3, #0
 8006374:	d107      	bne.n	8006386 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	69da      	ldr	r2, [r3, #28]
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	4313      	orrs	r3, r2
 8006384:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	01db      	lsls	r3, r3, #7
 800638e:	4413      	add	r3, r2
 8006390:	33e4      	adds	r3, #228	@ 0xe4
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	601a      	str	r2, [r3, #0]
}
 8006396:	bf00      	nop
 8006398:	3724      	adds	r7, #36	@ 0x24
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40000041 	.word	0x40000041

080063a8 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b05      	cmp	r3, #5
 80063b6:	d851      	bhi.n	800645c <HRTIM_ForceRegistersUpdate+0xb4>
 80063b8:	a201      	add	r2, pc, #4	@ (adr r2, 80063c0 <HRTIM_ForceRegistersUpdate+0x18>)
 80063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063be:	bf00      	nop
 80063c0:	080063ef 	.word	0x080063ef
 80063c4:	08006405 	.word	0x08006405
 80063c8:	0800641b 	.word	0x0800641b
 80063cc:	08006431 	.word	0x08006431
 80063d0:	08006447 	.word	0x08006447
 80063d4:	080063d9 	.word	0x080063d9
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0201 	orr.w	r2, r2, #1
 80063e8:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80063ec:	e037      	b.n	800645e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0202 	orr.w	r2, r2, #2
 80063fe:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006402:	e02c      	b.n	800645e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f042 0204 	orr.w	r2, r2, #4
 8006414:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006418:	e021      	b.n	800645e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0208 	orr.w	r2, r2, #8
 800642a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800642e:	e016      	b.n	800645e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f042 0210 	orr.w	r2, r2, #16
 8006440:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006444:	e00b      	b.n	800645e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0220 	orr.w	r2, r2, #32
 8006456:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800645a:	e000      	b.n	800645e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 800645c:	bf00      	nop
  }
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop

0800646c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006474:	4b0b      	ldr	r3, [pc, #44]	@ (80064a4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	4a0a      	ldr	r2, [pc, #40]	@ (80064a4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	6193      	str	r3, [r2, #24]
 8006480:	4b08      	ldr	r3, [pc, #32]	@ (80064a4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800648c:	4b06      	ldr	r3, [pc, #24]	@ (80064a8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	4905      	ldr	r1, [pc, #20]	@ (80064a8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4313      	orrs	r3, r2
 8006496:	600b      	str	r3, [r1, #0]
}
 8006498:	bf00      	nop
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40021000 	.word	0x40021000
 80064a8:	40010000 	.word	0x40010000

080064ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80064bc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d102      	bne.n	80064d2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	f001 b823 	b.w	8007518 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 817d 	beq.w	80067e2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80064e8:	4bbc      	ldr	r3, [pc, #752]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f003 030c 	and.w	r3, r3, #12
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d00c      	beq.n	800650e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80064f4:	4bb9      	ldr	r3, [pc, #740]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f003 030c 	and.w	r3, r3, #12
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d15c      	bne.n	80065ba <HAL_RCC_OscConfig+0x10e>
 8006500:	4bb6      	ldr	r3, [pc, #728]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800650c:	d155      	bne.n	80065ba <HAL_RCC_OscConfig+0x10e>
 800650e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006512:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006516:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800651a:	fa93 f3a3 	rbit	r3, r3
 800651e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006522:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006526:	fab3 f383 	clz	r3, r3
 800652a:	b2db      	uxtb	r3, r3
 800652c:	095b      	lsrs	r3, r3, #5
 800652e:	b2db      	uxtb	r3, r3
 8006530:	f043 0301 	orr.w	r3, r3, #1
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b01      	cmp	r3, #1
 8006538:	d102      	bne.n	8006540 <HAL_RCC_OscConfig+0x94>
 800653a:	4ba8      	ldr	r3, [pc, #672]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	e015      	b.n	800656c <HAL_RCC_OscConfig+0xc0>
 8006540:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006544:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006548:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800654c:	fa93 f3a3 	rbit	r3, r3
 8006550:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8006554:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006558:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800655c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8006560:	fa93 f3a3 	rbit	r3, r3
 8006564:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8006568:	4b9c      	ldr	r3, [pc, #624]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 800656a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006570:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8006574:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8006578:	fa92 f2a2 	rbit	r2, r2
 800657c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8006580:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8006584:	fab2 f282 	clz	r2, r2
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	f042 0220 	orr.w	r2, r2, #32
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	f002 021f 	and.w	r2, r2, #31
 8006594:	2101      	movs	r1, #1
 8006596:	fa01 f202 	lsl.w	r2, r1, r2
 800659a:	4013      	ands	r3, r2
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 811f 	beq.w	80067e0 <HAL_RCC_OscConfig+0x334>
 80065a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f040 8116 	bne.w	80067e0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	f000 bfaf 	b.w	8007518 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ca:	d106      	bne.n	80065da <HAL_RCC_OscConfig+0x12e>
 80065cc:	4b83      	ldr	r3, [pc, #524]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a82      	ldr	r2, [pc, #520]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 80065d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	e036      	b.n	8006648 <HAL_RCC_OscConfig+0x19c>
 80065da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10c      	bne.n	8006604 <HAL_RCC_OscConfig+0x158>
 80065ea:	4b7c      	ldr	r3, [pc, #496]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a7b      	ldr	r2, [pc, #492]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 80065f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	4b79      	ldr	r3, [pc, #484]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a78      	ldr	r2, [pc, #480]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 80065fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	e021      	b.n	8006648 <HAL_RCC_OscConfig+0x19c>
 8006604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006608:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006614:	d10c      	bne.n	8006630 <HAL_RCC_OscConfig+0x184>
 8006616:	4b71      	ldr	r3, [pc, #452]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a70      	ldr	r2, [pc, #448]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 800661c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	4b6e      	ldr	r3, [pc, #440]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a6d      	ldr	r2, [pc, #436]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 8006628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	e00b      	b.n	8006648 <HAL_RCC_OscConfig+0x19c>
 8006630:	4b6a      	ldr	r3, [pc, #424]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a69      	ldr	r2, [pc, #420]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 8006636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	4b67      	ldr	r3, [pc, #412]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a66      	ldr	r2, [pc, #408]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 8006642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006646:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006648:	4b64      	ldr	r3, [pc, #400]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 800664a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664c:	f023 020f 	bic.w	r2, r3, #15
 8006650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006654:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	495f      	ldr	r1, [pc, #380]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 800665e:	4313      	orrs	r3, r2
 8006660:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006666:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d059      	beq.n	8006726 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006672:	f7fd fadd 	bl	8003c30 <HAL_GetTick>
 8006676:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800667a:	e00a      	b.n	8006692 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800667c:	f7fd fad8 	bl	8003c30 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b64      	cmp	r3, #100	@ 0x64
 800668a:	d902      	bls.n	8006692 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	f000 bf43 	b.w	8007518 <HAL_RCC_OscConfig+0x106c>
 8006692:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006696:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800669a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800669e:	fa93 f3a3 	rbit	r3, r3
 80066a2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80066a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066aa:	fab3 f383 	clz	r3, r3
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	f043 0301 	orr.w	r3, r3, #1
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d102      	bne.n	80066c4 <HAL_RCC_OscConfig+0x218>
 80066be:	4b47      	ldr	r3, [pc, #284]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	e015      	b.n	80066f0 <HAL_RCC_OscConfig+0x244>
 80066c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80066c8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80066d0:	fa93 f3a3 	rbit	r3, r3
 80066d4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80066d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80066dc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80066e0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80066e4:	fa93 f3a3 	rbit	r3, r3
 80066e8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80066ec:	4b3b      	ldr	r3, [pc, #236]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 80066ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80066f4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80066f8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80066fc:	fa92 f2a2 	rbit	r2, r2
 8006700:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8006704:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8006708:	fab2 f282 	clz	r2, r2
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	f042 0220 	orr.w	r2, r2, #32
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	f002 021f 	and.w	r2, r2, #31
 8006718:	2101      	movs	r1, #1
 800671a:	fa01 f202 	lsl.w	r2, r1, r2
 800671e:	4013      	ands	r3, r2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d0ab      	beq.n	800667c <HAL_RCC_OscConfig+0x1d0>
 8006724:	e05d      	b.n	80067e2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006726:	f7fd fa83 	bl	8003c30 <HAL_GetTick>
 800672a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800672e:	e00a      	b.n	8006746 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006730:	f7fd fa7e 	bl	8003c30 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b64      	cmp	r3, #100	@ 0x64
 800673e:	d902      	bls.n	8006746 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	f000 bee9 	b.w	8007518 <HAL_RCC_OscConfig+0x106c>
 8006746:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800674a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8006752:	fa93 f3a3 	rbit	r3, r3
 8006756:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800675a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800675e:	fab3 f383 	clz	r3, r3
 8006762:	b2db      	uxtb	r3, r3
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	b2db      	uxtb	r3, r3
 8006768:	f043 0301 	orr.w	r3, r3, #1
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b01      	cmp	r3, #1
 8006770:	d102      	bne.n	8006778 <HAL_RCC_OscConfig+0x2cc>
 8006772:	4b1a      	ldr	r3, [pc, #104]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	e015      	b.n	80067a4 <HAL_RCC_OscConfig+0x2f8>
 8006778:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800677c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006780:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8006784:	fa93 f3a3 	rbit	r3, r3
 8006788:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800678c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006790:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8006794:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8006798:	fa93 f3a3 	rbit	r3, r3
 800679c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80067a0:	4b0e      	ldr	r3, [pc, #56]	@ (80067dc <HAL_RCC_OscConfig+0x330>)
 80067a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80067a8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80067ac:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80067b0:	fa92 f2a2 	rbit	r2, r2
 80067b4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80067b8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80067bc:	fab2 f282 	clz	r2, r2
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	f042 0220 	orr.w	r2, r2, #32
 80067c6:	b2d2      	uxtb	r2, r2
 80067c8:	f002 021f 	and.w	r2, r2, #31
 80067cc:	2101      	movs	r1, #1
 80067ce:	fa01 f202 	lsl.w	r2, r1, r2
 80067d2:	4013      	ands	r3, r2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1ab      	bne.n	8006730 <HAL_RCC_OscConfig+0x284>
 80067d8:	e003      	b.n	80067e2 <HAL_RCC_OscConfig+0x336>
 80067da:	bf00      	nop
 80067dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 817d 	beq.w	8006af2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80067f8:	4ba6      	ldr	r3, [pc, #664]	@ (8006a94 <HAL_RCC_OscConfig+0x5e8>)
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f003 030c 	and.w	r3, r3, #12
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00b      	beq.n	800681c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006804:	4ba3      	ldr	r3, [pc, #652]	@ (8006a94 <HAL_RCC_OscConfig+0x5e8>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f003 030c 	and.w	r3, r3, #12
 800680c:	2b08      	cmp	r3, #8
 800680e:	d172      	bne.n	80068f6 <HAL_RCC_OscConfig+0x44a>
 8006810:	4ba0      	ldr	r3, [pc, #640]	@ (8006a94 <HAL_RCC_OscConfig+0x5e8>)
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d16c      	bne.n	80068f6 <HAL_RCC_OscConfig+0x44a>
 800681c:	2302      	movs	r3, #2
 800681e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006822:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8006826:	fa93 f3a3 	rbit	r3, r3
 800682a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800682e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006832:	fab3 f383 	clz	r3, r3
 8006836:	b2db      	uxtb	r3, r3
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f043 0301 	orr.w	r3, r3, #1
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b01      	cmp	r3, #1
 8006844:	d102      	bne.n	800684c <HAL_RCC_OscConfig+0x3a0>
 8006846:	4b93      	ldr	r3, [pc, #588]	@ (8006a94 <HAL_RCC_OscConfig+0x5e8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	e013      	b.n	8006874 <HAL_RCC_OscConfig+0x3c8>
 800684c:	2302      	movs	r3, #2
 800684e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006852:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8006856:	fa93 f3a3 	rbit	r3, r3
 800685a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800685e:	2302      	movs	r3, #2
 8006860:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8006864:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006868:	fa93 f3a3 	rbit	r3, r3
 800686c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8006870:	4b88      	ldr	r3, [pc, #544]	@ (8006a94 <HAL_RCC_OscConfig+0x5e8>)
 8006872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006874:	2202      	movs	r2, #2
 8006876:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800687a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800687e:	fa92 f2a2 	rbit	r2, r2
 8006882:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8006886:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800688a:	fab2 f282 	clz	r2, r2
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	f042 0220 	orr.w	r2, r2, #32
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	f002 021f 	and.w	r2, r2, #31
 800689a:	2101      	movs	r1, #1
 800689c:	fa01 f202 	lsl.w	r2, r1, r2
 80068a0:	4013      	ands	r3, r2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <HAL_RCC_OscConfig+0x410>
 80068a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d002      	beq.n	80068bc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f000 be2e 	b.w	8007518 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068bc:	4b75      	ldr	r3, [pc, #468]	@ (8006a94 <HAL_RCC_OscConfig+0x5e8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	21f8      	movs	r1, #248	@ 0xf8
 80068d2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80068da:	fa91 f1a1 	rbit	r1, r1
 80068de:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80068e2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80068e6:	fab1 f181 	clz	r1, r1
 80068ea:	b2c9      	uxtb	r1, r1
 80068ec:	408b      	lsls	r3, r1
 80068ee:	4969      	ldr	r1, [pc, #420]	@ (8006a94 <HAL_RCC_OscConfig+0x5e8>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068f4:	e0fd      	b.n	8006af2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 8088 	beq.w	8006a18 <HAL_RCC_OscConfig+0x56c>
 8006908:	2301      	movs	r3, #1
 800690a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800690e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8006912:	fa93 f3a3 	rbit	r3, r3
 8006916:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800691a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800691e:	fab3 f383 	clz	r3, r3
 8006922:	b2db      	uxtb	r3, r3
 8006924:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006928:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	461a      	mov	r2, r3
 8006930:	2301      	movs	r3, #1
 8006932:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006934:	f7fd f97c 	bl	8003c30 <HAL_GetTick>
 8006938:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800693c:	e00a      	b.n	8006954 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800693e:	f7fd f977 	bl	8003c30 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d902      	bls.n	8006954 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	f000 bde2 	b.w	8007518 <HAL_RCC_OscConfig+0x106c>
 8006954:	2302      	movs	r3, #2
 8006956:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800695a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800695e:	fa93 f3a3 	rbit	r3, r3
 8006962:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8006966:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800696a:	fab3 f383 	clz	r3, r3
 800696e:	b2db      	uxtb	r3, r3
 8006970:	095b      	lsrs	r3, r3, #5
 8006972:	b2db      	uxtb	r3, r3
 8006974:	f043 0301 	orr.w	r3, r3, #1
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b01      	cmp	r3, #1
 800697c:	d102      	bne.n	8006984 <HAL_RCC_OscConfig+0x4d8>
 800697e:	4b45      	ldr	r3, [pc, #276]	@ (8006a94 <HAL_RCC_OscConfig+0x5e8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	e013      	b.n	80069ac <HAL_RCC_OscConfig+0x500>
 8006984:	2302      	movs	r3, #2
 8006986:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800698a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800698e:	fa93 f3a3 	rbit	r3, r3
 8006992:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8006996:	2302      	movs	r3, #2
 8006998:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800699c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80069a0:	fa93 f3a3 	rbit	r3, r3
 80069a4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80069a8:	4b3a      	ldr	r3, [pc, #232]	@ (8006a94 <HAL_RCC_OscConfig+0x5e8>)
 80069aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ac:	2202      	movs	r2, #2
 80069ae:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80069b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80069b6:	fa92 f2a2 	rbit	r2, r2
 80069ba:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80069be:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80069c2:	fab2 f282 	clz	r2, r2
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	f042 0220 	orr.w	r2, r2, #32
 80069cc:	b2d2      	uxtb	r2, r2
 80069ce:	f002 021f 	and.w	r2, r2, #31
 80069d2:	2101      	movs	r1, #1
 80069d4:	fa01 f202 	lsl.w	r2, r1, r2
 80069d8:	4013      	ands	r3, r2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0af      	beq.n	800693e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069de:	4b2d      	ldr	r3, [pc, #180]	@ (8006a94 <HAL_RCC_OscConfig+0x5e8>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	21f8      	movs	r1, #248	@ 0xf8
 80069f4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069f8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80069fc:	fa91 f1a1 	rbit	r1, r1
 8006a00:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8006a04:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8006a08:	fab1 f181 	clz	r1, r1
 8006a0c:	b2c9      	uxtb	r1, r1
 8006a0e:	408b      	lsls	r3, r1
 8006a10:	4920      	ldr	r1, [pc, #128]	@ (8006a94 <HAL_RCC_OscConfig+0x5e8>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	600b      	str	r3, [r1, #0]
 8006a16:	e06c      	b.n	8006af2 <HAL_RCC_OscConfig+0x646>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006a22:	fa93 f3a3 	rbit	r3, r3
 8006a26:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8006a2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a2e:	fab3 f383 	clz	r3, r3
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006a38:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	461a      	mov	r2, r3
 8006a40:	2300      	movs	r3, #0
 8006a42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a44:	f7fd f8f4 	bl	8003c30 <HAL_GetTick>
 8006a48:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a4c:	e00a      	b.n	8006a64 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a4e:	f7fd f8ef 	bl	8003c30 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d902      	bls.n	8006a64 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	f000 bd5a 	b.w	8007518 <HAL_RCC_OscConfig+0x106c>
 8006a64:	2302      	movs	r3, #2
 8006a66:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006a6e:	fa93 f3a3 	rbit	r3, r3
 8006a72:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8006a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a7a:	fab3 f383 	clz	r3, r3
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	095b      	lsrs	r3, r3, #5
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d104      	bne.n	8006a98 <HAL_RCC_OscConfig+0x5ec>
 8006a8e:	4b01      	ldr	r3, [pc, #4]	@ (8006a94 <HAL_RCC_OscConfig+0x5e8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	e015      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
 8006a94:	40021000 	.word	0x40021000
 8006a98:	2302      	movs	r3, #2
 8006a9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006aa2:	fa93 f3a3 	rbit	r3, r3
 8006aa6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006aaa:	2302      	movs	r3, #2
 8006aac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006ab0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006ab4:	fa93 f3a3 	rbit	r3, r3
 8006ab8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006abc:	4bc8      	ldr	r3, [pc, #800]	@ (8006de0 <HAL_RCC_OscConfig+0x934>)
 8006abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8006ac6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8006aca:	fa92 f2a2 	rbit	r2, r2
 8006ace:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8006ad2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8006ad6:	fab2 f282 	clz	r2, r2
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	f042 0220 	orr.w	r2, r2, #32
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	f002 021f 	and.w	r2, r2, #31
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8006aec:	4013      	ands	r3, r2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1ad      	bne.n	8006a4e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006af6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0308 	and.w	r3, r3, #8
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8110 	beq.w	8006d28 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d079      	beq.n	8006c0c <HAL_RCC_OscConfig+0x760>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006b22:	fa93 f3a3 	rbit	r3, r3
 8006b26:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8006b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b2e:	fab3 f383 	clz	r3, r3
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	461a      	mov	r2, r3
 8006b36:	4bab      	ldr	r3, [pc, #684]	@ (8006de4 <HAL_RCC_OscConfig+0x938>)
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	2301      	movs	r3, #1
 8006b40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b42:	f7fd f875 	bl	8003c30 <HAL_GetTick>
 8006b46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b4a:	e00a      	b.n	8006b62 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b4c:	f7fd f870 	bl	8003c30 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d902      	bls.n	8006b62 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	f000 bcdb 	b.w	8007518 <HAL_RCC_OscConfig+0x106c>
 8006b62:	2302      	movs	r3, #2
 8006b64:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b68:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006b6c:	fa93 f3a3 	rbit	r3, r3
 8006b70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b78:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b84:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	fa93 f2a3 	rbit	r2, r3
 8006b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	fa93 f2a3 	rbit	r2, r3
 8006bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006bba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bbc:	4b88      	ldr	r3, [pc, #544]	@ (8006de0 <HAL_RCC_OscConfig+0x934>)
 8006bbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bc4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006bc8:	2102      	movs	r1, #2
 8006bca:	6019      	str	r1, [r3, #0]
 8006bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	fa93 f1a3 	rbit	r1, r3
 8006bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bde:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006be2:	6019      	str	r1, [r3, #0]
  return result;
 8006be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006be8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	fab3 f383 	clz	r3, r3
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	f003 031f 	and.w	r3, r3, #31
 8006bfe:	2101      	movs	r1, #1
 8006c00:	fa01 f303 	lsl.w	r3, r1, r3
 8006c04:	4013      	ands	r3, r2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0a0      	beq.n	8006b4c <HAL_RCC_OscConfig+0x6a0>
 8006c0a:	e08d      	b.n	8006d28 <HAL_RCC_OscConfig+0x87c>
 8006c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c10:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006c14:	2201      	movs	r2, #1
 8006c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c1c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	fa93 f2a3 	rbit	r2, r3
 8006c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c2a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006c2e:	601a      	str	r2, [r3, #0]
  return result;
 8006c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c34:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006c38:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c3a:	fab3 f383 	clz	r3, r3
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	461a      	mov	r2, r3
 8006c42:	4b68      	ldr	r3, [pc, #416]	@ (8006de4 <HAL_RCC_OscConfig+0x938>)
 8006c44:	4413      	add	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	461a      	mov	r2, r3
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c4e:	f7fc ffef 	bl	8003c30 <HAL_GetTick>
 8006c52:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c56:	e00a      	b.n	8006c6e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c58:	f7fc ffea 	bl	8003c30 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d902      	bls.n	8006c6e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	f000 bc55 	b.w	8007518 <HAL_RCC_OscConfig+0x106c>
 8006c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c72:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006c76:	2202      	movs	r2, #2
 8006c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c7e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	fa93 f2a3 	rbit	r2, r3
 8006c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c8c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c96:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ca2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	fa93 f2a3 	rbit	r2, r3
 8006cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cb0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cc6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	fa93 f2a3 	rbit	r2, r3
 8006cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cd4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006cd8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cda:	4b41      	ldr	r3, [pc, #260]	@ (8006de0 <HAL_RCC_OscConfig+0x934>)
 8006cdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ce2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006ce6:	2102      	movs	r1, #2
 8006ce8:	6019      	str	r1, [r3, #0]
 8006cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cee:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	fa93 f1a3 	rbit	r1, r3
 8006cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cfc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006d00:	6019      	str	r1, [r3, #0]
  return result;
 8006d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d06:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	fab3 f383 	clz	r3, r3
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	f003 031f 	and.w	r3, r3, #31
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d22:	4013      	ands	r3, r2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d197      	bne.n	8006c58 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 81a1 	beq.w	8007080 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d44:	4b26      	ldr	r3, [pc, #152]	@ (8006de0 <HAL_RCC_OscConfig+0x934>)
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d116      	bne.n	8006d7e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d50:	4b23      	ldr	r3, [pc, #140]	@ (8006de0 <HAL_RCC_OscConfig+0x934>)
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	4a22      	ldr	r2, [pc, #136]	@ (8006de0 <HAL_RCC_OscConfig+0x934>)
 8006d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d5a:	61d3      	str	r3, [r2, #28]
 8006d5c:	4b20      	ldr	r3, [pc, #128]	@ (8006de0 <HAL_RCC_OscConfig+0x934>)
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8006d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d68:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d72:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006d76:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006de8 <HAL_RCC_OscConfig+0x93c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d11a      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d8a:	4b17      	ldr	r3, [pc, #92]	@ (8006de8 <HAL_RCC_OscConfig+0x93c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a16      	ldr	r2, [pc, #88]	@ (8006de8 <HAL_RCC_OscConfig+0x93c>)
 8006d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d96:	f7fc ff4b 	bl	8003c30 <HAL_GetTick>
 8006d9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d9e:	e009      	b.n	8006db4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006da0:	f7fc ff46 	bl	8003c30 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b64      	cmp	r3, #100	@ 0x64
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e3b1      	b.n	8007518 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006db4:	4b0c      	ldr	r3, [pc, #48]	@ (8006de8 <HAL_RCC_OscConfig+0x93c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0ef      	beq.n	8006da0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006dc4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d10d      	bne.n	8006dec <HAL_RCC_OscConfig+0x940>
 8006dd0:	4b03      	ldr	r3, [pc, #12]	@ (8006de0 <HAL_RCC_OscConfig+0x934>)
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	4a02      	ldr	r2, [pc, #8]	@ (8006de0 <HAL_RCC_OscConfig+0x934>)
 8006dd6:	f043 0301 	orr.w	r3, r3, #1
 8006dda:	6213      	str	r3, [r2, #32]
 8006ddc:	e03c      	b.n	8006e58 <HAL_RCC_OscConfig+0x9ac>
 8006dde:	bf00      	nop
 8006de0:	40021000 	.word	0x40021000
 8006de4:	10908120 	.word	0x10908120
 8006de8:	40007000 	.word	0x40007000
 8006dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006df0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10c      	bne.n	8006e16 <HAL_RCC_OscConfig+0x96a>
 8006dfc:	4bc1      	ldr	r3, [pc, #772]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	4ac0      	ldr	r2, [pc, #768]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8006e02:	f023 0301 	bic.w	r3, r3, #1
 8006e06:	6213      	str	r3, [r2, #32]
 8006e08:	4bbe      	ldr	r3, [pc, #760]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	4abd      	ldr	r2, [pc, #756]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8006e0e:	f023 0304 	bic.w	r3, r3, #4
 8006e12:	6213      	str	r3, [r2, #32]
 8006e14:	e020      	b.n	8006e58 <HAL_RCC_OscConfig+0x9ac>
 8006e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	2b05      	cmp	r3, #5
 8006e24:	d10c      	bne.n	8006e40 <HAL_RCC_OscConfig+0x994>
 8006e26:	4bb7      	ldr	r3, [pc, #732]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	4ab6      	ldr	r2, [pc, #728]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8006e2c:	f043 0304 	orr.w	r3, r3, #4
 8006e30:	6213      	str	r3, [r2, #32]
 8006e32:	4bb4      	ldr	r3, [pc, #720]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	4ab3      	ldr	r2, [pc, #716]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8006e38:	f043 0301 	orr.w	r3, r3, #1
 8006e3c:	6213      	str	r3, [r2, #32]
 8006e3e:	e00b      	b.n	8006e58 <HAL_RCC_OscConfig+0x9ac>
 8006e40:	4bb0      	ldr	r3, [pc, #704]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	4aaf      	ldr	r2, [pc, #700]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8006e46:	f023 0301 	bic.w	r3, r3, #1
 8006e4a:	6213      	str	r3, [r2, #32]
 8006e4c:	4bad      	ldr	r3, [pc, #692]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	4aac      	ldr	r2, [pc, #688]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8006e52:	f023 0304 	bic.w	r3, r3, #4
 8006e56:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 8081 	beq.w	8006f6c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e6a:	f7fc fee1 	bl	8003c30 <HAL_GetTick>
 8006e6e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e72:	e00b      	b.n	8006e8c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e74:	f7fc fedc 	bl	8003c30 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e345      	b.n	8007518 <HAL_RCC_OscConfig+0x106c>
 8006e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e90:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006e94:	2202      	movs	r2, #2
 8006e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e9c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	fa93 f2a3 	rbit	r2, r3
 8006ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006eaa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006eb4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006eb8:	2202      	movs	r2, #2
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ec0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	fa93 f2a3 	rbit	r2, r3
 8006eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ece:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006ed2:	601a      	str	r2, [r3, #0]
  return result;
 8006ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ed8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006edc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ede:	fab3 f383 	clz	r3, r3
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f043 0302 	orr.w	r3, r3, #2
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d102      	bne.n	8006ef8 <HAL_RCC_OscConfig+0xa4c>
 8006ef2:	4b84      	ldr	r3, [pc, #528]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	e013      	b.n	8006f20 <HAL_RCC_OscConfig+0xa74>
 8006ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006efc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006f00:	2202      	movs	r2, #2
 8006f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f08:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	fa93 f2a3 	rbit	r2, r3
 8006f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f16:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	4b79      	ldr	r3, [pc, #484]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006f24:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006f28:	2102      	movs	r1, #2
 8006f2a:	6011      	str	r1, [r2, #0]
 8006f2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006f30:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006f34:	6812      	ldr	r2, [r2, #0]
 8006f36:	fa92 f1a2 	rbit	r1, r2
 8006f3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006f3e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006f42:	6011      	str	r1, [r2, #0]
  return result;
 8006f44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006f48:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006f4c:	6812      	ldr	r2, [r2, #0]
 8006f4e:	fab2 f282 	clz	r2, r2
 8006f52:	b2d2      	uxtb	r2, r2
 8006f54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	f002 021f 	and.w	r2, r2, #31
 8006f5e:	2101      	movs	r1, #1
 8006f60:	fa01 f202 	lsl.w	r2, r1, r2
 8006f64:	4013      	ands	r3, r2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d084      	beq.n	8006e74 <HAL_RCC_OscConfig+0x9c8>
 8006f6a:	e07f      	b.n	800706c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f6c:	f7fc fe60 	bl	8003c30 <HAL_GetTick>
 8006f70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f74:	e00b      	b.n	8006f8e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f76:	f7fc fe5b 	bl	8003c30 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e2c4      	b.n	8007518 <HAL_RCC_OscConfig+0x106c>
 8006f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f92:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006f96:	2202      	movs	r2, #2
 8006f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f9e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	fa93 f2a3 	rbit	r2, r3
 8006fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006fac:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006fb6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006fba:	2202      	movs	r2, #2
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006fc2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	fa93 f2a3 	rbit	r2, r3
 8006fcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006fd0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006fd4:	601a      	str	r2, [r3, #0]
  return result;
 8006fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006fda:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006fde:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fe0:	fab3 f383 	clz	r3, r3
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	095b      	lsrs	r3, r3, #5
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	f043 0302 	orr.w	r3, r3, #2
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d102      	bne.n	8006ffa <HAL_RCC_OscConfig+0xb4e>
 8006ff4:	4b43      	ldr	r3, [pc, #268]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	e013      	b.n	8007022 <HAL_RCC_OscConfig+0xb76>
 8006ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ffe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8007002:	2202      	movs	r2, #2
 8007004:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800700a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	fa93 f2a3 	rbit	r2, r3
 8007014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007018:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	4b39      	ldr	r3, [pc, #228]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8007020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007022:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007026:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800702a:	2102      	movs	r1, #2
 800702c:	6011      	str	r1, [r2, #0]
 800702e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007032:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8007036:	6812      	ldr	r2, [r2, #0]
 8007038:	fa92 f1a2 	rbit	r1, r2
 800703c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007040:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8007044:	6011      	str	r1, [r2, #0]
  return result;
 8007046:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800704a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800704e:	6812      	ldr	r2, [r2, #0]
 8007050:	fab2 f282 	clz	r2, r2
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	f002 021f 	and.w	r2, r2, #31
 8007060:	2101      	movs	r1, #1
 8007062:	fa01 f202 	lsl.w	r2, r1, r2
 8007066:	4013      	ands	r3, r2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d184      	bne.n	8006f76 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800706c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8007070:	2b01      	cmp	r3, #1
 8007072:	d105      	bne.n	8007080 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007074:	4b23      	ldr	r3, [pc, #140]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	4a22      	ldr	r2, [pc, #136]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 800707a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800707e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007084:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 8242 	beq.w	8007516 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007092:	4b1c      	ldr	r3, [pc, #112]	@ (8007104 <HAL_RCC_OscConfig+0xc58>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f003 030c 	and.w	r3, r3, #12
 800709a:	2b08      	cmp	r3, #8
 800709c:	f000 8213 	beq.w	80074c6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80070a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	f040 8162 	bne.w	8007376 <HAL_RCC_OscConfig+0xeca>
 80070b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80070b6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80070ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80070be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80070c4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	fa93 f2a3 	rbit	r2, r3
 80070ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80070d2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80070d6:	601a      	str	r2, [r3, #0]
  return result;
 80070d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80070dc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80070e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070e2:	fab3 f383 	clz	r3, r3
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80070ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	461a      	mov	r2, r3
 80070f4:	2300      	movs	r3, #0
 80070f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070f8:	f7fc fd9a 	bl	8003c30 <HAL_GetTick>
 80070fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007100:	e00c      	b.n	800711c <HAL_RCC_OscConfig+0xc70>
 8007102:	bf00      	nop
 8007104:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007108:	f7fc fd92 	bl	8003c30 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	2b02      	cmp	r3, #2
 8007116:	d901      	bls.n	800711c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e1fd      	b.n	8007518 <HAL_RCC_OscConfig+0x106c>
 800711c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007120:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8007124:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800712a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800712e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	fa93 f2a3 	rbit	r2, r3
 8007138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800713c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8007140:	601a      	str	r2, [r3, #0]
  return result;
 8007142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007146:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800714a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800714c:	fab3 f383 	clz	r3, r3
 8007150:	b2db      	uxtb	r3, r3
 8007152:	095b      	lsrs	r3, r3, #5
 8007154:	b2db      	uxtb	r3, r3
 8007156:	f043 0301 	orr.w	r3, r3, #1
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b01      	cmp	r3, #1
 800715e:	d102      	bne.n	8007166 <HAL_RCC_OscConfig+0xcba>
 8007160:	4bb0      	ldr	r3, [pc, #704]	@ (8007424 <HAL_RCC_OscConfig+0xf78>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	e027      	b.n	80071b6 <HAL_RCC_OscConfig+0xd0a>
 8007166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800716a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800716e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007178:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	fa93 f2a3 	rbit	r2, r3
 8007182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007186:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007190:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8007194:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800719e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	fa93 f2a3 	rbit	r2, r3
 80071a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80071ac:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	4b9c      	ldr	r3, [pc, #624]	@ (8007424 <HAL_RCC_OscConfig+0xf78>)
 80071b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80071ba:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80071be:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80071c2:	6011      	str	r1, [r2, #0]
 80071c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80071c8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80071cc:	6812      	ldr	r2, [r2, #0]
 80071ce:	fa92 f1a2 	rbit	r1, r2
 80071d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80071d6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80071da:	6011      	str	r1, [r2, #0]
  return result;
 80071dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80071e0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80071e4:	6812      	ldr	r2, [r2, #0]
 80071e6:	fab2 f282 	clz	r2, r2
 80071ea:	b2d2      	uxtb	r2, r2
 80071ec:	f042 0220 	orr.w	r2, r2, #32
 80071f0:	b2d2      	uxtb	r2, r2
 80071f2:	f002 021f 	and.w	r2, r2, #31
 80071f6:	2101      	movs	r1, #1
 80071f8:	fa01 f202 	lsl.w	r2, r1, r2
 80071fc:	4013      	ands	r3, r2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d182      	bne.n	8007108 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007202:	4b88      	ldr	r3, [pc, #544]	@ (8007424 <HAL_RCC_OscConfig+0xf78>)
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800720a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800720e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800721a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	430b      	orrs	r3, r1
 8007224:	497f      	ldr	r1, [pc, #508]	@ (8007424 <HAL_RCC_OscConfig+0xf78>)
 8007226:	4313      	orrs	r3, r2
 8007228:	604b      	str	r3, [r1, #4]
 800722a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800722e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8007232:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800723c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	fa93 f2a3 	rbit	r2, r3
 8007246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800724a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800724e:	601a      	str	r2, [r3, #0]
  return result;
 8007250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007254:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8007258:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800725a:	fab3 f383 	clz	r3, r3
 800725e:	b2db      	uxtb	r3, r3
 8007260:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8007264:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	461a      	mov	r2, r3
 800726c:	2301      	movs	r3, #1
 800726e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007270:	f7fc fcde 	bl	8003c30 <HAL_GetTick>
 8007274:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007278:	e009      	b.n	800728e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800727a:	f7fc fcd9 	bl	8003c30 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b02      	cmp	r3, #2
 8007288:	d901      	bls.n	800728e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e144      	b.n	8007518 <HAL_RCC_OscConfig+0x106c>
 800728e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007292:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8007296:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800729a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800729c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80072a0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	fa93 f2a3 	rbit	r2, r3
 80072aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80072ae:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80072b2:	601a      	str	r2, [r3, #0]
  return result;
 80072b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80072b8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80072bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072be:	fab3 f383 	clz	r3, r3
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	095b      	lsrs	r3, r3, #5
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	f043 0301 	orr.w	r3, r3, #1
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d102      	bne.n	80072d8 <HAL_RCC_OscConfig+0xe2c>
 80072d2:	4b54      	ldr	r3, [pc, #336]	@ (8007424 <HAL_RCC_OscConfig+0xf78>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	e027      	b.n	8007328 <HAL_RCC_OscConfig+0xe7c>
 80072d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80072dc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80072e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80072e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80072ea:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	fa93 f2a3 	rbit	r2, r3
 80072f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80072f8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007302:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8007306:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007310:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	fa93 f2a3 	rbit	r2, r3
 800731a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800731e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	4b3f      	ldr	r3, [pc, #252]	@ (8007424 <HAL_RCC_OscConfig+0xf78>)
 8007326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007328:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800732c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8007330:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8007334:	6011      	str	r1, [r2, #0]
 8007336:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800733a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800733e:	6812      	ldr	r2, [r2, #0]
 8007340:	fa92 f1a2 	rbit	r1, r2
 8007344:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007348:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800734c:	6011      	str	r1, [r2, #0]
  return result;
 800734e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007352:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8007356:	6812      	ldr	r2, [r2, #0]
 8007358:	fab2 f282 	clz	r2, r2
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	f042 0220 	orr.w	r2, r2, #32
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	f002 021f 	and.w	r2, r2, #31
 8007368:	2101      	movs	r1, #1
 800736a:	fa01 f202 	lsl.w	r2, r1, r2
 800736e:	4013      	ands	r3, r2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d082      	beq.n	800727a <HAL_RCC_OscConfig+0xdce>
 8007374:	e0cf      	b.n	8007516 <HAL_RCC_OscConfig+0x106a>
 8007376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800737a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800737e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007382:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007388:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	fa93 f2a3 	rbit	r2, r3
 8007392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007396:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800739a:	601a      	str	r2, [r3, #0]
  return result;
 800739c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80073a0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80073a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073a6:	fab3 f383 	clz	r3, r3
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80073b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	461a      	mov	r2, r3
 80073b8:	2300      	movs	r3, #0
 80073ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073bc:	f7fc fc38 	bl	8003c30 <HAL_GetTick>
 80073c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073c4:	e009      	b.n	80073da <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073c6:	f7fc fc33 	bl	8003c30 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d901      	bls.n	80073da <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e09e      	b.n	8007518 <HAL_RCC_OscConfig+0x106c>
 80073da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80073de:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80073e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80073e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80073ec:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	fa93 f2a3 	rbit	r2, r3
 80073f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80073fa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80073fe:	601a      	str	r2, [r3, #0]
  return result;
 8007400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007404:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8007408:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800740a:	fab3 f383 	clz	r3, r3
 800740e:	b2db      	uxtb	r3, r3
 8007410:	095b      	lsrs	r3, r3, #5
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f043 0301 	orr.w	r3, r3, #1
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b01      	cmp	r3, #1
 800741c:	d104      	bne.n	8007428 <HAL_RCC_OscConfig+0xf7c>
 800741e:	4b01      	ldr	r3, [pc, #4]	@ (8007424 <HAL_RCC_OscConfig+0xf78>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	e029      	b.n	8007478 <HAL_RCC_OscConfig+0xfcc>
 8007424:	40021000 	.word	0x40021000
 8007428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800742c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8007430:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800743a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	fa93 f2a3 	rbit	r2, r3
 8007444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007448:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007452:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8007456:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007460:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	fa93 f2a3 	rbit	r2, r3
 800746a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800746e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	4b2b      	ldr	r3, [pc, #172]	@ (8007524 <HAL_RCC_OscConfig+0x1078>)
 8007476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007478:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800747c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8007480:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8007484:	6011      	str	r1, [r2, #0]
 8007486:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800748a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800748e:	6812      	ldr	r2, [r2, #0]
 8007490:	fa92 f1a2 	rbit	r1, r2
 8007494:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007498:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800749c:	6011      	str	r1, [r2, #0]
  return result;
 800749e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80074a2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80074a6:	6812      	ldr	r2, [r2, #0]
 80074a8:	fab2 f282 	clz	r2, r2
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	f042 0220 	orr.w	r2, r2, #32
 80074b2:	b2d2      	uxtb	r2, r2
 80074b4:	f002 021f 	and.w	r2, r2, #31
 80074b8:	2101      	movs	r1, #1
 80074ba:	fa01 f202 	lsl.w	r2, r1, r2
 80074be:	4013      	ands	r3, r2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d180      	bne.n	80073c6 <HAL_RCC_OscConfig+0xf1a>
 80074c4:	e027      	b.n	8007516 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80074ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d101      	bne.n	80074da <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e01e      	b.n	8007518 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80074da:	4b12      	ldr	r3, [pc, #72]	@ (8007524 <HAL_RCC_OscConfig+0x1078>)
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80074e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80074e6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80074ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80074ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d10b      	bne.n	8007512 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80074fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80074fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007506:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800750e:	429a      	cmp	r2, r3
 8007510:	d001      	beq.n	8007516 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e000      	b.n	8007518 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	40021000 	.word	0x40021000

08007528 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b09e      	sub	sp, #120	@ 0x78
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e162      	b.n	8007806 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007540:	4b90      	ldr	r3, [pc, #576]	@ (8007784 <HAL_RCC_ClockConfig+0x25c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d910      	bls.n	8007570 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800754e:	4b8d      	ldr	r3, [pc, #564]	@ (8007784 <HAL_RCC_ClockConfig+0x25c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f023 0207 	bic.w	r2, r3, #7
 8007556:	498b      	ldr	r1, [pc, #556]	@ (8007784 <HAL_RCC_ClockConfig+0x25c>)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	4313      	orrs	r3, r2
 800755c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800755e:	4b89      	ldr	r3, [pc, #548]	@ (8007784 <HAL_RCC_ClockConfig+0x25c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	429a      	cmp	r2, r3
 800756a:	d001      	beq.n	8007570 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e14a      	b.n	8007806 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d008      	beq.n	800758e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800757c:	4b82      	ldr	r3, [pc, #520]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	497f      	ldr	r1, [pc, #508]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 800758a:	4313      	orrs	r3, r2
 800758c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 80dc 	beq.w	8007754 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d13c      	bne.n	800761e <HAL_RCC_ClockConfig+0xf6>
 80075a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80075a8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075ac:	fa93 f3a3 	rbit	r3, r3
 80075b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80075b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075b4:	fab3 f383 	clz	r3, r3
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	095b      	lsrs	r3, r3, #5
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	f043 0301 	orr.w	r3, r3, #1
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d102      	bne.n	80075ce <HAL_RCC_ClockConfig+0xa6>
 80075c8:	4b6f      	ldr	r3, [pc, #444]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	e00f      	b.n	80075ee <HAL_RCC_ClockConfig+0xc6>
 80075ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80075d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075d6:	fa93 f3a3 	rbit	r3, r3
 80075da:	667b      	str	r3, [r7, #100]	@ 0x64
 80075dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80075e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80075e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075e4:	fa93 f3a3 	rbit	r3, r3
 80075e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075ea:	4b67      	ldr	r3, [pc, #412]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 80075ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80075f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80075f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075f6:	fa92 f2a2 	rbit	r2, r2
 80075fa:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80075fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80075fe:	fab2 f282 	clz	r2, r2
 8007602:	b2d2      	uxtb	r2, r2
 8007604:	f042 0220 	orr.w	r2, r2, #32
 8007608:	b2d2      	uxtb	r2, r2
 800760a:	f002 021f 	and.w	r2, r2, #31
 800760e:	2101      	movs	r1, #1
 8007610:	fa01 f202 	lsl.w	r2, r1, r2
 8007614:	4013      	ands	r3, r2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d17b      	bne.n	8007712 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e0f3      	b.n	8007806 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b02      	cmp	r3, #2
 8007624:	d13c      	bne.n	80076a0 <HAL_RCC_ClockConfig+0x178>
 8007626:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800762a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800762c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800762e:	fa93 f3a3 	rbit	r3, r3
 8007632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007636:	fab3 f383 	clz	r3, r3
 800763a:	b2db      	uxtb	r3, r3
 800763c:	095b      	lsrs	r3, r3, #5
 800763e:	b2db      	uxtb	r3, r3
 8007640:	f043 0301 	orr.w	r3, r3, #1
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b01      	cmp	r3, #1
 8007648:	d102      	bne.n	8007650 <HAL_RCC_ClockConfig+0x128>
 800764a:	4b4f      	ldr	r3, [pc, #316]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	e00f      	b.n	8007670 <HAL_RCC_ClockConfig+0x148>
 8007650:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007654:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007658:	fa93 f3a3 	rbit	r3, r3
 800765c:	647b      	str	r3, [r7, #68]	@ 0x44
 800765e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007662:	643b      	str	r3, [r7, #64]	@ 0x40
 8007664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007666:	fa93 f3a3 	rbit	r3, r3
 800766a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800766c:	4b46      	ldr	r3, [pc, #280]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 800766e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007670:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007674:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007676:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007678:	fa92 f2a2 	rbit	r2, r2
 800767c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800767e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007680:	fab2 f282 	clz	r2, r2
 8007684:	b2d2      	uxtb	r2, r2
 8007686:	f042 0220 	orr.w	r2, r2, #32
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	f002 021f 	and.w	r2, r2, #31
 8007690:	2101      	movs	r1, #1
 8007692:	fa01 f202 	lsl.w	r2, r1, r2
 8007696:	4013      	ands	r3, r2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d13a      	bne.n	8007712 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e0b2      	b.n	8007806 <HAL_RCC_ClockConfig+0x2de>
 80076a0:	2302      	movs	r3, #2
 80076a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	fa93 f3a3 	rbit	r3, r3
 80076aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80076ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ae:	fab3 f383 	clz	r3, r3
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	095b      	lsrs	r3, r3, #5
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	f043 0301 	orr.w	r3, r3, #1
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d102      	bne.n	80076c8 <HAL_RCC_ClockConfig+0x1a0>
 80076c2:	4b31      	ldr	r3, [pc, #196]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	e00d      	b.n	80076e4 <HAL_RCC_ClockConfig+0x1bc>
 80076c8:	2302      	movs	r3, #2
 80076ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ce:	fa93 f3a3 	rbit	r3, r3
 80076d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80076d4:	2302      	movs	r3, #2
 80076d6:	623b      	str	r3, [r7, #32]
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	fa93 f3a3 	rbit	r3, r3
 80076de:	61fb      	str	r3, [r7, #28]
 80076e0:	4b29      	ldr	r3, [pc, #164]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 80076e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e4:	2202      	movs	r2, #2
 80076e6:	61ba      	str	r2, [r7, #24]
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	fa92 f2a2 	rbit	r2, r2
 80076ee:	617a      	str	r2, [r7, #20]
  return result;
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	fab2 f282 	clz	r2, r2
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	f042 0220 	orr.w	r2, r2, #32
 80076fc:	b2d2      	uxtb	r2, r2
 80076fe:	f002 021f 	and.w	r2, r2, #31
 8007702:	2101      	movs	r1, #1
 8007704:	fa01 f202 	lsl.w	r2, r1, r2
 8007708:	4013      	ands	r3, r2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e079      	b.n	8007806 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007712:	4b1d      	ldr	r3, [pc, #116]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f023 0203 	bic.w	r2, r3, #3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	491a      	ldr	r1, [pc, #104]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 8007720:	4313      	orrs	r3, r2
 8007722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007724:	f7fc fa84 	bl	8003c30 <HAL_GetTick>
 8007728:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800772a:	e00a      	b.n	8007742 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800772c:	f7fc fa80 	bl	8003c30 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800773a:	4293      	cmp	r3, r2
 800773c:	d901      	bls.n	8007742 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e061      	b.n	8007806 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007742:	4b11      	ldr	r3, [pc, #68]	@ (8007788 <HAL_RCC_ClockConfig+0x260>)
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f003 020c 	and.w	r2, r3, #12
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	429a      	cmp	r2, r3
 8007752:	d1eb      	bne.n	800772c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007754:	4b0b      	ldr	r3, [pc, #44]	@ (8007784 <HAL_RCC_ClockConfig+0x25c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0307 	and.w	r3, r3, #7
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d214      	bcs.n	800778c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007762:	4b08      	ldr	r3, [pc, #32]	@ (8007784 <HAL_RCC_ClockConfig+0x25c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f023 0207 	bic.w	r2, r3, #7
 800776a:	4906      	ldr	r1, [pc, #24]	@ (8007784 <HAL_RCC_ClockConfig+0x25c>)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	4313      	orrs	r3, r2
 8007770:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007772:	4b04      	ldr	r3, [pc, #16]	@ (8007784 <HAL_RCC_ClockConfig+0x25c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	429a      	cmp	r2, r3
 800777e:	d005      	beq.n	800778c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e040      	b.n	8007806 <HAL_RCC_ClockConfig+0x2de>
 8007784:	40022000 	.word	0x40022000
 8007788:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0304 	and.w	r3, r3, #4
 8007794:	2b00      	cmp	r3, #0
 8007796:	d008      	beq.n	80077aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007798:	4b1d      	ldr	r3, [pc, #116]	@ (8007810 <HAL_RCC_ClockConfig+0x2e8>)
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	491a      	ldr	r1, [pc, #104]	@ (8007810 <HAL_RCC_ClockConfig+0x2e8>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0308 	and.w	r3, r3, #8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d009      	beq.n	80077ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077b6:	4b16      	ldr	r3, [pc, #88]	@ (8007810 <HAL_RCC_ClockConfig+0x2e8>)
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	4912      	ldr	r1, [pc, #72]	@ (8007810 <HAL_RCC_ClockConfig+0x2e8>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80077ca:	f000 f829 	bl	8007820 <HAL_RCC_GetSysClockFreq>
 80077ce:	4601      	mov	r1, r0
 80077d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007810 <HAL_RCC_ClockConfig+0x2e8>)
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077d8:	22f0      	movs	r2, #240	@ 0xf0
 80077da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	fa92 f2a2 	rbit	r2, r2
 80077e2:	60fa      	str	r2, [r7, #12]
  return result;
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	fab2 f282 	clz	r2, r2
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	40d3      	lsrs	r3, r2
 80077ee:	4a09      	ldr	r2, [pc, #36]	@ (8007814 <HAL_RCC_ClockConfig+0x2ec>)
 80077f0:	5cd3      	ldrb	r3, [r2, r3]
 80077f2:	fa21 f303 	lsr.w	r3, r1, r3
 80077f6:	4a08      	ldr	r2, [pc, #32]	@ (8007818 <HAL_RCC_ClockConfig+0x2f0>)
 80077f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80077fa:	4b08      	ldr	r3, [pc, #32]	@ (800781c <HAL_RCC_ClockConfig+0x2f4>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fc f9d2 	bl	8003ba8 <HAL_InitTick>
  
  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3778      	adds	r7, #120	@ 0x78
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	40021000 	.word	0x40021000
 8007814:	080097ec 	.word	0x080097ec
 8007818:	20000000 	.word	0x20000000
 800781c:	20000064 	.word	0x20000064

08007820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007820:	b480      	push	{r7}
 8007822:	b08b      	sub	sp, #44	@ 0x2c
 8007824:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	61fb      	str	r3, [r7, #28]
 800782a:	2300      	movs	r3, #0
 800782c:	61bb      	str	r3, [r7, #24]
 800782e:	2300      	movs	r3, #0
 8007830:	627b      	str	r3, [r7, #36]	@ 0x24
 8007832:	2300      	movs	r3, #0
 8007834:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800783a:	4b29      	ldr	r3, [pc, #164]	@ (80078e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	f003 030c 	and.w	r3, r3, #12
 8007846:	2b04      	cmp	r3, #4
 8007848:	d002      	beq.n	8007850 <HAL_RCC_GetSysClockFreq+0x30>
 800784a:	2b08      	cmp	r3, #8
 800784c:	d003      	beq.n	8007856 <HAL_RCC_GetSysClockFreq+0x36>
 800784e:	e03c      	b.n	80078ca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007850:	4b24      	ldr	r3, [pc, #144]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007852:	623b      	str	r3, [r7, #32]
      break;
 8007854:	e03c      	b.n	80078d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800785c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8007860:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	fa92 f2a2 	rbit	r2, r2
 8007868:	607a      	str	r2, [r7, #4]
  return result;
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	fab2 f282 	clz	r2, r2
 8007870:	b2d2      	uxtb	r2, r2
 8007872:	40d3      	lsrs	r3, r2
 8007874:	4a1c      	ldr	r2, [pc, #112]	@ (80078e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007876:	5cd3      	ldrb	r3, [r2, r3]
 8007878:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800787a:	4b19      	ldr	r3, [pc, #100]	@ (80078e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800787c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787e:	f003 030f 	and.w	r3, r3, #15
 8007882:	220f      	movs	r2, #15
 8007884:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	fa92 f2a2 	rbit	r2, r2
 800788c:	60fa      	str	r2, [r7, #12]
  return result;
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	fab2 f282 	clz	r2, r2
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	40d3      	lsrs	r3, r2
 8007898:	4a14      	ldr	r2, [pc, #80]	@ (80078ec <HAL_RCC_GetSysClockFreq+0xcc>)
 800789a:	5cd3      	ldrb	r3, [r2, r3]
 800789c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d008      	beq.n	80078ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80078a8:	4a0e      	ldr	r2, [pc, #56]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	fb02 f303 	mul.w	r3, r2, r3
 80078b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80078b8:	e004      	b.n	80078c4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	4a0c      	ldr	r2, [pc, #48]	@ (80078f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80078be:	fb02 f303 	mul.w	r3, r2, r3
 80078c2:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80078c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c6:	623b      	str	r3, [r7, #32]
      break;
 80078c8:	e002      	b.n	80078d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80078ca:	4b06      	ldr	r3, [pc, #24]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80078cc:	623b      	str	r3, [r7, #32]
      break;
 80078ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078d0:	6a3b      	ldr	r3, [r7, #32]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	372c      	adds	r7, #44	@ 0x2c
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	40021000 	.word	0x40021000
 80078e4:	007a1200 	.word	0x007a1200
 80078e8:	080097fc 	.word	0x080097fc
 80078ec:	0800980c 	.word	0x0800980c
 80078f0:	003d0900 	.word	0x003d0900

080078f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b092      	sub	sp, #72	@ 0x48
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078fc:	2300      	movs	r3, #0
 80078fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007904:	2300      	movs	r3, #0
 8007906:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 80cd 	beq.w	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007918:	4b8e      	ldr	r3, [pc, #568]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10e      	bne.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007924:	4b8b      	ldr	r3, [pc, #556]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	4a8a      	ldr	r2, [pc, #552]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800792a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800792e:	61d3      	str	r3, [r2, #28]
 8007930:	4b88      	ldr	r3, [pc, #544]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007938:	60bb      	str	r3, [r7, #8]
 800793a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800793c:	2301      	movs	r3, #1
 800793e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007942:	4b85      	ldr	r3, [pc, #532]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800794a:	2b00      	cmp	r3, #0
 800794c:	d118      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800794e:	4b82      	ldr	r3, [pc, #520]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a81      	ldr	r2, [pc, #516]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007958:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800795a:	f7fc f969 	bl	8003c30 <HAL_GetTick>
 800795e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007960:	e008      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007962:	f7fc f965 	bl	8003c30 <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	2b64      	cmp	r3, #100	@ 0x64
 800796e:	d901      	bls.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e0ea      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007974:	4b78      	ldr	r3, [pc, #480]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800797c:	2b00      	cmp	r3, #0
 800797e:	d0f0      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007980:	4b74      	ldr	r3, [pc, #464]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007982:	6a1b      	ldr	r3, [r3, #32]
 8007984:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007988:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800798a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800798c:	2b00      	cmp	r3, #0
 800798e:	d07d      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007998:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800799a:	429a      	cmp	r2, r3
 800799c:	d076      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800799e:	4b6d      	ldr	r3, [pc, #436]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80079ac:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b0:	fa93 f3a3 	rbit	r3, r3
 80079b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80079b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079b8:	fab3 f383 	clz	r3, r3
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	461a      	mov	r2, r3
 80079c0:	4b66      	ldr	r3, [pc, #408]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079c2:	4413      	add	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	461a      	mov	r2, r3
 80079c8:	2301      	movs	r3, #1
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80079d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d4:	fa93 f3a3 	rbit	r3, r3
 80079d8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80079da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079dc:	fab3 f383 	clz	r3, r3
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	461a      	mov	r2, r3
 80079e4:	4b5d      	ldr	r3, [pc, #372]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	461a      	mov	r2, r3
 80079ec:	2300      	movs	r3, #0
 80079ee:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80079f0:	4a58      	ldr	r2, [pc, #352]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80079f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d045      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a00:	f7fc f916 	bl	8003c30 <HAL_GetTick>
 8007a04:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a06:	e00a      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a08:	f7fc f912 	bl	8003c30 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d901      	bls.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e095      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a24:	fa93 f3a3 	rbit	r3, r3
 8007a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	623b      	str	r3, [r7, #32]
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	fa93 f3a3 	rbit	r3, r3
 8007a34:	61fb      	str	r3, [r7, #28]
  return result;
 8007a36:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a38:	fab3 f383 	clz	r3, r3
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	095b      	lsrs	r3, r3, #5
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	f043 0302 	orr.w	r3, r3, #2
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d102      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007a4c:	4b41      	ldr	r3, [pc, #260]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	e007      	b.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007a52:	2302      	movs	r3, #2
 8007a54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	fa93 f3a3 	rbit	r3, r3
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a62:	2202      	movs	r2, #2
 8007a64:	613a      	str	r2, [r7, #16]
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	fa92 f2a2 	rbit	r2, r2
 8007a6c:	60fa      	str	r2, [r7, #12]
  return result;
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	fab2 f282 	clz	r2, r2
 8007a74:	b2d2      	uxtb	r2, r2
 8007a76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a7a:	b2d2      	uxtb	r2, r2
 8007a7c:	f002 021f 	and.w	r2, r2, #31
 8007a80:	2101      	movs	r1, #1
 8007a82:	fa01 f202 	lsl.w	r2, r1, r2
 8007a86:	4013      	ands	r3, r2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0bd      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007a8c:	4b31      	ldr	r3, [pc, #196]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	492e      	ldr	r1, [pc, #184]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007a9e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d105      	bne.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ab0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d008      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007abe:	4b25      	ldr	r3, [pc, #148]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac2:	f023 0203 	bic.w	r2, r3, #3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	4922      	ldr	r1, [pc, #136]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0320 	and.w	r3, r3, #32
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d008      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007adc:	4b1d      	ldr	r3, [pc, #116]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae0:	f023 0210 	bic.w	r2, r3, #16
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	491a      	ldr	r1, [pc, #104]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d008      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007afa:	4b16      	ldr	r3, [pc, #88]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afe:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	4913      	ldr	r1, [pc, #76]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d008      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007b18:	4b0e      	ldr	r3, [pc, #56]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	490b      	ldr	r1, [pc, #44]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d008      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b36:	4b07      	ldr	r3, [pc, #28]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	4904      	ldr	r1, [pc, #16]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3748      	adds	r7, #72	@ 0x48
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	40021000 	.word	0x40021000
 8007b58:	40007000 	.word	0x40007000
 8007b5c:	10908100 	.word	0x10908100

08007b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e049      	b.n	8007c06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d106      	bne.n	8007b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7fb feca 	bl	8003920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f000 fd2c 	bl	80085fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d001      	beq.n	8007c28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e038      	b.n	8007c9a <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a1c      	ldr	r2, [pc, #112]	@ (8007ca8 <HAL_TIM_Base_Start+0x98>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00e      	beq.n	8007c58 <HAL_TIM_Base_Start+0x48>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c42:	d009      	beq.n	8007c58 <HAL_TIM_Base_Start+0x48>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a18      	ldr	r2, [pc, #96]	@ (8007cac <HAL_TIM_Base_Start+0x9c>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d004      	beq.n	8007c58 <HAL_TIM_Base_Start+0x48>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a17      	ldr	r2, [pc, #92]	@ (8007cb0 <HAL_TIM_Base_Start+0xa0>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d115      	bne.n	8007c84 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689a      	ldr	r2, [r3, #8]
 8007c5e:	4b15      	ldr	r3, [pc, #84]	@ (8007cb4 <HAL_TIM_Base_Start+0xa4>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2b06      	cmp	r3, #6
 8007c68:	d015      	beq.n	8007c96 <HAL_TIM_Base_Start+0x86>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c70:	d011      	beq.n	8007c96 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f042 0201 	orr.w	r2, r2, #1
 8007c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c82:	e008      	b.n	8007c96 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f042 0201 	orr.w	r2, r2, #1
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	e000      	b.n	8007c98 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	40012c00 	.word	0x40012c00
 8007cac:	40000400 	.word	0x40000400
 8007cb0:	40014000 	.word	0x40014000
 8007cb4:	00010007 	.word	0x00010007

08007cb8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6a1a      	ldr	r2, [r3, #32]
 8007cc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007cca:	4013      	ands	r3, r2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10f      	bne.n	8007cf0 <HAL_TIM_Base_Stop+0x38>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6a1a      	ldr	r2, [r3, #32]
 8007cd6:	f240 4344 	movw	r3, #1092	@ 0x444
 8007cda:	4013      	ands	r3, r2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d107      	bne.n	8007cf0 <HAL_TIM_Base_Stop+0x38>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f022 0201 	bic.w	r2, r2, #1
 8007cee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e049      	b.n	8007dac <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d106      	bne.n	8007d32 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f841 	bl	8007db4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2202      	movs	r2, #2
 8007d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	3304      	adds	r3, #4
 8007d42:	4619      	mov	r1, r3
 8007d44:	4610      	mov	r0, r2
 8007d46:	f000 fc59 	bl	80085fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d104      	bne.n	8007de6 <HAL_TIM_IC_Start_IT+0x1e>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	e023      	b.n	8007e2e <HAL_TIM_IC_Start_IT+0x66>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	d104      	bne.n	8007df6 <HAL_TIM_IC_Start_IT+0x2e>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	e01b      	b.n	8007e2e <HAL_TIM_IC_Start_IT+0x66>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b08      	cmp	r3, #8
 8007dfa:	d104      	bne.n	8007e06 <HAL_TIM_IC_Start_IT+0x3e>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	e013      	b.n	8007e2e <HAL_TIM_IC_Start_IT+0x66>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b0c      	cmp	r3, #12
 8007e0a:	d104      	bne.n	8007e16 <HAL_TIM_IC_Start_IT+0x4e>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	e00b      	b.n	8007e2e <HAL_TIM_IC_Start_IT+0x66>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b10      	cmp	r3, #16
 8007e1a:	d104      	bne.n	8007e26 <HAL_TIM_IC_Start_IT+0x5e>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	e003      	b.n	8007e2e <HAL_TIM_IC_Start_IT+0x66>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d104      	bne.n	8007e40 <HAL_TIM_IC_Start_IT+0x78>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	e013      	b.n	8007e68 <HAL_TIM_IC_Start_IT+0xa0>
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	d104      	bne.n	8007e50 <HAL_TIM_IC_Start_IT+0x88>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	e00b      	b.n	8007e68 <HAL_TIM_IC_Start_IT+0xa0>
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	2b08      	cmp	r3, #8
 8007e54:	d104      	bne.n	8007e60 <HAL_TIM_IC_Start_IT+0x98>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	e003      	b.n	8007e68 <HAL_TIM_IC_Start_IT+0xa0>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d102      	bne.n	8007e76 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e70:	7b7b      	ldrb	r3, [r7, #13]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d001      	beq.n	8007e7a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e0ce      	b.n	8008018 <HAL_TIM_IC_Start_IT+0x250>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d104      	bne.n	8007e8a <HAL_TIM_IC_Start_IT+0xc2>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e88:	e023      	b.n	8007ed2 <HAL_TIM_IC_Start_IT+0x10a>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	d104      	bne.n	8007e9a <HAL_TIM_IC_Start_IT+0xd2>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e98:	e01b      	b.n	8007ed2 <HAL_TIM_IC_Start_IT+0x10a>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d104      	bne.n	8007eaa <HAL_TIM_IC_Start_IT+0xe2>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ea8:	e013      	b.n	8007ed2 <HAL_TIM_IC_Start_IT+0x10a>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b0c      	cmp	r3, #12
 8007eae:	d104      	bne.n	8007eba <HAL_TIM_IC_Start_IT+0xf2>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007eb8:	e00b      	b.n	8007ed2 <HAL_TIM_IC_Start_IT+0x10a>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b10      	cmp	r3, #16
 8007ebe:	d104      	bne.n	8007eca <HAL_TIM_IC_Start_IT+0x102>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ec8:	e003      	b.n	8007ed2 <HAL_TIM_IC_Start_IT+0x10a>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d104      	bne.n	8007ee2 <HAL_TIM_IC_Start_IT+0x11a>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ee0:	e013      	b.n	8007f0a <HAL_TIM_IC_Start_IT+0x142>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	d104      	bne.n	8007ef2 <HAL_TIM_IC_Start_IT+0x12a>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ef0:	e00b      	b.n	8007f0a <HAL_TIM_IC_Start_IT+0x142>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	d104      	bne.n	8007f02 <HAL_TIM_IC_Start_IT+0x13a>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f00:	e003      	b.n	8007f0a <HAL_TIM_IC_Start_IT+0x142>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b0c      	cmp	r3, #12
 8007f0e:	d841      	bhi.n	8007f94 <HAL_TIM_IC_Start_IT+0x1cc>
 8007f10:	a201      	add	r2, pc, #4	@ (adr r2, 8007f18 <HAL_TIM_IC_Start_IT+0x150>)
 8007f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f16:	bf00      	nop
 8007f18:	08007f4d 	.word	0x08007f4d
 8007f1c:	08007f95 	.word	0x08007f95
 8007f20:	08007f95 	.word	0x08007f95
 8007f24:	08007f95 	.word	0x08007f95
 8007f28:	08007f5f 	.word	0x08007f5f
 8007f2c:	08007f95 	.word	0x08007f95
 8007f30:	08007f95 	.word	0x08007f95
 8007f34:	08007f95 	.word	0x08007f95
 8007f38:	08007f71 	.word	0x08007f71
 8007f3c:	08007f95 	.word	0x08007f95
 8007f40:	08007f95 	.word	0x08007f95
 8007f44:	08007f95 	.word	0x08007f95
 8007f48:	08007f83 	.word	0x08007f83
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0202 	orr.w	r2, r2, #2
 8007f5a:	60da      	str	r2, [r3, #12]
      break;
 8007f5c:	e01d      	b.n	8007f9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68da      	ldr	r2, [r3, #12]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f042 0204 	orr.w	r2, r2, #4
 8007f6c:	60da      	str	r2, [r3, #12]
      break;
 8007f6e:	e014      	b.n	8007f9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 0208 	orr.w	r2, r2, #8
 8007f7e:	60da      	str	r2, [r3, #12]
      break;
 8007f80:	e00b      	b.n	8007f9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68da      	ldr	r2, [r3, #12]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f042 0210 	orr.w	r2, r2, #16
 8007f90:	60da      	str	r2, [r3, #12]
      break;
 8007f92:	e002      	b.n	8007f9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	73fb      	strb	r3, [r7, #15]
      break;
 8007f98:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d13a      	bne.n	8008016 <HAL_TIM_IC_Start_IT+0x24e>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 fd4b 	bl	8008a44 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8008020 <HAL_TIM_IC_Start_IT+0x258>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d00e      	beq.n	8007fd6 <HAL_TIM_IC_Start_IT+0x20e>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fc0:	d009      	beq.n	8007fd6 <HAL_TIM_IC_Start_IT+0x20e>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a17      	ldr	r2, [pc, #92]	@ (8008024 <HAL_TIM_IC_Start_IT+0x25c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d004      	beq.n	8007fd6 <HAL_TIM_IC_Start_IT+0x20e>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a15      	ldr	r2, [pc, #84]	@ (8008028 <HAL_TIM_IC_Start_IT+0x260>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d115      	bne.n	8008002 <HAL_TIM_IC_Start_IT+0x23a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689a      	ldr	r2, [r3, #8]
 8007fdc:	4b13      	ldr	r3, [pc, #76]	@ (800802c <HAL_TIM_IC_Start_IT+0x264>)
 8007fde:	4013      	ands	r3, r2
 8007fe0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b06      	cmp	r3, #6
 8007fe6:	d015      	beq.n	8008014 <HAL_TIM_IC_Start_IT+0x24c>
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fee:	d011      	beq.n	8008014 <HAL_TIM_IC_Start_IT+0x24c>
      {
        __HAL_TIM_ENABLE(htim);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f042 0201 	orr.w	r2, r2, #1
 8007ffe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008000:	e008      	b.n	8008014 <HAL_TIM_IC_Start_IT+0x24c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0201 	orr.w	r2, r2, #1
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	e000      	b.n	8008016 <HAL_TIM_IC_Start_IT+0x24e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008014:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008016:	7bfb      	ldrb	r3, [r7, #15]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	40012c00 	.word	0x40012c00
 8008024:	40000400 	.word	0x40000400
 8008028:	40014000 	.word	0x40014000
 800802c:	00010007 	.word	0x00010007

08008030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b02      	cmp	r3, #2
 8008044:	d122      	bne.n	800808c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f003 0302 	and.w	r3, r3, #2
 8008050:	2b02      	cmp	r3, #2
 8008052:	d11b      	bne.n	800808c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f06f 0202 	mvn.w	r2, #2
 800805c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	f003 0303 	and.w	r3, r3, #3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fb fccc 	bl	8003a10 <HAL_TIM_IC_CaptureCallback>
 8008078:	e005      	b.n	8008086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 faa0 	bl	80085c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 faa7 	bl	80085d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	2b04      	cmp	r3, #4
 8008098:	d122      	bne.n	80080e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	f003 0304 	and.w	r3, r3, #4
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	d11b      	bne.n	80080e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f06f 0204 	mvn.w	r2, #4
 80080b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2202      	movs	r2, #2
 80080b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7fb fca2 	bl	8003a10 <HAL_TIM_IC_CaptureCallback>
 80080cc:	e005      	b.n	80080da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fa76 	bl	80085c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fa7d 	bl	80085d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	f003 0308 	and.w	r3, r3, #8
 80080ea:	2b08      	cmp	r3, #8
 80080ec:	d122      	bne.n	8008134 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d11b      	bne.n	8008134 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f06f 0208 	mvn.w	r2, #8
 8008104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2204      	movs	r2, #4
 800810a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7fb fc78 	bl	8003a10 <HAL_TIM_IC_CaptureCallback>
 8008120:	e005      	b.n	800812e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fa4c 	bl	80085c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fa53 	bl	80085d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f003 0310 	and.w	r3, r3, #16
 800813e:	2b10      	cmp	r3, #16
 8008140:	d122      	bne.n	8008188 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f003 0310 	and.w	r3, r3, #16
 800814c:	2b10      	cmp	r3, #16
 800814e:	d11b      	bne.n	8008188 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f06f 0210 	mvn.w	r2, #16
 8008158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2208      	movs	r2, #8
 800815e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7fb fc4e 	bl	8003a10 <HAL_TIM_IC_CaptureCallback>
 8008174:	e005      	b.n	8008182 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fa22 	bl	80085c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fa29 	bl	80085d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b01      	cmp	r3, #1
 8008194:	d10e      	bne.n	80081b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d107      	bne.n	80081b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f06f 0201 	mvn.w	r2, #1
 80081ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7fb fc80 	bl	8003ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081be:	2b80      	cmp	r3, #128	@ 0x80
 80081c0:	d10e      	bne.n	80081e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081cc:	2b80      	cmp	r3, #128	@ 0x80
 80081ce:	d107      	bne.n	80081e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80081d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fcd0 	bl	8008b80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081ee:	d10e      	bne.n	800820e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081fa:	2b80      	cmp	r3, #128	@ 0x80
 80081fc:	d107      	bne.n	800820e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fcc3 	bl	8008b94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008218:	2b40      	cmp	r3, #64	@ 0x40
 800821a:	d10e      	bne.n	800823a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008226:	2b40      	cmp	r3, #64	@ 0x40
 8008228:	d107      	bne.n	800823a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f9d7 	bl	80085e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	f003 0320 	and.w	r3, r3, #32
 8008244:	2b20      	cmp	r3, #32
 8008246:	d10e      	bne.n	8008266 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b20      	cmp	r3, #32
 8008254:	d107      	bne.n	8008266 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f06f 0220 	mvn.w	r2, #32
 800825e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fc83 	bl	8008b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008266:	bf00      	nop
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b086      	sub	sp, #24
 8008272:	af00      	add	r7, sp, #0
 8008274:	60f8      	str	r0, [r7, #12]
 8008276:	60b9      	str	r1, [r7, #8]
 8008278:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008284:	2b01      	cmp	r3, #1
 8008286:	d101      	bne.n	800828c <HAL_TIM_IC_ConfigChannel+0x1e>
 8008288:	2302      	movs	r3, #2
 800828a:	e088      	b.n	800839e <HAL_TIM_IC_ConfigChannel+0x130>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d11b      	bne.n	80082d2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80082aa:	f000 fa1f 	bl	80086ec <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	699a      	ldr	r2, [r3, #24]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 020c 	bic.w	r2, r2, #12
 80082bc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6999      	ldr	r1, [r3, #24]
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	430a      	orrs	r2, r1
 80082ce:	619a      	str	r2, [r3, #24]
 80082d0:	e060      	b.n	8008394 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d11c      	bne.n	8008312 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80082e8:	f000 fa8b 	bl	8008802 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	699a      	ldr	r2, [r3, #24]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80082fa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6999      	ldr	r1, [r3, #24]
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	021a      	lsls	r2, r3, #8
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	430a      	orrs	r2, r1
 800830e:	619a      	str	r2, [r3, #24]
 8008310:	e040      	b.n	8008394 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b08      	cmp	r3, #8
 8008316:	d11b      	bne.n	8008350 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008328:	f000 fad8 	bl	80088dc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	69da      	ldr	r2, [r3, #28]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f022 020c 	bic.w	r2, r2, #12
 800833a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	69d9      	ldr	r1, [r3, #28]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	61da      	str	r2, [r3, #28]
 800834e:	e021      	b.n	8008394 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b0c      	cmp	r3, #12
 8008354:	d11c      	bne.n	8008390 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008366:	f000 faf5 	bl	8008954 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69da      	ldr	r2, [r3, #28]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008378:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	69d9      	ldr	r1, [r3, #28]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	021a      	lsls	r2, r3, #8
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	61da      	str	r2, [r3, #28]
 800838e:	e001      	b.n	8008394 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800839c:	7dfb      	ldrb	r3, [r7, #23]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3718      	adds	r7, #24
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d101      	bne.n	80083c2 <HAL_TIM_ConfigClockSource+0x1c>
 80083be:	2302      	movs	r3, #2
 80083c0:	e0b6      	b.n	8008530 <HAL_TIM_ConfigClockSource+0x18a>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2202      	movs	r2, #2
 80083ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083e0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80083e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083fe:	d03e      	beq.n	800847e <HAL_TIM_ConfigClockSource+0xd8>
 8008400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008404:	f200 8087 	bhi.w	8008516 <HAL_TIM_ConfigClockSource+0x170>
 8008408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800840c:	f000 8086 	beq.w	800851c <HAL_TIM_ConfigClockSource+0x176>
 8008410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008414:	d87f      	bhi.n	8008516 <HAL_TIM_ConfigClockSource+0x170>
 8008416:	2b70      	cmp	r3, #112	@ 0x70
 8008418:	d01a      	beq.n	8008450 <HAL_TIM_ConfigClockSource+0xaa>
 800841a:	2b70      	cmp	r3, #112	@ 0x70
 800841c:	d87b      	bhi.n	8008516 <HAL_TIM_ConfigClockSource+0x170>
 800841e:	2b60      	cmp	r3, #96	@ 0x60
 8008420:	d050      	beq.n	80084c4 <HAL_TIM_ConfigClockSource+0x11e>
 8008422:	2b60      	cmp	r3, #96	@ 0x60
 8008424:	d877      	bhi.n	8008516 <HAL_TIM_ConfigClockSource+0x170>
 8008426:	2b50      	cmp	r3, #80	@ 0x50
 8008428:	d03c      	beq.n	80084a4 <HAL_TIM_ConfigClockSource+0xfe>
 800842a:	2b50      	cmp	r3, #80	@ 0x50
 800842c:	d873      	bhi.n	8008516 <HAL_TIM_ConfigClockSource+0x170>
 800842e:	2b40      	cmp	r3, #64	@ 0x40
 8008430:	d058      	beq.n	80084e4 <HAL_TIM_ConfigClockSource+0x13e>
 8008432:	2b40      	cmp	r3, #64	@ 0x40
 8008434:	d86f      	bhi.n	8008516 <HAL_TIM_ConfigClockSource+0x170>
 8008436:	2b30      	cmp	r3, #48	@ 0x30
 8008438:	d064      	beq.n	8008504 <HAL_TIM_ConfigClockSource+0x15e>
 800843a:	2b30      	cmp	r3, #48	@ 0x30
 800843c:	d86b      	bhi.n	8008516 <HAL_TIM_ConfigClockSource+0x170>
 800843e:	2b20      	cmp	r3, #32
 8008440:	d060      	beq.n	8008504 <HAL_TIM_ConfigClockSource+0x15e>
 8008442:	2b20      	cmp	r3, #32
 8008444:	d867      	bhi.n	8008516 <HAL_TIM_ConfigClockSource+0x170>
 8008446:	2b00      	cmp	r3, #0
 8008448:	d05c      	beq.n	8008504 <HAL_TIM_ConfigClockSource+0x15e>
 800844a:	2b10      	cmp	r3, #16
 800844c:	d05a      	beq.n	8008504 <HAL_TIM_ConfigClockSource+0x15e>
 800844e:	e062      	b.n	8008516 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008460:	f000 fad0 	bl	8008a04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008472:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	609a      	str	r2, [r3, #8]
      break;
 800847c:	e04f      	b.n	800851e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800848e:	f000 fab9 	bl	8008a04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084a0:	609a      	str	r2, [r3, #8]
      break;
 80084a2:	e03c      	b.n	800851e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084b0:	461a      	mov	r2, r3
 80084b2:	f000 f977 	bl	80087a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2150      	movs	r1, #80	@ 0x50
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 fa86 	bl	80089ce <TIM_ITRx_SetConfig>
      break;
 80084c2:	e02c      	b.n	800851e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084d0:	461a      	mov	r2, r3
 80084d2:	f000 f9d3 	bl	800887c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2160      	movs	r1, #96	@ 0x60
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 fa76 	bl	80089ce <TIM_ITRx_SetConfig>
      break;
 80084e2:	e01c      	b.n	800851e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084f0:	461a      	mov	r2, r3
 80084f2:	f000 f957 	bl	80087a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2140      	movs	r1, #64	@ 0x40
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fa66 	bl	80089ce <TIM_ITRx_SetConfig>
      break;
 8008502:	e00c      	b.n	800851e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4619      	mov	r1, r3
 800850e:	4610      	mov	r0, r2
 8008510:	f000 fa5d 	bl	80089ce <TIM_ITRx_SetConfig>
      break;
 8008514:	e003      	b.n	800851e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	73fb      	strb	r3, [r7, #15]
      break;
 800851a:	e000      	b.n	800851e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800851c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800852e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b0c      	cmp	r3, #12
 800854a:	d831      	bhi.n	80085b0 <HAL_TIM_ReadCapturedValue+0x78>
 800854c:	a201      	add	r2, pc, #4	@ (adr r2, 8008554 <HAL_TIM_ReadCapturedValue+0x1c>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	08008589 	.word	0x08008589
 8008558:	080085b1 	.word	0x080085b1
 800855c:	080085b1 	.word	0x080085b1
 8008560:	080085b1 	.word	0x080085b1
 8008564:	08008593 	.word	0x08008593
 8008568:	080085b1 	.word	0x080085b1
 800856c:	080085b1 	.word	0x080085b1
 8008570:	080085b1 	.word	0x080085b1
 8008574:	0800859d 	.word	0x0800859d
 8008578:	080085b1 	.word	0x080085b1
 800857c:	080085b1 	.word	0x080085b1
 8008580:	080085b1 	.word	0x080085b1
 8008584:	080085a7 	.word	0x080085a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800858e:	60fb      	str	r3, [r7, #12]

      break;
 8008590:	e00f      	b.n	80085b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008598:	60fb      	str	r3, [r7, #12]

      break;
 800859a:	e00a      	b.n	80085b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a2:	60fb      	str	r3, [r7, #12]

      break;
 80085a4:	e005      	b.n	80085b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ac:	60fb      	str	r3, [r7, #12]

      break;
 80085ae:	e000      	b.n	80085b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80085b0:	bf00      	nop
  }

  return tmpreg;
 80085b2:	68fb      	ldr	r3, [r7, #12]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a32      	ldr	r2, [pc, #200]	@ (80086d8 <TIM_Base_SetConfig+0xdc>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d007      	beq.n	8008624 <TIM_Base_SetConfig+0x28>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800861a:	d003      	beq.n	8008624 <TIM_Base_SetConfig+0x28>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a2f      	ldr	r2, [pc, #188]	@ (80086dc <TIM_Base_SetConfig+0xe0>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d108      	bne.n	8008636 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800862a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	4313      	orrs	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a27      	ldr	r2, [pc, #156]	@ (80086d8 <TIM_Base_SetConfig+0xdc>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d013      	beq.n	8008666 <TIM_Base_SetConfig+0x6a>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008644:	d00f      	beq.n	8008666 <TIM_Base_SetConfig+0x6a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a24      	ldr	r2, [pc, #144]	@ (80086dc <TIM_Base_SetConfig+0xe0>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00b      	beq.n	8008666 <TIM_Base_SetConfig+0x6a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a23      	ldr	r2, [pc, #140]	@ (80086e0 <TIM_Base_SetConfig+0xe4>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d007      	beq.n	8008666 <TIM_Base_SetConfig+0x6a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a22      	ldr	r2, [pc, #136]	@ (80086e4 <TIM_Base_SetConfig+0xe8>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d003      	beq.n	8008666 <TIM_Base_SetConfig+0x6a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a21      	ldr	r2, [pc, #132]	@ (80086e8 <TIM_Base_SetConfig+0xec>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d108      	bne.n	8008678 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800866c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4313      	orrs	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	4313      	orrs	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a0e      	ldr	r2, [pc, #56]	@ (80086d8 <TIM_Base_SetConfig+0xdc>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d00b      	beq.n	80086bc <TIM_Base_SetConfig+0xc0>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a0e      	ldr	r2, [pc, #56]	@ (80086e0 <TIM_Base_SetConfig+0xe4>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d007      	beq.n	80086bc <TIM_Base_SetConfig+0xc0>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a0d      	ldr	r2, [pc, #52]	@ (80086e4 <TIM_Base_SetConfig+0xe8>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d003      	beq.n	80086bc <TIM_Base_SetConfig+0xc0>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a0c      	ldr	r2, [pc, #48]	@ (80086e8 <TIM_Base_SetConfig+0xec>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d103      	bne.n	80086c4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	691a      	ldr	r2, [r3, #16]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	615a      	str	r2, [r3, #20]
}
 80086ca:	bf00      	nop
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	40012c00 	.word	0x40012c00
 80086dc:	40000400 	.word	0x40000400
 80086e0:	40014000 	.word	0x40014000
 80086e4:	40014400 	.word	0x40014400
 80086e8:	40014800 	.word	0x40014800

080086ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	f023 0201 	bic.w	r2, r3, #1
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6a1b      	ldr	r3, [r3, #32]
 8008710:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	4a20      	ldr	r2, [pc, #128]	@ (8008798 <TIM_TI1_SetConfig+0xac>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d00b      	beq.n	8008732 <TIM_TI1_SetConfig+0x46>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008720:	d007      	beq.n	8008732 <TIM_TI1_SetConfig+0x46>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	4a1d      	ldr	r2, [pc, #116]	@ (800879c <TIM_TI1_SetConfig+0xb0>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d003      	beq.n	8008732 <TIM_TI1_SetConfig+0x46>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4a1c      	ldr	r2, [pc, #112]	@ (80087a0 <TIM_TI1_SetConfig+0xb4>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d101      	bne.n	8008736 <TIM_TI1_SetConfig+0x4a>
 8008732:	2301      	movs	r3, #1
 8008734:	e000      	b.n	8008738 <TIM_TI1_SetConfig+0x4c>
 8008736:	2300      	movs	r3, #0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d008      	beq.n	800874e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f023 0303 	bic.w	r3, r3, #3
 8008742:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4313      	orrs	r3, r2
 800874a:	617b      	str	r3, [r7, #20]
 800874c:	e003      	b.n	8008756 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f043 0301 	orr.w	r3, r3, #1
 8008754:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800875c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	011b      	lsls	r3, r3, #4
 8008762:	b2db      	uxtb	r3, r3
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	4313      	orrs	r3, r2
 8008768:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	f023 030a 	bic.w	r3, r3, #10
 8008770:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	f003 030a 	and.w	r3, r3, #10
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	4313      	orrs	r3, r2
 800877c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	621a      	str	r2, [r3, #32]
}
 800878a:	bf00      	nop
 800878c:	371c      	adds	r7, #28
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	40012c00 	.word	0x40012c00
 800879c:	40000400 	.word	0x40000400
 80087a0:	40014000 	.word	0x40014000

080087a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	f023 0201 	bic.w	r2, r3, #1
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	011b      	lsls	r3, r3, #4
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f023 030a 	bic.w	r3, r3, #10
 80087e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	621a      	str	r2, [r3, #32]
}
 80087f6:	bf00      	nop
 80087f8:	371c      	adds	r7, #28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008802:	b480      	push	{r7}
 8008804:	b087      	sub	sp, #28
 8008806:	af00      	add	r7, sp, #0
 8008808:	60f8      	str	r0, [r7, #12]
 800880a:	60b9      	str	r1, [r7, #8]
 800880c:	607a      	str	r2, [r7, #4]
 800880e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	f023 0210 	bic.w	r2, r3, #16
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800882e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	021b      	lsls	r3, r3, #8
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	4313      	orrs	r3, r2
 8008838:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008840:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	031b      	lsls	r3, r3, #12
 8008846:	b29b      	uxth	r3, r3
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	4313      	orrs	r3, r2
 800884c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008854:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	011b      	lsls	r3, r3, #4
 800885a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	4313      	orrs	r3, r2
 8008862:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	621a      	str	r2, [r3, #32]
}
 8008870:	bf00      	nop
 8008872:	371c      	adds	r7, #28
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800887c:	b480      	push	{r7}
 800887e:	b087      	sub	sp, #28
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6a1b      	ldr	r3, [r3, #32]
 800888c:	f023 0210 	bic.w	r2, r3, #16
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	031b      	lsls	r3, r3, #12
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80088b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	011b      	lsls	r3, r3, #4
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	621a      	str	r2, [r3, #32]
}
 80088d0:	bf00      	nop
 80088d2:	371c      	adds	r7, #28
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f023 0303 	bic.w	r3, r3, #3
 8008908:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800890a:	697a      	ldr	r2, [r7, #20]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4313      	orrs	r3, r2
 8008910:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008918:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	011b      	lsls	r3, r3, #4
 800891e:	b2db      	uxtb	r3, r3
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	4313      	orrs	r3, r2
 8008924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800892c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	021b      	lsls	r3, r3, #8
 8008932:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	4313      	orrs	r3, r2
 800893a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	621a      	str	r2, [r3, #32]
}
 8008948:	bf00      	nop
 800894a:	371c      	adds	r7, #28
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	69db      	ldr	r3, [r3, #28]
 8008972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008980:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	021b      	lsls	r3, r3, #8
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	4313      	orrs	r3, r2
 800898a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008992:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	031b      	lsls	r3, r3, #12
 8008998:	b29b      	uxth	r3, r3
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	4313      	orrs	r3, r2
 800899e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80089a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	031b      	lsls	r3, r3, #12
 80089ac:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	621a      	str	r2, [r3, #32]
}
 80089c2:	bf00      	nop
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b085      	sub	sp, #20
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	f043 0307 	orr.w	r3, r3, #7
 80089f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	609a      	str	r2, [r3, #8]
}
 80089f8:	bf00      	nop
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	021a      	lsls	r2, r3, #8
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	431a      	orrs	r2, r3
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	609a      	str	r2, [r3, #8]
}
 8008a38:	bf00      	nop
 8008a3a:	371c      	adds	r7, #28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	f003 031f 	and.w	r3, r3, #31
 8008a56:	2201      	movs	r2, #1
 8008a58:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6a1a      	ldr	r2, [r3, #32]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	43db      	mvns	r3, r3
 8008a66:	401a      	ands	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6a1a      	ldr	r2, [r3, #32]
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f003 031f 	and.w	r3, r3, #31
 8008a76:	6879      	ldr	r1, [r7, #4]
 8008a78:	fa01 f303 	lsl.w	r3, r1, r3
 8008a7c:	431a      	orrs	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	621a      	str	r2, [r3, #32]
}
 8008a82:	bf00      	nop
 8008a84:	371c      	adds	r7, #28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
	...

08008a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d101      	bne.n	8008aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	e054      	b.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a24      	ldr	r2, [pc, #144]	@ (8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d108      	bne.n	8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008ad8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a17      	ldr	r2, [pc, #92]	@ (8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00e      	beq.n	8008b26 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b10:	d009      	beq.n	8008b26 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a13      	ldr	r2, [pc, #76]	@ (8008b64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d004      	beq.n	8008b26 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a11      	ldr	r2, [pc, #68]	@ (8008b68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d10c      	bne.n	8008b40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	40012c00 	.word	0x40012c00
 8008b64:	40000400 	.word	0x40000400
 8008b68:	40014000 	.word	0x40014000

08008b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <arm_abs_f32>:
 8008ba8:	b470      	push	{r4, r5, r6}
 8008baa:	0896      	lsrs	r6, r2, #2
 8008bac:	d025      	beq.n	8008bfa <arm_abs_f32+0x52>
 8008bae:	f100 0410 	add.w	r4, r0, #16
 8008bb2:	f101 0310 	add.w	r3, r1, #16
 8008bb6:	4635      	mov	r5, r6
 8008bb8:	ed54 7a04 	vldr	s15, [r4, #-16]
 8008bbc:	eef0 7ae7 	vabs.f32	s15, s15
 8008bc0:	ed43 7a04 	vstr	s15, [r3, #-16]
 8008bc4:	ed54 7a03 	vldr	s15, [r4, #-12]
 8008bc8:	eef0 7ae7 	vabs.f32	s15, s15
 8008bcc:	ed43 7a03 	vstr	s15, [r3, #-12]
 8008bd0:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008bd4:	eef0 7ae7 	vabs.f32	s15, s15
 8008bd8:	ed43 7a02 	vstr	s15, [r3, #-8]
 8008bdc:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008be0:	3d01      	subs	r5, #1
 8008be2:	eef0 7ae7 	vabs.f32	s15, s15
 8008be6:	ed43 7a01 	vstr	s15, [r3, #-4]
 8008bea:	f104 0410 	add.w	r4, r4, #16
 8008bee:	f103 0310 	add.w	r3, r3, #16
 8008bf2:	d1e1      	bne.n	8008bb8 <arm_abs_f32+0x10>
 8008bf4:	0136      	lsls	r6, r6, #4
 8008bf6:	4430      	add	r0, r6
 8008bf8:	4431      	add	r1, r6
 8008bfa:	f012 0203 	ands.w	r2, r2, #3
 8008bfe:	d015      	beq.n	8008c2c <arm_abs_f32+0x84>
 8008c00:	edd0 7a00 	vldr	s15, [r0]
 8008c04:	3a01      	subs	r2, #1
 8008c06:	eef0 7ae7 	vabs.f32	s15, s15
 8008c0a:	edc1 7a00 	vstr	s15, [r1]
 8008c0e:	d00d      	beq.n	8008c2c <arm_abs_f32+0x84>
 8008c10:	edd0 7a01 	vldr	s15, [r0, #4]
 8008c14:	2a01      	cmp	r2, #1
 8008c16:	eef0 7ae7 	vabs.f32	s15, s15
 8008c1a:	edc1 7a01 	vstr	s15, [r1, #4]
 8008c1e:	d005      	beq.n	8008c2c <arm_abs_f32+0x84>
 8008c20:	edd0 7a02 	vldr	s15, [r0, #8]
 8008c24:	eef0 7ae7 	vabs.f32	s15, s15
 8008c28:	edc1 7a02 	vstr	s15, [r1, #8]
 8008c2c:	bc70      	pop	{r4, r5, r6}
 8008c2e:	4770      	bx	lr

08008c30 <memset>:
 8008c30:	4402      	add	r2, r0
 8008c32:	4603      	mov	r3, r0
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d100      	bne.n	8008c3a <memset+0xa>
 8008c38:	4770      	bx	lr
 8008c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c3e:	e7f9      	b.n	8008c34 <memset+0x4>

08008c40 <__errno>:
 8008c40:	4b01      	ldr	r3, [pc, #4]	@ (8008c48 <__errno+0x8>)
 8008c42:	6818      	ldr	r0, [r3, #0]
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	2000006c 	.word	0x2000006c

08008c4c <__libc_init_array>:
 8008c4c:	b570      	push	{r4, r5, r6, lr}
 8008c4e:	4d0d      	ldr	r5, [pc, #52]	@ (8008c84 <__libc_init_array+0x38>)
 8008c50:	4c0d      	ldr	r4, [pc, #52]	@ (8008c88 <__libc_init_array+0x3c>)
 8008c52:	1b64      	subs	r4, r4, r5
 8008c54:	10a4      	asrs	r4, r4, #2
 8008c56:	2600      	movs	r6, #0
 8008c58:	42a6      	cmp	r6, r4
 8008c5a:	d109      	bne.n	8008c70 <__libc_init_array+0x24>
 8008c5c:	4d0b      	ldr	r5, [pc, #44]	@ (8008c8c <__libc_init_array+0x40>)
 8008c5e:	4c0c      	ldr	r4, [pc, #48]	@ (8008c90 <__libc_init_array+0x44>)
 8008c60:	f000 fdb8 	bl	80097d4 <_init>
 8008c64:	1b64      	subs	r4, r4, r5
 8008c66:	10a4      	asrs	r4, r4, #2
 8008c68:	2600      	movs	r6, #0
 8008c6a:	42a6      	cmp	r6, r4
 8008c6c:	d105      	bne.n	8008c7a <__libc_init_array+0x2e>
 8008c6e:	bd70      	pop	{r4, r5, r6, pc}
 8008c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c74:	4798      	blx	r3
 8008c76:	3601      	adds	r6, #1
 8008c78:	e7ee      	b.n	8008c58 <__libc_init_array+0xc>
 8008c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c7e:	4798      	blx	r3
 8008c80:	3601      	adds	r6, #1
 8008c82:	e7f2      	b.n	8008c6a <__libc_init_array+0x1e>
 8008c84:	08009bec 	.word	0x08009bec
 8008c88:	08009bec 	.word	0x08009bec
 8008c8c:	08009bec 	.word	0x08009bec
 8008c90:	08009bf0 	.word	0x08009bf0

08008c94 <sqrtf>:
 8008c94:	b508      	push	{r3, lr}
 8008c96:	ed2d 8b02 	vpush	{d8}
 8008c9a:	eeb0 8a40 	vmov.f32	s16, s0
 8008c9e:	f000 f8a1 	bl	8008de4 <__ieee754_sqrtf>
 8008ca2:	eeb4 8a48 	vcmp.f32	s16, s16
 8008ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008caa:	d60c      	bvs.n	8008cc6 <sqrtf+0x32>
 8008cac:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008ccc <sqrtf+0x38>
 8008cb0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb8:	d505      	bpl.n	8008cc6 <sqrtf+0x32>
 8008cba:	f7ff ffc1 	bl	8008c40 <__errno>
 8008cbe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008cc2:	2321      	movs	r3, #33	@ 0x21
 8008cc4:	6003      	str	r3, [r0, #0]
 8008cc6:	ecbd 8b02 	vpop	{d8}
 8008cca:	bd08      	pop	{r3, pc}
 8008ccc:	00000000 	.word	0x00000000

08008cd0 <cosf>:
 8008cd0:	ee10 3a10 	vmov	r3, s0
 8008cd4:	b507      	push	{r0, r1, r2, lr}
 8008cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8008d50 <cosf+0x80>)
 8008cd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d806      	bhi.n	8008cee <cosf+0x1e>
 8008ce0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8008d54 <cosf+0x84>
 8008ce4:	b003      	add	sp, #12
 8008ce6:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cea:	f000 b87f 	b.w	8008dec <__kernel_cosf>
 8008cee:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008cf2:	d304      	bcc.n	8008cfe <cosf+0x2e>
 8008cf4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008cf8:	b003      	add	sp, #12
 8008cfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8008cfe:	4668      	mov	r0, sp
 8008d00:	f000 f914 	bl	8008f2c <__ieee754_rem_pio2f>
 8008d04:	f000 0003 	and.w	r0, r0, #3
 8008d08:	2801      	cmp	r0, #1
 8008d0a:	d009      	beq.n	8008d20 <cosf+0x50>
 8008d0c:	2802      	cmp	r0, #2
 8008d0e:	d010      	beq.n	8008d32 <cosf+0x62>
 8008d10:	b9b0      	cbnz	r0, 8008d40 <cosf+0x70>
 8008d12:	eddd 0a01 	vldr	s1, [sp, #4]
 8008d16:	ed9d 0a00 	vldr	s0, [sp]
 8008d1a:	f000 f867 	bl	8008dec <__kernel_cosf>
 8008d1e:	e7eb      	b.n	8008cf8 <cosf+0x28>
 8008d20:	eddd 0a01 	vldr	s1, [sp, #4]
 8008d24:	ed9d 0a00 	vldr	s0, [sp]
 8008d28:	f000 f8b8 	bl	8008e9c <__kernel_sinf>
 8008d2c:	eeb1 0a40 	vneg.f32	s0, s0
 8008d30:	e7e2      	b.n	8008cf8 <cosf+0x28>
 8008d32:	eddd 0a01 	vldr	s1, [sp, #4]
 8008d36:	ed9d 0a00 	vldr	s0, [sp]
 8008d3a:	f000 f857 	bl	8008dec <__kernel_cosf>
 8008d3e:	e7f5      	b.n	8008d2c <cosf+0x5c>
 8008d40:	eddd 0a01 	vldr	s1, [sp, #4]
 8008d44:	ed9d 0a00 	vldr	s0, [sp]
 8008d48:	2001      	movs	r0, #1
 8008d4a:	f000 f8a7 	bl	8008e9c <__kernel_sinf>
 8008d4e:	e7d3      	b.n	8008cf8 <cosf+0x28>
 8008d50:	3f490fd8 	.word	0x3f490fd8
 8008d54:	00000000 	.word	0x00000000

08008d58 <sinf>:
 8008d58:	ee10 3a10 	vmov	r3, s0
 8008d5c:	b507      	push	{r0, r1, r2, lr}
 8008d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8008ddc <sinf+0x84>)
 8008d60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d807      	bhi.n	8008d78 <sinf+0x20>
 8008d68:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8008de0 <sinf+0x88>
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	b003      	add	sp, #12
 8008d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d74:	f000 b892 	b.w	8008e9c <__kernel_sinf>
 8008d78:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008d7c:	d304      	bcc.n	8008d88 <sinf+0x30>
 8008d7e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008d82:	b003      	add	sp, #12
 8008d84:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d88:	4668      	mov	r0, sp
 8008d8a:	f000 f8cf 	bl	8008f2c <__ieee754_rem_pio2f>
 8008d8e:	f000 0003 	and.w	r0, r0, #3
 8008d92:	2801      	cmp	r0, #1
 8008d94:	d00a      	beq.n	8008dac <sinf+0x54>
 8008d96:	2802      	cmp	r0, #2
 8008d98:	d00f      	beq.n	8008dba <sinf+0x62>
 8008d9a:	b9c0      	cbnz	r0, 8008dce <sinf+0x76>
 8008d9c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008da0:	ed9d 0a00 	vldr	s0, [sp]
 8008da4:	2001      	movs	r0, #1
 8008da6:	f000 f879 	bl	8008e9c <__kernel_sinf>
 8008daa:	e7ea      	b.n	8008d82 <sinf+0x2a>
 8008dac:	eddd 0a01 	vldr	s1, [sp, #4]
 8008db0:	ed9d 0a00 	vldr	s0, [sp]
 8008db4:	f000 f81a 	bl	8008dec <__kernel_cosf>
 8008db8:	e7e3      	b.n	8008d82 <sinf+0x2a>
 8008dba:	eddd 0a01 	vldr	s1, [sp, #4]
 8008dbe:	ed9d 0a00 	vldr	s0, [sp]
 8008dc2:	2001      	movs	r0, #1
 8008dc4:	f000 f86a 	bl	8008e9c <__kernel_sinf>
 8008dc8:	eeb1 0a40 	vneg.f32	s0, s0
 8008dcc:	e7d9      	b.n	8008d82 <sinf+0x2a>
 8008dce:	eddd 0a01 	vldr	s1, [sp, #4]
 8008dd2:	ed9d 0a00 	vldr	s0, [sp]
 8008dd6:	f000 f809 	bl	8008dec <__kernel_cosf>
 8008dda:	e7f5      	b.n	8008dc8 <sinf+0x70>
 8008ddc:	3f490fd8 	.word	0x3f490fd8
 8008de0:	00000000 	.word	0x00000000

08008de4 <__ieee754_sqrtf>:
 8008de4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008de8:	4770      	bx	lr
	...

08008dec <__kernel_cosf>:
 8008dec:	ee10 3a10 	vmov	r3, s0
 8008df0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008df4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008df8:	eef0 6a40 	vmov.f32	s13, s0
 8008dfc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008e00:	d204      	bcs.n	8008e0c <__kernel_cosf+0x20>
 8008e02:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8008e06:	ee17 2a90 	vmov	r2, s15
 8008e0a:	b342      	cbz	r2, 8008e5e <__kernel_cosf+0x72>
 8008e0c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008e10:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8008e7c <__kernel_cosf+0x90>
 8008e14:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8008e80 <__kernel_cosf+0x94>
 8008e18:	4a1a      	ldr	r2, [pc, #104]	@ (8008e84 <__kernel_cosf+0x98>)
 8008e1a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008e88 <__kernel_cosf+0x9c>
 8008e24:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008e28:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8008e8c <__kernel_cosf+0xa0>
 8008e2c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008e30:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8008e90 <__kernel_cosf+0xa4>
 8008e34:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008e38:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8008e94 <__kernel_cosf+0xa8>
 8008e3c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008e40:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8008e44:	ee26 6a07 	vmul.f32	s12, s12, s14
 8008e48:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008e4c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8008e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e54:	d804      	bhi.n	8008e60 <__kernel_cosf+0x74>
 8008e56:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008e5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008e5e:	4770      	bx	lr
 8008e60:	4a0d      	ldr	r2, [pc, #52]	@ (8008e98 <__kernel_cosf+0xac>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	bf9a      	itte	ls
 8008e66:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8008e6a:	ee07 3a10 	vmovls	s14, r3
 8008e6e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8008e72:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008e76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e7a:	e7ec      	b.n	8008e56 <__kernel_cosf+0x6a>
 8008e7c:	ad47d74e 	.word	0xad47d74e
 8008e80:	310f74f6 	.word	0x310f74f6
 8008e84:	3e999999 	.word	0x3e999999
 8008e88:	b493f27c 	.word	0xb493f27c
 8008e8c:	37d00d01 	.word	0x37d00d01
 8008e90:	bab60b61 	.word	0xbab60b61
 8008e94:	3d2aaaab 	.word	0x3d2aaaab
 8008e98:	3f480000 	.word	0x3f480000

08008e9c <__kernel_sinf>:
 8008e9c:	ee10 3a10 	vmov	r3, s0
 8008ea0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ea4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008ea8:	d204      	bcs.n	8008eb4 <__kernel_sinf+0x18>
 8008eaa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008eae:	ee17 3a90 	vmov	r3, s15
 8008eb2:	b35b      	cbz	r3, 8008f0c <__kernel_sinf+0x70>
 8008eb4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008eb8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008f10 <__kernel_sinf+0x74>
 8008ebc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8008f14 <__kernel_sinf+0x78>
 8008ec0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008ec4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8008f18 <__kernel_sinf+0x7c>
 8008ec8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008ecc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8008f1c <__kernel_sinf+0x80>
 8008ed0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008ed4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8008f20 <__kernel_sinf+0x84>
 8008ed8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008edc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008ee0:	b930      	cbnz	r0, 8008ef0 <__kernel_sinf+0x54>
 8008ee2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8008f24 <__kernel_sinf+0x88>
 8008ee6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008eea:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008eee:	4770      	bx	lr
 8008ef0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008ef4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8008ef8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008efc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008f00:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8008f28 <__kernel_sinf+0x8c>
 8008f04:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008f08:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	2f2ec9d3 	.word	0x2f2ec9d3
 8008f14:	b2d72f34 	.word	0xb2d72f34
 8008f18:	3638ef1b 	.word	0x3638ef1b
 8008f1c:	b9500d01 	.word	0xb9500d01
 8008f20:	3c088889 	.word	0x3c088889
 8008f24:	be2aaaab 	.word	0xbe2aaaab
 8008f28:	3e2aaaab 	.word	0x3e2aaaab

08008f2c <__ieee754_rem_pio2f>:
 8008f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f2e:	ee10 6a10 	vmov	r6, s0
 8008f32:	4b88      	ldr	r3, [pc, #544]	@ (8009154 <__ieee754_rem_pio2f+0x228>)
 8008f34:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8008f38:	429d      	cmp	r5, r3
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	d805      	bhi.n	8008f4c <__ieee754_rem_pio2f+0x20>
 8008f40:	2300      	movs	r3, #0
 8008f42:	ed80 0a00 	vstr	s0, [r0]
 8008f46:	6043      	str	r3, [r0, #4]
 8008f48:	2000      	movs	r0, #0
 8008f4a:	e022      	b.n	8008f92 <__ieee754_rem_pio2f+0x66>
 8008f4c:	4b82      	ldr	r3, [pc, #520]	@ (8009158 <__ieee754_rem_pio2f+0x22c>)
 8008f4e:	429d      	cmp	r5, r3
 8008f50:	d83a      	bhi.n	8008fc8 <__ieee754_rem_pio2f+0x9c>
 8008f52:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8008f56:	2e00      	cmp	r6, #0
 8008f58:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800915c <__ieee754_rem_pio2f+0x230>
 8008f5c:	4a80      	ldr	r2, [pc, #512]	@ (8009160 <__ieee754_rem_pio2f+0x234>)
 8008f5e:	f023 030f 	bic.w	r3, r3, #15
 8008f62:	dd18      	ble.n	8008f96 <__ieee754_rem_pio2f+0x6a>
 8008f64:	4293      	cmp	r3, r2
 8008f66:	ee70 7a47 	vsub.f32	s15, s0, s14
 8008f6a:	bf09      	itett	eq
 8008f6c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8009164 <__ieee754_rem_pio2f+0x238>
 8008f70:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8009168 <__ieee754_rem_pio2f+0x23c>
 8008f74:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800916c <__ieee754_rem_pio2f+0x240>
 8008f78:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8008f7c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8008f80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f84:	ed80 7a00 	vstr	s14, [r0]
 8008f88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f8c:	edc0 7a01 	vstr	s15, [r0, #4]
 8008f90:	2001      	movs	r0, #1
 8008f92:	b007      	add	sp, #28
 8008f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f96:	4293      	cmp	r3, r2
 8008f98:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008f9c:	bf09      	itett	eq
 8008f9e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8009164 <__ieee754_rem_pio2f+0x238>
 8008fa2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8009168 <__ieee754_rem_pio2f+0x23c>
 8008fa6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800916c <__ieee754_rem_pio2f+0x240>
 8008faa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8008fae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008fb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008fb6:	ed80 7a00 	vstr	s14, [r0]
 8008fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fbe:	edc0 7a01 	vstr	s15, [r0, #4]
 8008fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc6:	e7e4      	b.n	8008f92 <__ieee754_rem_pio2f+0x66>
 8008fc8:	4b69      	ldr	r3, [pc, #420]	@ (8009170 <__ieee754_rem_pio2f+0x244>)
 8008fca:	429d      	cmp	r5, r3
 8008fcc:	d873      	bhi.n	80090b6 <__ieee754_rem_pio2f+0x18a>
 8008fce:	f000 f8dd 	bl	800918c <fabsf>
 8008fd2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8009174 <__ieee754_rem_pio2f+0x248>
 8008fd6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008fda:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fe6:	ee17 0a90 	vmov	r0, s15
 8008fea:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800915c <__ieee754_rem_pio2f+0x230>
 8008fee:	eea7 0a67 	vfms.f32	s0, s14, s15
 8008ff2:	281f      	cmp	r0, #31
 8008ff4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009168 <__ieee754_rem_pio2f+0x23c>
 8008ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ffc:	eeb1 6a47 	vneg.f32	s12, s14
 8009000:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009004:	ee16 1a90 	vmov	r1, s13
 8009008:	dc09      	bgt.n	800901e <__ieee754_rem_pio2f+0xf2>
 800900a:	4a5b      	ldr	r2, [pc, #364]	@ (8009178 <__ieee754_rem_pio2f+0x24c>)
 800900c:	1e47      	subs	r7, r0, #1
 800900e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009012:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8009016:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800901a:	4293      	cmp	r3, r2
 800901c:	d107      	bne.n	800902e <__ieee754_rem_pio2f+0x102>
 800901e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8009022:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8009026:	2a08      	cmp	r2, #8
 8009028:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800902c:	dc14      	bgt.n	8009058 <__ieee754_rem_pio2f+0x12c>
 800902e:	6021      	str	r1, [r4, #0]
 8009030:	ed94 7a00 	vldr	s14, [r4]
 8009034:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009038:	2e00      	cmp	r6, #0
 800903a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800903e:	ed84 0a01 	vstr	s0, [r4, #4]
 8009042:	daa6      	bge.n	8008f92 <__ieee754_rem_pio2f+0x66>
 8009044:	eeb1 7a47 	vneg.f32	s14, s14
 8009048:	eeb1 0a40 	vneg.f32	s0, s0
 800904c:	ed84 7a00 	vstr	s14, [r4]
 8009050:	ed84 0a01 	vstr	s0, [r4, #4]
 8009054:	4240      	negs	r0, r0
 8009056:	e79c      	b.n	8008f92 <__ieee754_rem_pio2f+0x66>
 8009058:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8009164 <__ieee754_rem_pio2f+0x238>
 800905c:	eef0 6a40 	vmov.f32	s13, s0
 8009060:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009064:	ee70 7a66 	vsub.f32	s15, s0, s13
 8009068:	eee6 7a25 	vfma.f32	s15, s12, s11
 800906c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800916c <__ieee754_rem_pio2f+0x240>
 8009070:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009074:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009078:	ee15 2a90 	vmov	r2, s11
 800907c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009080:	1a5b      	subs	r3, r3, r1
 8009082:	2b19      	cmp	r3, #25
 8009084:	dc04      	bgt.n	8009090 <__ieee754_rem_pio2f+0x164>
 8009086:	edc4 5a00 	vstr	s11, [r4]
 800908a:	eeb0 0a66 	vmov.f32	s0, s13
 800908e:	e7cf      	b.n	8009030 <__ieee754_rem_pio2f+0x104>
 8009090:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800917c <__ieee754_rem_pio2f+0x250>
 8009094:	eeb0 0a66 	vmov.f32	s0, s13
 8009098:	eea6 0a25 	vfma.f32	s0, s12, s11
 800909c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80090a0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009180 <__ieee754_rem_pio2f+0x254>
 80090a4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80090a8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80090ac:	ee30 7a67 	vsub.f32	s14, s0, s15
 80090b0:	ed84 7a00 	vstr	s14, [r4]
 80090b4:	e7bc      	b.n	8009030 <__ieee754_rem_pio2f+0x104>
 80090b6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80090ba:	d306      	bcc.n	80090ca <__ieee754_rem_pio2f+0x19e>
 80090bc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80090c0:	edc0 7a01 	vstr	s15, [r0, #4]
 80090c4:	edc0 7a00 	vstr	s15, [r0]
 80090c8:	e73e      	b.n	8008f48 <__ieee754_rem_pio2f+0x1c>
 80090ca:	15ea      	asrs	r2, r5, #23
 80090cc:	3a86      	subs	r2, #134	@ 0x86
 80090ce:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80090d2:	ee07 3a90 	vmov	s15, r3
 80090d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80090da:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8009184 <__ieee754_rem_pio2f+0x258>
 80090de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80090e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80090e6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80090ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80090ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80090f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80090f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80090fa:	ed8d 7a04 	vstr	s14, [sp, #16]
 80090fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009102:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800910a:	edcd 7a05 	vstr	s15, [sp, #20]
 800910e:	d11e      	bne.n	800914e <__ieee754_rem_pio2f+0x222>
 8009110:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009118:	bf0c      	ite	eq
 800911a:	2301      	moveq	r3, #1
 800911c:	2302      	movne	r3, #2
 800911e:	491a      	ldr	r1, [pc, #104]	@ (8009188 <__ieee754_rem_pio2f+0x25c>)
 8009120:	9101      	str	r1, [sp, #4]
 8009122:	2102      	movs	r1, #2
 8009124:	9100      	str	r1, [sp, #0]
 8009126:	a803      	add	r0, sp, #12
 8009128:	4621      	mov	r1, r4
 800912a:	f000 f837 	bl	800919c <__kernel_rem_pio2f>
 800912e:	2e00      	cmp	r6, #0
 8009130:	f6bf af2f 	bge.w	8008f92 <__ieee754_rem_pio2f+0x66>
 8009134:	edd4 7a00 	vldr	s15, [r4]
 8009138:	eef1 7a67 	vneg.f32	s15, s15
 800913c:	edc4 7a00 	vstr	s15, [r4]
 8009140:	edd4 7a01 	vldr	s15, [r4, #4]
 8009144:	eef1 7a67 	vneg.f32	s15, s15
 8009148:	edc4 7a01 	vstr	s15, [r4, #4]
 800914c:	e782      	b.n	8009054 <__ieee754_rem_pio2f+0x128>
 800914e:	2303      	movs	r3, #3
 8009150:	e7e5      	b.n	800911e <__ieee754_rem_pio2f+0x1f2>
 8009152:	bf00      	nop
 8009154:	3f490fd8 	.word	0x3f490fd8
 8009158:	4016cbe3 	.word	0x4016cbe3
 800915c:	3fc90f80 	.word	0x3fc90f80
 8009160:	3fc90fd0 	.word	0x3fc90fd0
 8009164:	37354400 	.word	0x37354400
 8009168:	37354443 	.word	0x37354443
 800916c:	2e85a308 	.word	0x2e85a308
 8009170:	43490f80 	.word	0x43490f80
 8009174:	3f22f984 	.word	0x3f22f984
 8009178:	0800981c 	.word	0x0800981c
 800917c:	2e85a300 	.word	0x2e85a300
 8009180:	248d3132 	.word	0x248d3132
 8009184:	43800000 	.word	0x43800000
 8009188:	0800989c 	.word	0x0800989c

0800918c <fabsf>:
 800918c:	ee10 3a10 	vmov	r3, s0
 8009190:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009194:	ee00 3a10 	vmov	s0, r3
 8009198:	4770      	bx	lr
	...

0800919c <__kernel_rem_pio2f>:
 800919c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a0:	ed2d 8b04 	vpush	{d8-d9}
 80091a4:	b0d9      	sub	sp, #356	@ 0x164
 80091a6:	4690      	mov	r8, r2
 80091a8:	9001      	str	r0, [sp, #4]
 80091aa:	4ab9      	ldr	r2, [pc, #740]	@ (8009490 <__kernel_rem_pio2f+0x2f4>)
 80091ac:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80091ae:	f118 0f04 	cmn.w	r8, #4
 80091b2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80091b6:	460f      	mov	r7, r1
 80091b8:	f103 3bff 	add.w	fp, r3, #4294967295
 80091bc:	db27      	blt.n	800920e <__kernel_rem_pio2f+0x72>
 80091be:	f1b8 0203 	subs.w	r2, r8, #3
 80091c2:	bf48      	it	mi
 80091c4:	f108 0204 	addmi.w	r2, r8, #4
 80091c8:	10d2      	asrs	r2, r2, #3
 80091ca:	1c55      	adds	r5, r2, #1
 80091cc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80091ce:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80094a0 <__kernel_rem_pio2f+0x304>
 80091d2:	00e8      	lsls	r0, r5, #3
 80091d4:	eba2 060b 	sub.w	r6, r2, fp
 80091d8:	9002      	str	r0, [sp, #8]
 80091da:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80091de:	eb0a 0c0b 	add.w	ip, sl, fp
 80091e2:	ac1c      	add	r4, sp, #112	@ 0x70
 80091e4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80091e8:	2000      	movs	r0, #0
 80091ea:	4560      	cmp	r0, ip
 80091ec:	dd11      	ble.n	8009212 <__kernel_rem_pio2f+0x76>
 80091ee:	a91c      	add	r1, sp, #112	@ 0x70
 80091f0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80091f4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80091f8:	f04f 0c00 	mov.w	ip, #0
 80091fc:	45d4      	cmp	ip, sl
 80091fe:	dc27      	bgt.n	8009250 <__kernel_rem_pio2f+0xb4>
 8009200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009204:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80094a0 <__kernel_rem_pio2f+0x304>
 8009208:	4606      	mov	r6, r0
 800920a:	2400      	movs	r4, #0
 800920c:	e016      	b.n	800923c <__kernel_rem_pio2f+0xa0>
 800920e:	2200      	movs	r2, #0
 8009210:	e7db      	b.n	80091ca <__kernel_rem_pio2f+0x2e>
 8009212:	42c6      	cmn	r6, r0
 8009214:	bf5d      	ittte	pl
 8009216:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800921a:	ee07 1a90 	vmovpl	s15, r1
 800921e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009222:	eef0 7a47 	vmovmi.f32	s15, s14
 8009226:	ece4 7a01 	vstmia	r4!, {s15}
 800922a:	3001      	adds	r0, #1
 800922c:	e7dd      	b.n	80091ea <__kernel_rem_pio2f+0x4e>
 800922e:	ecfe 6a01 	vldmia	lr!, {s13}
 8009232:	ed96 7a00 	vldr	s14, [r6]
 8009236:	eee6 7a87 	vfma.f32	s15, s13, s14
 800923a:	3401      	adds	r4, #1
 800923c:	455c      	cmp	r4, fp
 800923e:	f1a6 0604 	sub.w	r6, r6, #4
 8009242:	ddf4      	ble.n	800922e <__kernel_rem_pio2f+0x92>
 8009244:	ece9 7a01 	vstmia	r9!, {s15}
 8009248:	f10c 0c01 	add.w	ip, ip, #1
 800924c:	3004      	adds	r0, #4
 800924e:	e7d5      	b.n	80091fc <__kernel_rem_pio2f+0x60>
 8009250:	a908      	add	r1, sp, #32
 8009252:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009256:	9104      	str	r1, [sp, #16]
 8009258:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800925a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800949c <__kernel_rem_pio2f+0x300>
 800925e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8009498 <__kernel_rem_pio2f+0x2fc>
 8009262:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009266:	9203      	str	r2, [sp, #12]
 8009268:	4654      	mov	r4, sl
 800926a:	00a2      	lsls	r2, r4, #2
 800926c:	9205      	str	r2, [sp, #20]
 800926e:	aa58      	add	r2, sp, #352	@ 0x160
 8009270:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8009274:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8009278:	a944      	add	r1, sp, #272	@ 0x110
 800927a:	aa08      	add	r2, sp, #32
 800927c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009280:	4694      	mov	ip, r2
 8009282:	4626      	mov	r6, r4
 8009284:	2e00      	cmp	r6, #0
 8009286:	f1a0 0004 	sub.w	r0, r0, #4
 800928a:	dc4c      	bgt.n	8009326 <__kernel_rem_pio2f+0x18a>
 800928c:	4628      	mov	r0, r5
 800928e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009292:	f000 f9f5 	bl	8009680 <scalbnf>
 8009296:	eeb0 8a40 	vmov.f32	s16, s0
 800929a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800929e:	ee28 0a00 	vmul.f32	s0, s16, s0
 80092a2:	f000 fa53 	bl	800974c <floorf>
 80092a6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80092aa:	eea0 8a67 	vfms.f32	s16, s0, s15
 80092ae:	2d00      	cmp	r5, #0
 80092b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092b4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80092b8:	ee17 9a90 	vmov	r9, s15
 80092bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092c0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80092c4:	dd41      	ble.n	800934a <__kernel_rem_pio2f+0x1ae>
 80092c6:	f104 3cff 	add.w	ip, r4, #4294967295
 80092ca:	a908      	add	r1, sp, #32
 80092cc:	f1c5 0e08 	rsb	lr, r5, #8
 80092d0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80092d4:	fa46 f00e 	asr.w	r0, r6, lr
 80092d8:	4481      	add	r9, r0
 80092da:	fa00 f00e 	lsl.w	r0, r0, lr
 80092de:	1a36      	subs	r6, r6, r0
 80092e0:	f1c5 0007 	rsb	r0, r5, #7
 80092e4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80092e8:	4106      	asrs	r6, r0
 80092ea:	2e00      	cmp	r6, #0
 80092ec:	dd3c      	ble.n	8009368 <__kernel_rem_pio2f+0x1cc>
 80092ee:	f04f 0e00 	mov.w	lr, #0
 80092f2:	f109 0901 	add.w	r9, r9, #1
 80092f6:	4670      	mov	r0, lr
 80092f8:	4574      	cmp	r4, lr
 80092fa:	dc68      	bgt.n	80093ce <__kernel_rem_pio2f+0x232>
 80092fc:	2d00      	cmp	r5, #0
 80092fe:	dd03      	ble.n	8009308 <__kernel_rem_pio2f+0x16c>
 8009300:	2d01      	cmp	r5, #1
 8009302:	d074      	beq.n	80093ee <__kernel_rem_pio2f+0x252>
 8009304:	2d02      	cmp	r5, #2
 8009306:	d07d      	beq.n	8009404 <__kernel_rem_pio2f+0x268>
 8009308:	2e02      	cmp	r6, #2
 800930a:	d12d      	bne.n	8009368 <__kernel_rem_pio2f+0x1cc>
 800930c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009310:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009314:	b340      	cbz	r0, 8009368 <__kernel_rem_pio2f+0x1cc>
 8009316:	4628      	mov	r0, r5
 8009318:	9306      	str	r3, [sp, #24]
 800931a:	f000 f9b1 	bl	8009680 <scalbnf>
 800931e:	9b06      	ldr	r3, [sp, #24]
 8009320:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009324:	e020      	b.n	8009368 <__kernel_rem_pio2f+0x1cc>
 8009326:	ee60 7a28 	vmul.f32	s15, s0, s17
 800932a:	3e01      	subs	r6, #1
 800932c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009334:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009338:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800933c:	ecac 0a01 	vstmia	ip!, {s0}
 8009340:	ed90 0a00 	vldr	s0, [r0]
 8009344:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009348:	e79c      	b.n	8009284 <__kernel_rem_pio2f+0xe8>
 800934a:	d105      	bne.n	8009358 <__kernel_rem_pio2f+0x1bc>
 800934c:	1e60      	subs	r0, r4, #1
 800934e:	a908      	add	r1, sp, #32
 8009350:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8009354:	11f6      	asrs	r6, r6, #7
 8009356:	e7c8      	b.n	80092ea <__kernel_rem_pio2f+0x14e>
 8009358:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800935c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009364:	da31      	bge.n	80093ca <__kernel_rem_pio2f+0x22e>
 8009366:	2600      	movs	r6, #0
 8009368:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800936c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009370:	f040 8098 	bne.w	80094a4 <__kernel_rem_pio2f+0x308>
 8009374:	1e60      	subs	r0, r4, #1
 8009376:	2200      	movs	r2, #0
 8009378:	4550      	cmp	r0, sl
 800937a:	da4b      	bge.n	8009414 <__kernel_rem_pio2f+0x278>
 800937c:	2a00      	cmp	r2, #0
 800937e:	d065      	beq.n	800944c <__kernel_rem_pio2f+0x2b0>
 8009380:	3c01      	subs	r4, #1
 8009382:	ab08      	add	r3, sp, #32
 8009384:	3d08      	subs	r5, #8
 8009386:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d0f8      	beq.n	8009380 <__kernel_rem_pio2f+0x1e4>
 800938e:	4628      	mov	r0, r5
 8009390:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009394:	f000 f974 	bl	8009680 <scalbnf>
 8009398:	1c63      	adds	r3, r4, #1
 800939a:	aa44      	add	r2, sp, #272	@ 0x110
 800939c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800949c <__kernel_rem_pio2f+0x300>
 80093a0:	0099      	lsls	r1, r3, #2
 80093a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80093a6:	4623      	mov	r3, r4
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f280 80a9 	bge.w	8009500 <__kernel_rem_pio2f+0x364>
 80093ae:	4623      	mov	r3, r4
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f2c0 80c7 	blt.w	8009544 <__kernel_rem_pio2f+0x3a8>
 80093b6:	aa44      	add	r2, sp, #272	@ 0x110
 80093b8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80093bc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8009494 <__kernel_rem_pio2f+0x2f8>
 80093c0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80094a0 <__kernel_rem_pio2f+0x304>
 80093c4:	2000      	movs	r0, #0
 80093c6:	1ae2      	subs	r2, r4, r3
 80093c8:	e0b1      	b.n	800952e <__kernel_rem_pio2f+0x392>
 80093ca:	2602      	movs	r6, #2
 80093cc:	e78f      	b.n	80092ee <__kernel_rem_pio2f+0x152>
 80093ce:	f852 1b04 	ldr.w	r1, [r2], #4
 80093d2:	b948      	cbnz	r0, 80093e8 <__kernel_rem_pio2f+0x24c>
 80093d4:	b121      	cbz	r1, 80093e0 <__kernel_rem_pio2f+0x244>
 80093d6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80093da:	f842 1c04 	str.w	r1, [r2, #-4]
 80093de:	2101      	movs	r1, #1
 80093e0:	f10e 0e01 	add.w	lr, lr, #1
 80093e4:	4608      	mov	r0, r1
 80093e6:	e787      	b.n	80092f8 <__kernel_rem_pio2f+0x15c>
 80093e8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80093ec:	e7f5      	b.n	80093da <__kernel_rem_pio2f+0x23e>
 80093ee:	f104 3cff 	add.w	ip, r4, #4294967295
 80093f2:	aa08      	add	r2, sp, #32
 80093f4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80093f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80093fc:	a908      	add	r1, sp, #32
 80093fe:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8009402:	e781      	b.n	8009308 <__kernel_rem_pio2f+0x16c>
 8009404:	f104 3cff 	add.w	ip, r4, #4294967295
 8009408:	aa08      	add	r2, sp, #32
 800940a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800940e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009412:	e7f3      	b.n	80093fc <__kernel_rem_pio2f+0x260>
 8009414:	a908      	add	r1, sp, #32
 8009416:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800941a:	3801      	subs	r0, #1
 800941c:	430a      	orrs	r2, r1
 800941e:	e7ab      	b.n	8009378 <__kernel_rem_pio2f+0x1dc>
 8009420:	3201      	adds	r2, #1
 8009422:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8009426:	2e00      	cmp	r6, #0
 8009428:	d0fa      	beq.n	8009420 <__kernel_rem_pio2f+0x284>
 800942a:	9905      	ldr	r1, [sp, #20]
 800942c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8009430:	eb0d 0001 	add.w	r0, sp, r1
 8009434:	18e6      	adds	r6, r4, r3
 8009436:	a91c      	add	r1, sp, #112	@ 0x70
 8009438:	f104 0c01 	add.w	ip, r4, #1
 800943c:	384c      	subs	r0, #76	@ 0x4c
 800943e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8009442:	4422      	add	r2, r4
 8009444:	4562      	cmp	r2, ip
 8009446:	da04      	bge.n	8009452 <__kernel_rem_pio2f+0x2b6>
 8009448:	4614      	mov	r4, r2
 800944a:	e70e      	b.n	800926a <__kernel_rem_pio2f+0xce>
 800944c:	9804      	ldr	r0, [sp, #16]
 800944e:	2201      	movs	r2, #1
 8009450:	e7e7      	b.n	8009422 <__kernel_rem_pio2f+0x286>
 8009452:	9903      	ldr	r1, [sp, #12]
 8009454:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009458:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800945c:	9105      	str	r1, [sp, #20]
 800945e:	ee07 1a90 	vmov	s15, r1
 8009462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009466:	2400      	movs	r4, #0
 8009468:	ece6 7a01 	vstmia	r6!, {s15}
 800946c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80094a0 <__kernel_rem_pio2f+0x304>
 8009470:	46b1      	mov	r9, r6
 8009472:	455c      	cmp	r4, fp
 8009474:	dd04      	ble.n	8009480 <__kernel_rem_pio2f+0x2e4>
 8009476:	ece0 7a01 	vstmia	r0!, {s15}
 800947a:	f10c 0c01 	add.w	ip, ip, #1
 800947e:	e7e1      	b.n	8009444 <__kernel_rem_pio2f+0x2a8>
 8009480:	ecfe 6a01 	vldmia	lr!, {s13}
 8009484:	ed39 7a01 	vldmdb	r9!, {s14}
 8009488:	3401      	adds	r4, #1
 800948a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800948e:	e7f0      	b.n	8009472 <__kernel_rem_pio2f+0x2d6>
 8009490:	08009be0 	.word	0x08009be0
 8009494:	08009bb4 	.word	0x08009bb4
 8009498:	43800000 	.word	0x43800000
 800949c:	3b800000 	.word	0x3b800000
 80094a0:	00000000 	.word	0x00000000
 80094a4:	9b02      	ldr	r3, [sp, #8]
 80094a6:	eeb0 0a48 	vmov.f32	s0, s16
 80094aa:	eba3 0008 	sub.w	r0, r3, r8
 80094ae:	f000 f8e7 	bl	8009680 <scalbnf>
 80094b2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8009498 <__kernel_rem_pio2f+0x2fc>
 80094b6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80094ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094be:	db19      	blt.n	80094f4 <__kernel_rem_pio2f+0x358>
 80094c0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800949c <__kernel_rem_pio2f+0x300>
 80094c4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80094c8:	aa08      	add	r2, sp, #32
 80094ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094ce:	3508      	adds	r5, #8
 80094d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094d4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80094d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80094e0:	ee10 3a10 	vmov	r3, s0
 80094e4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80094e8:	ee17 3a90 	vmov	r3, s15
 80094ec:	3401      	adds	r4, #1
 80094ee:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80094f2:	e74c      	b.n	800938e <__kernel_rem_pio2f+0x1f2>
 80094f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80094f8:	aa08      	add	r2, sp, #32
 80094fa:	ee10 3a10 	vmov	r3, s0
 80094fe:	e7f6      	b.n	80094ee <__kernel_rem_pio2f+0x352>
 8009500:	a808      	add	r0, sp, #32
 8009502:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009506:	9001      	str	r0, [sp, #4]
 8009508:	ee07 0a90 	vmov	s15, r0
 800950c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009510:	3b01      	subs	r3, #1
 8009512:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009516:	ee20 0a07 	vmul.f32	s0, s0, s14
 800951a:	ed62 7a01 	vstmdb	r2!, {s15}
 800951e:	e743      	b.n	80093a8 <__kernel_rem_pio2f+0x20c>
 8009520:	ecfc 6a01 	vldmia	ip!, {s13}
 8009524:	ecb5 7a01 	vldmia	r5!, {s14}
 8009528:	eee6 7a87 	vfma.f32	s15, s13, s14
 800952c:	3001      	adds	r0, #1
 800952e:	4550      	cmp	r0, sl
 8009530:	dc01      	bgt.n	8009536 <__kernel_rem_pio2f+0x39a>
 8009532:	4282      	cmp	r2, r0
 8009534:	daf4      	bge.n	8009520 <__kernel_rem_pio2f+0x384>
 8009536:	a858      	add	r0, sp, #352	@ 0x160
 8009538:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800953c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8009540:	3b01      	subs	r3, #1
 8009542:	e735      	b.n	80093b0 <__kernel_rem_pio2f+0x214>
 8009544:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009546:	2b02      	cmp	r3, #2
 8009548:	dc09      	bgt.n	800955e <__kernel_rem_pio2f+0x3c2>
 800954a:	2b00      	cmp	r3, #0
 800954c:	dc2b      	bgt.n	80095a6 <__kernel_rem_pio2f+0x40a>
 800954e:	d044      	beq.n	80095da <__kernel_rem_pio2f+0x43e>
 8009550:	f009 0007 	and.w	r0, r9, #7
 8009554:	b059      	add	sp, #356	@ 0x164
 8009556:	ecbd 8b04 	vpop	{d8-d9}
 800955a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800955e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009560:	2b03      	cmp	r3, #3
 8009562:	d1f5      	bne.n	8009550 <__kernel_rem_pio2f+0x3b4>
 8009564:	aa30      	add	r2, sp, #192	@ 0xc0
 8009566:	1f0b      	subs	r3, r1, #4
 8009568:	4413      	add	r3, r2
 800956a:	461a      	mov	r2, r3
 800956c:	4620      	mov	r0, r4
 800956e:	2800      	cmp	r0, #0
 8009570:	f1a2 0204 	sub.w	r2, r2, #4
 8009574:	dc52      	bgt.n	800961c <__kernel_rem_pio2f+0x480>
 8009576:	4622      	mov	r2, r4
 8009578:	2a01      	cmp	r2, #1
 800957a:	f1a3 0304 	sub.w	r3, r3, #4
 800957e:	dc5d      	bgt.n	800963c <__kernel_rem_pio2f+0x4a0>
 8009580:	ab30      	add	r3, sp, #192	@ 0xc0
 8009582:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80094a0 <__kernel_rem_pio2f+0x304>
 8009586:	440b      	add	r3, r1
 8009588:	2c01      	cmp	r4, #1
 800958a:	dc67      	bgt.n	800965c <__kernel_rem_pio2f+0x4c0>
 800958c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8009590:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8009594:	2e00      	cmp	r6, #0
 8009596:	d167      	bne.n	8009668 <__kernel_rem_pio2f+0x4cc>
 8009598:	edc7 6a00 	vstr	s13, [r7]
 800959c:	ed87 7a01 	vstr	s14, [r7, #4]
 80095a0:	edc7 7a02 	vstr	s15, [r7, #8]
 80095a4:	e7d4      	b.n	8009550 <__kernel_rem_pio2f+0x3b4>
 80095a6:	ab30      	add	r3, sp, #192	@ 0xc0
 80095a8:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80094a0 <__kernel_rem_pio2f+0x304>
 80095ac:	440b      	add	r3, r1
 80095ae:	4622      	mov	r2, r4
 80095b0:	2a00      	cmp	r2, #0
 80095b2:	da24      	bge.n	80095fe <__kernel_rem_pio2f+0x462>
 80095b4:	b34e      	cbz	r6, 800960a <__kernel_rem_pio2f+0x46e>
 80095b6:	eef1 7a47 	vneg.f32	s15, s14
 80095ba:	edc7 7a00 	vstr	s15, [r7]
 80095be:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80095c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80095c6:	aa31      	add	r2, sp, #196	@ 0xc4
 80095c8:	2301      	movs	r3, #1
 80095ca:	429c      	cmp	r4, r3
 80095cc:	da20      	bge.n	8009610 <__kernel_rem_pio2f+0x474>
 80095ce:	b10e      	cbz	r6, 80095d4 <__kernel_rem_pio2f+0x438>
 80095d0:	eef1 7a67 	vneg.f32	s15, s15
 80095d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80095d8:	e7ba      	b.n	8009550 <__kernel_rem_pio2f+0x3b4>
 80095da:	ab30      	add	r3, sp, #192	@ 0xc0
 80095dc:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80094a0 <__kernel_rem_pio2f+0x304>
 80095e0:	440b      	add	r3, r1
 80095e2:	2c00      	cmp	r4, #0
 80095e4:	da05      	bge.n	80095f2 <__kernel_rem_pio2f+0x456>
 80095e6:	b10e      	cbz	r6, 80095ec <__kernel_rem_pio2f+0x450>
 80095e8:	eef1 7a67 	vneg.f32	s15, s15
 80095ec:	edc7 7a00 	vstr	s15, [r7]
 80095f0:	e7ae      	b.n	8009550 <__kernel_rem_pio2f+0x3b4>
 80095f2:	ed33 7a01 	vldmdb	r3!, {s14}
 80095f6:	3c01      	subs	r4, #1
 80095f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095fc:	e7f1      	b.n	80095e2 <__kernel_rem_pio2f+0x446>
 80095fe:	ed73 7a01 	vldmdb	r3!, {s15}
 8009602:	3a01      	subs	r2, #1
 8009604:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009608:	e7d2      	b.n	80095b0 <__kernel_rem_pio2f+0x414>
 800960a:	eef0 7a47 	vmov.f32	s15, s14
 800960e:	e7d4      	b.n	80095ba <__kernel_rem_pio2f+0x41e>
 8009610:	ecb2 7a01 	vldmia	r2!, {s14}
 8009614:	3301      	adds	r3, #1
 8009616:	ee77 7a87 	vadd.f32	s15, s15, s14
 800961a:	e7d6      	b.n	80095ca <__kernel_rem_pio2f+0x42e>
 800961c:	edd2 7a00 	vldr	s15, [r2]
 8009620:	edd2 6a01 	vldr	s13, [r2, #4]
 8009624:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009628:	3801      	subs	r0, #1
 800962a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800962e:	ed82 7a00 	vstr	s14, [r2]
 8009632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009636:	edc2 7a01 	vstr	s15, [r2, #4]
 800963a:	e798      	b.n	800956e <__kernel_rem_pio2f+0x3d2>
 800963c:	edd3 7a00 	vldr	s15, [r3]
 8009640:	edd3 6a01 	vldr	s13, [r3, #4]
 8009644:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009648:	3a01      	subs	r2, #1
 800964a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800964e:	ed83 7a00 	vstr	s14, [r3]
 8009652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009656:	edc3 7a01 	vstr	s15, [r3, #4]
 800965a:	e78d      	b.n	8009578 <__kernel_rem_pio2f+0x3dc>
 800965c:	ed33 7a01 	vldmdb	r3!, {s14}
 8009660:	3c01      	subs	r4, #1
 8009662:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009666:	e78f      	b.n	8009588 <__kernel_rem_pio2f+0x3ec>
 8009668:	eef1 6a66 	vneg.f32	s13, s13
 800966c:	eeb1 7a47 	vneg.f32	s14, s14
 8009670:	edc7 6a00 	vstr	s13, [r7]
 8009674:	ed87 7a01 	vstr	s14, [r7, #4]
 8009678:	eef1 7a67 	vneg.f32	s15, s15
 800967c:	e790      	b.n	80095a0 <__kernel_rem_pio2f+0x404>
 800967e:	bf00      	nop

08009680 <scalbnf>:
 8009680:	ee10 3a10 	vmov	r3, s0
 8009684:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009688:	d02b      	beq.n	80096e2 <scalbnf+0x62>
 800968a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800968e:	d302      	bcc.n	8009696 <scalbnf+0x16>
 8009690:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009694:	4770      	bx	lr
 8009696:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800969a:	d123      	bne.n	80096e4 <scalbnf+0x64>
 800969c:	4b24      	ldr	r3, [pc, #144]	@ (8009730 <scalbnf+0xb0>)
 800969e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009734 <scalbnf+0xb4>
 80096a2:	4298      	cmp	r0, r3
 80096a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80096a8:	db17      	blt.n	80096da <scalbnf+0x5a>
 80096aa:	ee10 3a10 	vmov	r3, s0
 80096ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80096b2:	3a19      	subs	r2, #25
 80096b4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80096b8:	4288      	cmp	r0, r1
 80096ba:	dd15      	ble.n	80096e8 <scalbnf+0x68>
 80096bc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009738 <scalbnf+0xb8>
 80096c0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800973c <scalbnf+0xbc>
 80096c4:	ee10 3a10 	vmov	r3, s0
 80096c8:	eeb0 7a67 	vmov.f32	s14, s15
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	bfb8      	it	lt
 80096d0:	eef0 7a66 	vmovlt.f32	s15, s13
 80096d4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80096d8:	4770      	bx	lr
 80096da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009740 <scalbnf+0xc0>
 80096de:	ee27 0a80 	vmul.f32	s0, s15, s0
 80096e2:	4770      	bx	lr
 80096e4:	0dd2      	lsrs	r2, r2, #23
 80096e6:	e7e5      	b.n	80096b4 <scalbnf+0x34>
 80096e8:	4410      	add	r0, r2
 80096ea:	28fe      	cmp	r0, #254	@ 0xfe
 80096ec:	dce6      	bgt.n	80096bc <scalbnf+0x3c>
 80096ee:	2800      	cmp	r0, #0
 80096f0:	dd06      	ble.n	8009700 <scalbnf+0x80>
 80096f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80096f6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80096fa:	ee00 3a10 	vmov	s0, r3
 80096fe:	4770      	bx	lr
 8009700:	f110 0f16 	cmn.w	r0, #22
 8009704:	da09      	bge.n	800971a <scalbnf+0x9a>
 8009706:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009740 <scalbnf+0xc0>
 800970a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009744 <scalbnf+0xc4>
 800970e:	ee10 3a10 	vmov	r3, s0
 8009712:	eeb0 7a67 	vmov.f32	s14, s15
 8009716:	2b00      	cmp	r3, #0
 8009718:	e7d9      	b.n	80096ce <scalbnf+0x4e>
 800971a:	3019      	adds	r0, #25
 800971c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009720:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009724:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009748 <scalbnf+0xc8>
 8009728:	ee07 3a90 	vmov	s15, r3
 800972c:	e7d7      	b.n	80096de <scalbnf+0x5e>
 800972e:	bf00      	nop
 8009730:	ffff3cb0 	.word	0xffff3cb0
 8009734:	4c000000 	.word	0x4c000000
 8009738:	7149f2ca 	.word	0x7149f2ca
 800973c:	f149f2ca 	.word	0xf149f2ca
 8009740:	0da24260 	.word	0x0da24260
 8009744:	8da24260 	.word	0x8da24260
 8009748:	33000000 	.word	0x33000000

0800974c <floorf>:
 800974c:	ee10 3a10 	vmov	r3, s0
 8009750:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009754:	3a7f      	subs	r2, #127	@ 0x7f
 8009756:	2a16      	cmp	r2, #22
 8009758:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800975c:	dc2b      	bgt.n	80097b6 <floorf+0x6a>
 800975e:	2a00      	cmp	r2, #0
 8009760:	da12      	bge.n	8009788 <floorf+0x3c>
 8009762:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80097c8 <floorf+0x7c>
 8009766:	ee30 0a27 	vadd.f32	s0, s0, s15
 800976a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800976e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009772:	dd06      	ble.n	8009782 <floorf+0x36>
 8009774:	2b00      	cmp	r3, #0
 8009776:	da24      	bge.n	80097c2 <floorf+0x76>
 8009778:	2900      	cmp	r1, #0
 800977a:	4b14      	ldr	r3, [pc, #80]	@ (80097cc <floorf+0x80>)
 800977c:	bf08      	it	eq
 800977e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8009782:	ee00 3a10 	vmov	s0, r3
 8009786:	4770      	bx	lr
 8009788:	4911      	ldr	r1, [pc, #68]	@ (80097d0 <floorf+0x84>)
 800978a:	4111      	asrs	r1, r2
 800978c:	420b      	tst	r3, r1
 800978e:	d0fa      	beq.n	8009786 <floorf+0x3a>
 8009790:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80097c8 <floorf+0x7c>
 8009794:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009798:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800979c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a0:	ddef      	ble.n	8009782 <floorf+0x36>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	bfbe      	ittt	lt
 80097a6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80097aa:	fa40 f202 	asrlt.w	r2, r0, r2
 80097ae:	189b      	addlt	r3, r3, r2
 80097b0:	ea23 0301 	bic.w	r3, r3, r1
 80097b4:	e7e5      	b.n	8009782 <floorf+0x36>
 80097b6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80097ba:	d3e4      	bcc.n	8009786 <floorf+0x3a>
 80097bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80097c0:	4770      	bx	lr
 80097c2:	2300      	movs	r3, #0
 80097c4:	e7dd      	b.n	8009782 <floorf+0x36>
 80097c6:	bf00      	nop
 80097c8:	7149f2ca 	.word	0x7149f2ca
 80097cc:	bf800000 	.word	0xbf800000
 80097d0:	007fffff 	.word	0x007fffff

080097d4 <_init>:
 80097d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d6:	bf00      	nop
 80097d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097da:	bc08      	pop	{r3}
 80097dc:	469e      	mov	lr, r3
 80097de:	4770      	bx	lr

080097e0 <_fini>:
 80097e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e2:	bf00      	nop
 80097e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097e6:	bc08      	pop	{r3}
 80097e8:	469e      	mov	lr, r3
 80097ea:	4770      	bx	lr
